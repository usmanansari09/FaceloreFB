//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 2 view controllers.
  struct segue {
    /// This struct is generated for `CreateGroupController`, and contains static references to 1 segues.
    struct createGroupController {
      /// Segue identifier `gotoCategory`.
      static let gotoCategory: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CreateGroupController, GroupCategoryController> = Rswift.StoryboardSegueIdentifier(identifier: "gotoCategory")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `gotoCategory`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func gotoCategory(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CreateGroupController, GroupCategoryController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.createGroupController.gotoCategory, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `LoginController`, and contains static references to 1 segues.
    struct loginController {
      /// Segue identifier `ForgetPasswordVC`.
      static let forgetPasswordVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoginController, ForgetPasswordController> = Rswift.StoryboardSegueIdentifier(identifier: "ForgetPasswordVC")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `ForgetPasswordVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func forgetPasswordVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoginController, ForgetPasswordController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginController.forgetPasswordVC, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 19 storyboards.
  struct storyboard {
    /// Storyboard `AddPost`.
    static let addPost = _R.storyboard.addPost()
    /// Storyboard `Authentication`.
    static let authentication = _R.storyboard.authentication()
    /// Storyboard `Funding`.
    static let funding = _R.storyboard.funding()
    /// Storyboard `General`.
    static let general = _R.storyboard.general()
    /// Storyboard `GroupsAndPages`.
    static let groupsAndPages = _R.storyboard.groupsAndPages()
    /// Storyboard `HelpSupport`.
    static let helpSupport = _R.storyboard.helpSupport()
    /// Storyboard `Jobs`.
    static let jobs = _R.storyboard.jobs()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `MarketPlaces-PopularPost-Events`.
    static let marketPlacesPopularPostEvents = _R.storyboard.marketPlacesPopularPostEvents()
    /// Storyboard `MoreSection2`.
    static let moreSection2 = _R.storyboard.moreSection2()
    /// Storyboard `MoreSection`.
    static let moreSection = _R.storyboard.moreSection()
    /// Storyboard `Notification`.
    static let notification = _R.storyboard.notification()
    /// Storyboard `Offers`.
    static let offers = _R.storyboard.offers()
    /// Storyboard `Poke-MyVideos-Albums`.
    static let pokeMyVideosAlbums = _R.storyboard.pokeMyVideosAlbums()
    /// Storyboard `Privacy`.
    static let privacy = _R.storyboard.privacy()
    /// Storyboard `Search`.
    static let search = _R.storyboard.search()
    /// Storyboard `Stories`.
    static let stories = _R.storyboard.stories()
    /// Storyboard `TellFriend`.
    static let tellFriend = _R.storyboard.tellFriend()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AddPost", bundle: ...)`
    static func addPost(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addPost)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Authentication", bundle: ...)`
    static func authentication(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.authentication)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Funding", bundle: ...)`
    static func funding(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.funding)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "General", bundle: ...)`
    static func general(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.general)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "GroupsAndPages", bundle: ...)`
    static func groupsAndPages(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.groupsAndPages)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HelpSupport", bundle: ...)`
    static func helpSupport(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.helpSupport)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Jobs", bundle: ...)`
    static func jobs(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.jobs)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MarketPlaces-PopularPost-Events", bundle: ...)`
    static func marketPlacesPopularPostEvents(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.marketPlacesPopularPostEvents)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MoreSection", bundle: ...)`
    static func moreSection(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.moreSection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MoreSection2", bundle: ...)`
    static func moreSection2(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.moreSection2)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Notification", bundle: ...)`
    static func notification(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.notification)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Offers", bundle: ...)`
    static func offers(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.offers)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Poke-MyVideos-Albums", bundle: ...)`
    static func pokeMyVideosAlbums(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.pokeMyVideosAlbums)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Privacy", bundle: ...)`
    static func privacy(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.privacy)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Search", bundle: ...)`
    static func search(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.search)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Stories", bundle: ...)`
    static func stories(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.stories)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "TellFriend", bundle: ...)`
    static func tellFriend(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tellFriend)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 18 files.
  struct file {
    /// Resource file `angry.gif`.
    static let angryGif = Rswift.FileResource(bundle: R.hostingBundle, name: "angry", pathExtension: "gif")
    /// Resource file `angry1.gif`.
    static let angry1Gif = Rswift.FileResource(bundle: R.hostingBundle, name: "angry1", pathExtension: "gif")
    /// Resource file `arm64.swiftdoc`.
    static let arm64Swiftdoc = Rswift.FileResource(bundle: R.hostingBundle, name: "arm64", pathExtension: "swiftdoc")
    /// Resource file `arm64.swiftmodule`.
    static let arm64Swiftmodule = Rswift.FileResource(bundle: R.hostingBundle, name: "arm64", pathExtension: "swiftmodule")
    /// Resource file `button.mp3`.
    static let buttonMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "button", pathExtension: "mp3")
    /// Resource file `click_sound.mp3`.
    static let click_soundMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "click_sound", pathExtension: "mp3")
    /// Resource file `haha.gif`.
    static let hahaGif = Rswift.FileResource(bundle: R.hostingBundle, name: "haha", pathExtension: "gif")
    /// Resource file `haha1.gif`.
    static let haha1Gif = Rswift.FileResource(bundle: R.hostingBundle, name: "haha1", pathExtension: "gif")
    /// Resource file `like.gif`.
    static let likeGif = Rswift.FileResource(bundle: R.hostingBundle, name: "like", pathExtension: "gif")
    /// Resource file `like1.gif`.
    static let like1Gif = Rswift.FileResource(bundle: R.hostingBundle, name: "like1", pathExtension: "gif")
    /// Resource file `love.gif`.
    static let loveGif = Rswift.FileResource(bundle: R.hostingBundle, name: "love", pathExtension: "gif")
    /// Resource file `love1.gif`.
    static let love1Gif = Rswift.FileResource(bundle: R.hostingBundle, name: "love1", pathExtension: "gif")
    /// Resource file `sad.gif`.
    static let sadGif = Rswift.FileResource(bundle: R.hostingBundle, name: "sad", pathExtension: "gif")
    /// Resource file `sad1.gif`.
    static let sad1Gif = Rswift.FileResource(bundle: R.hostingBundle, name: "sad1", pathExtension: "gif")
    /// Resource file `wow.gif`.
    static let wowGif = Rswift.FileResource(bundle: R.hostingBundle, name: "wow", pathExtension: "gif")
    /// Resource file `wow1.gif`.
    static let wow1Gif = Rswift.FileResource(bundle: R.hostingBundle, name: "wow1", pathExtension: "gif")
    /// Resource file `x86_64.swiftdoc`.
    static let x86_64Swiftdoc = Rswift.FileResource(bundle: R.hostingBundle, name: "x86_64", pathExtension: "swiftdoc")
    /// Resource file `x86_64.swiftmodule`.
    static let x86_64Swiftmodule = Rswift.FileResource(bundle: R.hostingBundle, name: "x86_64", pathExtension: "swiftmodule")

    /// `bundle.url(forResource: "angry", withExtension: "gif")`
    static func angryGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.angryGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "angry1", withExtension: "gif")`
    static func angry1Gif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.angry1Gif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "arm64", withExtension: "swiftdoc")`
    static func arm64Swiftdoc(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.arm64Swiftdoc
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "arm64", withExtension: "swiftmodule")`
    static func arm64Swiftmodule(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.arm64Swiftmodule
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "button", withExtension: "mp3")`
    static func buttonMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.buttonMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "click_sound", withExtension: "mp3")`
    static func click_soundMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.click_soundMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "haha", withExtension: "gif")`
    static func hahaGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hahaGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "haha1", withExtension: "gif")`
    static func haha1Gif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.haha1Gif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "like", withExtension: "gif")`
    static func likeGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.likeGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "like1", withExtension: "gif")`
    static func like1Gif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.like1Gif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "love", withExtension: "gif")`
    static func loveGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loveGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "love1", withExtension: "gif")`
    static func love1Gif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.love1Gif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sad", withExtension: "gif")`
    static func sadGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sadGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sad1", withExtension: "gif")`
    static func sad1Gif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sad1Gif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "wow", withExtension: "gif")`
    static func wowGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.wowGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "wow1", withExtension: "gif")`
    static func wow1Gif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.wow1Gif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "x86_64", withExtension: "swiftdoc")`
    static func x86_64Swiftdoc(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.x86_64Swiftdoc
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "x86_64", withExtension: "swiftmodule")`
    static func x86_64Swiftmodule(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.x86_64Swiftmodule
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 376 images.
  struct image {
    /// Image `Ad`.
    static let ad = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ad")
    /// Image `AgeCalender`.
    static let ageCalender = Rswift.ImageResource(bundle: R.hostingBundle, name: "AgeCalender")
    /// Image `Album`.
    static let album = Rswift.ImageResource(bundle: R.hostingBundle, name: "Album")
    /// Image `Archery`.
    static let archery = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archery")
    /// Image `Blog-icon`.
    static let blogIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Blog-icon")
    /// Image `Cameras`.
    static let cameras = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cameras")
    /// Image `Cart`.
    static let cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cart")
    /// Image `CategoriesIMg`.
    static let categoriesIMg = Rswift.ImageResource(bundle: R.hostingBundle, name: "CategoriesIMg")
    /// Image `CategoryIcon`.
    static let categoryIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "CategoryIcon")
    /// Image `CategoryImage`.
    static let categoryImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "CategoryImage")
    /// Image `ChevronRight`.
    static let chevronRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ChevronRight")
    /// Image `Coffee`.
    static let coffee = Rswift.ImageResource(bundle: R.hostingBundle, name: "Coffee")
    /// Image `CopyLink`.
    static let copyLink = Rswift.ImageResource(bundle: R.hostingBundle, name: "CopyLink")
    /// Image `Cover_image`.
    static let cover_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cover_image")
    /// Image `EditImage`.
    static let editImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditImage")
    /// Image `Fillsstar`.
    static let fillsstar = Rswift.ImageResource(bundle: R.hostingBundle, name: "Fillsstar")
    /// Image `Gender`.
    static let gender = Rswift.ImageResource(bundle: R.hostingBundle, name: "Gender")
    /// Image `General`.
    static let general = Rswift.ImageResource(bundle: R.hostingBundle, name: "General")
    /// Image `Group-1`.
    static let group1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group-1")
    /// Image `GroupIcons-1`.
    static let groupIcons1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "GroupIcons-1")
    /// Image `GroupMembers`.
    static let groupMembers = Rswift.ImageResource(bundle: R.hostingBundle, name: "GroupMembers")
    /// Image `Group`.
    static let group = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group")
    /// Image `Ic_Post_videoPlay`.
    static let ic_Post_videoPlay = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ic_Post_videoPlay")
    /// Image `Image`.
    static let image = Rswift.ImageResource(bundle: R.hostingBundle, name: "Image")
    /// Image `Infinity`.
    static let infinity = Rswift.ImageResource(bundle: R.hostingBundle, name: "Infinity")
    /// Image `Mappin`.
    static let mappin = Rswift.ImageResource(bundle: R.hostingBundle, name: "Mappin")
    /// Image `Movies`.
    static let movies = Rswift.ImageResource(bundle: R.hostingBundle, name: "Movies")
    /// Image `Musics`.
    static let musics = Rswift.ImageResource(bundle: R.hostingBundle, name: "Musics")
    /// Image `NewsFeed-1`.
    static let newsFeed1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "NewsFeed-1")
    /// Image `NewsFeed`.
    static let newsFeed = Rswift.ImageResource(bundle: R.hostingBundle, name: "NewsFeed")
    /// Image `NoAlbum`.
    static let noAlbum = Rswift.ImageResource(bundle: R.hostingBundle, name: "NoAlbum")
    /// Image `NoImage`.
    static let noImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "NoImage")
    /// Image `Options`.
    static let options = Rswift.ImageResource(bundle: R.hostingBundle, name: "Options")
    /// Image `Oval`.
    static let oval = Rswift.ImageResource(bundle: R.hostingBundle, name: "Oval")
    /// Image `PagePro`.
    static let pagePro = Rswift.ImageResource(bundle: R.hostingBundle, name: "PagePro")
    /// Image `PagesIcon`.
    static let pagesIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "PagesIcon")
    /// Image `Path 14`.
    static let path14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Path 14")
    /// Image `Plays`.
    static let plays = Rswift.ImageResource(bundle: R.hostingBundle, name: "Plays")
    /// Image `Profiles`.
    static let profiles = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profiles")
    /// Image `Rating`.
    static let rating = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rating")
    /// Image `RegisterEmail`.
    static let registerEmail = Rswift.ImageResource(bundle: R.hostingBundle, name: "RegisterEmail")
    /// Image `Shape-1`.
    static let shape1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shape-1")
    /// Image `Shape-2`.
    static let shape2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shape-2")
    /// Image `Shape-3`.
    static let shape3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shape-3")
    /// Image `Shape-4`.
    static let shape4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shape-4")
    /// Image `Shape-5`.
    static let shape5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shape-5")
    /// Image `Shape`.
    static let shape = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shape")
    /// Image `Share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "Share")
    /// Image `Sharess`.
    static let sharess = Rswift.ImageResource(bundle: R.hostingBundle, name: "Sharess")
    /// Image `StarGreen`.
    static let starGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "StarGreen")
    /// Image `Star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star")
    /// Image `Stars`.
    static let stars = Rswift.ImageResource(bundle: R.hostingBundle, name: "Stars")
    /// Image `Starts`.
    static let starts = Rswift.ImageResource(bundle: R.hostingBundle, name: "Starts")
    /// Image `Veriified`.
    static let veriified = Rswift.ImageResource(bundle: R.hostingBundle, name: "Veriified")
    /// Image `VideoOff`.
    static let videoOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "VideoOff")
    /// Image `VideoOn`.
    static let videoOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "VideoOn")
    /// Image `_Icons - Search`.
    static let _IconsSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "_Icons - Search")
    /// Image `add-button`.
    static let addButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "add-button")
    /// Image `add-friend`.
    static let addFriend = Rswift.ImageResource(bundle: R.hostingBundle, name: "add-friend")
    /// Image `add-friends`.
    static let addFriends = Rswift.ImageResource(bundle: R.hostingBundle, name: "add-friends")
    /// Image `addAlbum`.
    static let addAlbum = Rswift.ImageResource(bundle: R.hostingBundle, name: "addAlbum")
    /// Image `addusers`.
    static let addusers = Rswift.ImageResource(bundle: R.hostingBundle, name: "addusers")
    /// Image `albums-1`.
    static let albums1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "albums-1")
    /// Image `albums`.
    static let albums = Rswift.ImageResource(bundle: R.hostingBundle, name: "albums")
    /// Image `angry.gif`.
    static let angryGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "angry.gif")
    /// Image `angry1.gif`.
    static let angry1Gif = Rswift.ImageResource(bundle: R.hostingBundle, name: "angry1.gif")
    /// Image `angry2`.
    static let angry2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "angry2")
    /// Image `angryReact`.
    static let angryReact = Rswift.ImageResource(bundle: R.hostingBundle, name: "angryReact")
    /// Image `angry`.
    static let angry = Rswift.ImageResource(bundle: R.hostingBundle, name: "angry")
    /// Image `arrow-pointing-to-right`.
    static let arrowPointingToRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-pointing-to-right")
    /// Image `arrow-pointing`.
    static let arrowPointing = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-pointing")
    /// Image `at`.
    static let at = Rswift.ImageResource(bundle: R.hostingBundle, name: "at")
    /// Image `avatar`.
    static let avatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar")
    /// Image `backh`.
    static let backh = Rswift.ImageResource(bundle: R.hostingBundle, name: "backh")
    /// Image `badge-1`.
    static let badge1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "badge-1")
    /// Image `badge`.
    static let badge = Rswift.ImageResource(bundle: R.hostingBundle, name: "badge")
    /// Image `bags`.
    static let bags = Rswift.ImageResource(bundle: R.hostingBundle, name: "bags")
    /// Image `bank`.
    static let bank = Rswift.ImageResource(bundle: R.hostingBundle, name: "bank")
    /// Image `bell`.
    static let bell = Rswift.ImageResource(bundle: R.hostingBundle, name: "bell")
    /// Image `bg2`.
    static let bg2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg2")
    /// Image `bg3`.
    static let bg3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg3")
    /// Image `bg4`.
    static let bg4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg4")
    /// Image `bg5`.
    static let bg5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg5")
    /// Image `bg6`.
    static let bg6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg6")
    /// Image `bg7`.
    static let bg7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg7")
    /// Image `bill`.
    static let bill = Rswift.ImageResource(bundle: R.hostingBundle, name: "bill")
    /// Image `birthday-cake-1`.
    static let birthdayCake1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "birthday-cake-1")
    /// Image `birthday-cake`.
    static let birthdayCake = Rswift.ImageResource(bundle: R.hostingBundle, name: "birthday-cake")
    /// Image `boardImage1`.
    static let boardImage1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "boardImage1")
    /// Image `boardImage2`.
    static let boardImage2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "boardImage2")
    /// Image `boardImage3`.
    static let boardImage3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "boardImage3")
    /// Image `boardImage4`.
    static let boardImage4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "boardImage4")
    /// Image `bookmark`.
    static let bookmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookmark")
    /// Image `borefire`.
    static let borefire = Rswift.ImageResource(bundle: R.hostingBundle, name: "borefire")
    /// Image `box`.
    static let box = Rswift.ImageResource(bundle: R.hostingBundle, name: "box")
    /// Image `briefcase`.
    static let briefcase = Rswift.ImageResource(bundle: R.hostingBundle, name: "briefcase")
    /// Image `business-center`.
    static let businessCenter = Rswift.ImageResource(bundle: R.hostingBundle, name: "business-center")
    /// Image `calendars`.
    static let calendars = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendars")
    /// Image `calendarss`.
    static let calendarss = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendarss")
    /// Image `camera`.
    static let camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera")
    /// Image `cancel`.
    static let cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel")
    /// Image `cash`.
    static let cash = Rswift.ImageResource(bundle: R.hostingBundle, name: "cash")
    /// Image `chain`.
    static let chain = Rswift.ImageResource(bundle: R.hostingBundle, name: "chain")
    /// Image `chat-comment`.
    static let chatComment = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat-comment")
    /// Image `chat`.
    static let chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat")
    /// Image `check-box-empty`.
    static let checkBoxEmpty = Rswift.ImageResource(bundle: R.hostingBundle, name: "check-box-empty")
    /// Image `check-sign-in-a-square`.
    static let checkSignInASquare = Rswift.ImageResource(bundle: R.hostingBundle, name: "check-sign-in-a-square")
    /// Image `check-symbol`.
    static let checkSymbol = Rswift.ImageResource(bundle: R.hostingBundle, name: "check-symbol")
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `checkess`.
    static let checkess = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkess")
    /// Image `checkmark`.
    static let checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkmark")
    /// Image `chevronBack`.
    static let chevronBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "chevronBack")
    /// Image `cinema-clapboard`.
    static let cinemaClapboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "cinema-clapboard")
    /// Image `circular-shape-silhouettet`.
    static let circularShapeSilhouettet = Rswift.ImageResource(bundle: R.hostingBundle, name: "circular-shape-silhouettet")
    /// Image `circular-shape`.
    static let circularShape = Rswift.ImageResource(bundle: R.hostingBundle, name: "circular-shape")
    /// Image `clipboard`.
    static let clipboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "clipboard")
    /// Image `clipboardes`.
    static let clipboardes = Rswift.ImageResource(bundle: R.hostingBundle, name: "clipboardes")
    /// Image `clockBlack`.
    static let clockBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "clockBlack")
    /// Image `clock`.
    static let clock = Rswift.ImageResource(bundle: R.hostingBundle, name: "clock")
    /// Image `close-1`.
    static let close1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "close-1")
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `coin`.
    static let coin = Rswift.ImageResource(bundle: R.hostingBundle, name: "coin")
    /// Image `commentss`.
    static let commentss = Rswift.ImageResource(bundle: R.hostingBundle, name: "commentss")
    /// Image `commerce`.
    static let commerce = Rswift.ImageResource(bundle: R.hostingBundle, name: "commerce")
    /// Image `contract`.
    static let contract = Rswift.ImageResource(bundle: R.hostingBundle, name: "contract")
    /// Image `copy`.
    static let copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "copy")
    /// Image `copyes`.
    static let copyes = Rswift.ImageResource(bundle: R.hostingBundle, name: "copyes")
    /// Image `credit-card-1`.
    static let creditCard1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "credit-card-1")
    /// Image `credit-card`.
    static let creditCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "credit-card")
    /// Image `credit-cards`.
    static let creditCards = Rswift.ImageResource(bundle: R.hostingBundle, name: "credit-cards")
    /// Image `d-cover`.
    static let dCover = Rswift.ImageResource(bundle: R.hostingBundle, name: "d-cover")
    /// Image `d-page`.
    static let dPage = Rswift.ImageResource(bundle: R.hostingBundle, name: "d-page")
    /// Image `delete`.
    static let delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete")
    /// Image `directory`.
    static let directory = Rswift.ImageResource(bundle: R.hostingBundle, name: "directory")
    /// Image `documents`.
    static let documents = Rswift.ImageResource(bundle: R.hostingBundle, name: "documents")
    /// Image `dollar-sign`.
    static let dollarSign = Rswift.ImageResource(bundle: R.hostingBundle, name: "dollar-sign")
    /// Image `dollar`.
    static let dollar = Rswift.ImageResource(bundle: R.hostingBundle, name: "dollar")
    /// Image `download`.
    static let download = Rswift.ImageResource(bundle: R.hostingBundle, name: "download")
    /// Image `envelope`.
    static let envelope = Rswift.ImageResource(bundle: R.hostingBundle, name: "envelope")
    /// Image `exclamation-mark`.
    static let exclamationMark = Rswift.ImageResource(bundle: R.hostingBundle, name: "exclamation-mark")
    /// Image `explorer`.
    static let explorer = Rswift.ImageResource(bundle: R.hostingBundle, name: "explorer")
    /// Image `eye`.
    static let eye = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye")
    /// Image `eyes`.
    static let eyes = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyes")
    /// Image `facebook-group`.
    static let facebookGroup = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook-group")
    /// Image `facebookLogo`.
    static let facebookLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebookLogo")
    /// Image `facebook`.
    static let facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook")
    /// Image `file`.
    static let file = Rswift.ImageResource(bundle: R.hostingBundle, name: "file")
    /// Image `filter`.
    static let filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter")
    /// Image `fire-1`.
    static let fire1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fire-1")
    /// Image `fire-symbol`.
    static let fireSymbol = Rswift.ImageResource(bundle: R.hostingBundle, name: "fire-symbol")
    /// Image `fire`.
    static let fire = Rswift.ImageResource(bundle: R.hostingBundle, name: "fire")
    /// Image `flag-icon`.
    static let flagIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "flag-icon")
    /// Image `flag`.
    static let flag = Rswift.ImageResource(bundle: R.hostingBundle, name: "flag")
    /// Image `flages`.
    static let flages = Rswift.ImageResource(bundle: R.hostingBundle, name: "flages")
    /// Image `flash-1`.
    static let flash1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "flash-1")
    /// Image `flash-2`.
    static let flash2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "flash-2")
    /// Image `flash`.
    static let flash = Rswift.ImageResource(bundle: R.hostingBundle, name: "flash")
    /// Image `friends-1`.
    static let friends1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "friends-1")
    /// Image `friends`.
    static let friends = Rswift.ImageResource(bundle: R.hostingBundle, name: "friends")
    /// Image `game-controller`.
    static let gameController = Rswift.ImageResource(bundle: R.hostingBundle, name: "game-controller")
    /// Image `game-controllers`.
    static let gameControllers = Rswift.ImageResource(bundle: R.hostingBundle, name: "game-controllers")
    /// Image `genderi`.
    static let genderi = Rswift.ImageResource(bundle: R.hostingBundle, name: "genderi")
    /// Image `goal`.
    static let goal = Rswift.ImageResource(bundle: R.hostingBundle, name: "goal")
    /// Image `googleLogo`.
    static let googleLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "googleLogo")
    /// Image `gotoNext`.
    static let gotoNext = Rswift.ImageResource(bundle: R.hostingBundle, name: "gotoNext")
    /// Image `gps`.
    static let gps = Rswift.ImageResource(bundle: R.hostingBundle, name: "gps")
    /// Image `groupIcons`.
    static let groupIcons = Rswift.ImageResource(bundle: R.hostingBundle, name: "groupIcons")
    /// Image `groupes`.
    static let groupes = Rswift.ImageResource(bundle: R.hostingBundle, name: "groupes")
    /// Image `groups`.
    static let groups = Rswift.ImageResource(bundle: R.hostingBundle, name: "groups")
    /// Image `haha.gif`.
    static let hahaGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "haha.gif")
    /// Image `haha1.gif`.
    static let haha1Gif = Rswift.ImageResource(bundle: R.hostingBundle, name: "haha1.gif")
    /// Image `haha2`.
    static let haha2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "haha2")
    /// Image `hahaReact-1`.
    static let hahaReact1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "hahaReact-1")
    /// Image `hahaReact`.
    static let hahaReact = Rswift.ImageResource(bundle: R.hostingBundle, name: "hahaReact")
    /// Image `haha`.
    static let haha = Rswift.ImageResource(bundle: R.hostingBundle, name: "haha")
    /// Image `heart-1`.
    static let heart1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart-1")
    /// Image `heart`.
    static let heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart")
    /// Image `hidePass`.
    static let hidePass = Rswift.ImageResource(bundle: R.hostingBundle, name: "hidePass")
    /// Image `high-school`.
    static let highSchool = Rswift.ImageResource(bundle: R.hostingBundle, name: "high-school")
    /// Image `home-page`.
    static let homePage = Rswift.ImageResource(bundle: R.hostingBundle, name: "home-page")
    /// Image `home-run`.
    static let homeRun = Rswift.ImageResource(bundle: R.hostingBundle, name: "home-run")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `homeicon`.
    static let homeicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "homeicon")
    /// Image `human-location`.
    static let humanLocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "human-location")
    /// Image `ic_action_arrow_upward`.
    static let ic_action_arrow_upward = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_arrow_upward")
    /// Image `ic_action_comment`.
    static let ic_action_comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_comment")
    /// Image `ic_action_download`.
    static let ic_action_download = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_download")
    /// Image `ic_action_more`.
    static let ic_action_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_more")
    /// Image `ic_arrow_right`.
    static let ic_arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_right")
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `ic_capture_camera`.
    static let ic_capture_camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_capture_camera")
    /// Image `ic_chat_violet`.
    static let ic_chat_violet = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chat_violet")
    /// Image `ic_chats`.
    static let ic_chats = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chats")
    /// Image `ic_check`.
    static let ic_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check")
    /// Image `ic_comments_small`.
    static let ic_comments_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_comments_small")
    /// Image `ic_email`.
    static let ic_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_email")
    /// Image `ic_location_place`.
    static let ic_location_place = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_location_place")
    /// Image `ic_magnifying_glass`.
    static let ic_magnifying_glass = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_magnifying_glass")
    /// Image `ic_next_small`.
    static let ic_next_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_next_small")
    /// Image `ic_paper_plane`.
    static let ic_paper_plane = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_paper_plane")
    /// Image `ic_play`.
    static let ic_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_play")
    /// Image `ic_post_desert`.
    static let ic_post_desert = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_post_desert")
    /// Image `ic_post_park`.
    static let ic_post_park = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_post_park")
    /// Image `ic_post_sea`.
    static let ic_post_sea = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_post_sea")
    /// Image `ic_profile_small`.
    static let ic_profile_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_profile_small")
    /// Image `ic_remove_item`.
    static let ic_remove_item = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_remove_item")
    /// Image `ic_rocket`.
    static let ic_rocket = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_rocket")
    /// Image `ic_smiley-1`.
    static let ic_smiley1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_smiley-1")
    /// Image `ic_smiley`.
    static let ic_smiley = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_smiley")
    /// Image `ic_stop`.
    static let ic_stop = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_stop")
    /// Image `ic_tooltip_gif`.
    static let ic_tooltip_gif = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tooltip_gif")
    /// Image `ic_tooltip_image-1`.
    static let ic_tooltip_image1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tooltip_image-1")
    /// Image `ic_tooltip_image`.
    static let ic_tooltip_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tooltip_image")
    /// Image `ic_tooltip_video`.
    static let ic_tooltip_video = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tooltip_video")
    /// Image `ic_uncheck`.
    static let ic_uncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_uncheck")
    /// Image `instagram`.
    static let instagram = Rswift.ImageResource(bundle: R.hostingBundle, name: "instagram")
    /// Image `internet`.
    static let internet = Rswift.ImageResource(bundle: R.hostingBundle, name: "internet")
    /// Image `inviteUser`.
    static let inviteUser = Rswift.ImageResource(bundle: R.hostingBundle, name: "inviteUser")
    /// Image `jobType`.
    static let jobType = Rswift.ImageResource(bundle: R.hostingBundle, name: "jobType")
    /// Image `label`.
    static let label = Rswift.ImageResource(bundle: R.hostingBundle, name: "label")
    /// Image `launchScreen`.
    static let launchScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "launchScreen")
    /// Image `left-arrow`.
    static let leftArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "left-arrow")
    /// Image `levels`.
    static let levels = Rswift.ImageResource(bundle: R.hostingBundle, name: "levels")
    /// Image `like-1`.
    static let like1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "like-1")
    /// Image `like-2`.
    static let like2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "like-2")
    /// Image `like-3`.
    static let like3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "like-3")
    /// Image `like.gif`.
    static let likeGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "like.gif")
    /// Image `like1.gif`.
    static let like1Gif = Rswift.ImageResource(bundle: R.hostingBundle, name: "like1.gif")
    /// Image `likeReact`.
    static let likeReact = Rswift.ImageResource(bundle: R.hostingBundle, name: "likeReact")
    /// Image `like`.
    static let like = Rswift.ImageResource(bundle: R.hostingBundle, name: "like")
    /// Image `linkedin`.
    static let linkedin = Rswift.ImageResource(bundle: R.hostingBundle, name: "linkedin")
    /// Image `location`.
    static let location = Rswift.ImageResource(bundle: R.hostingBundle, name: "location")
    /// Image `lock`.
    static let lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock")
    /// Image `loginBackground`.
    static let loginBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "loginBackground")
    /// Image `loginImage`.
    static let loginImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "loginImage")
    /// Image `logo-1`.
    static let logo1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo-1")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout")
    /// Image `love.gif`.
    static let loveGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "love.gif")
    /// Image `love1.gif`.
    static let love1Gif = Rswift.ImageResource(bundle: R.hostingBundle, name: "love1.gif")
    /// Image `love1`.
    static let love1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "love1")
    /// Image `loveReact`.
    static let loveReact = Rswift.ImageResource(bundle: R.hostingBundle, name: "loveReact")
    /// Image `love`.
    static let love = Rswift.ImageResource(bundle: R.hostingBundle, name: "love")
    /// Image `magic`.
    static let magic = Rswift.ImageResource(bundle: R.hostingBundle, name: "magic")
    /// Image `mail`.
    static let mail = Rswift.ImageResource(bundle: R.hostingBundle, name: "mail")
    /// Image `map`.
    static let map = Rswift.ImageResource(bundle: R.hostingBundle, name: "map")
    /// Image `maps-and-flags`.
    static let mapsAndFlags = Rswift.ImageResource(bundle: R.hostingBundle, name: "maps-and-flags")
    /// Image `medal`.
    static let medal = Rswift.ImageResource(bundle: R.hostingBundle, name: "medal")
    /// Image `megaphone`.
    static let megaphone = Rswift.ImageResource(bundle: R.hostingBundle, name: "megaphone")
    /// Image `menu-1`.
    static let menu1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu-1")
    /// Image `menu-2`.
    static let menu2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu-2")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `menues`.
    static let menues = Rswift.ImageResource(bundle: R.hostingBundle, name: "menues")
    /// Image `menuicon`.
    static let menuicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuicon")
    /// Image `messageIcon`.
    static let messageIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "messageIcon")
    /// Image `micOff`.
    static let micOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "micOff")
    /// Image `mic`.
    static let mic = Rswift.ImageResource(bundle: R.hostingBundle, name: "mic")
    /// Image `more-1`.
    static let more1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "more-1")
    /// Image `more`.
    static let more = Rswift.ImageResource(bundle: R.hostingBundle, name: "more")
    /// Image `morese`.
    static let morese = Rswift.ImageResource(bundle: R.hostingBundle, name: "morese")
    /// Image `moress`.
    static let moress = Rswift.ImageResource(bundle: R.hostingBundle, name: "moress")
    /// Image `movie_video`.
    static let movie_video = Rswift.ImageResource(bundle: R.hostingBundle, name: "movie_video")
    /// Image `multimedia`.
    static let multimedia = Rswift.ImageResource(bundle: R.hostingBundle, name: "multimedia")
    /// Image `music`.
    static let music = Rswift.ImageResource(bundle: R.hostingBundle, name: "music")
    /// Image `next`.
    static let next = Rswift.ImageResource(bundle: R.hostingBundle, name: "next")
    /// Image `no-avatar`.
    static let noAvatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "no-avatar")
    /// Image `noContent`.
    static let noContent = Rswift.ImageResource(bundle: R.hostingBundle, name: "noContent")
    /// Image `notification`.
    static let notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification")
    /// Image `notificationicon`.
    static let notificationicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "notificationicon")
    /// Image `nucleus`.
    static let nucleus = Rswift.ImageResource(bundle: R.hostingBundle, name: "nucleus")
    /// Image `padlock`.
    static let padlock = Rswift.ImageResource(bundle: R.hostingBundle, name: "padlock")
    /// Image `paid-articles`.
    static let paidArticles = Rswift.ImageResource(bundle: R.hostingBundle, name: "paid-articles")
    /// Image `password`.
    static let password = Rswift.ImageResource(bundle: R.hostingBundle, name: "password")
    /// Image `paste`.
    static let paste = Rswift.ImageResource(bundle: R.hostingBundle, name: "paste")
    /// Image `pause-button`.
    static let pauseButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "pause-button")
    /// Image `pause`.
    static let pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "pause")
    /// Image `pencil-black`.
    static let pencilBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "pencil-black")
    /// Image `pencil`.
    static let pencil = Rswift.ImageResource(bundle: R.hostingBundle, name: "pencil")
    /// Image `people`.
    static let people = Rswift.ImageResource(bundle: R.hostingBundle, name: "people")
    /// Image `photo-camera`.
    static let photoCamera = Rswift.ImageResource(bundle: R.hostingBundle, name: "photo-camera")
    /// Image `photo-cameraw`.
    static let photoCameraw = Rswift.ImageResource(bundle: R.hostingBundle, name: "photo-cameraw")
    /// Image `photo-library`.
    static let photoLibrary = Rswift.ImageResource(bundle: R.hostingBundle, name: "photo-library")
    /// Image `photo`.
    static let photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "photo")
    /// Image `photos`.
    static let photos = Rswift.ImageResource(bundle: R.hostingBundle, name: "photos")
    /// Image `picture`.
    static let picture = Rswift.ImageResource(bundle: R.hostingBundle, name: "picture")
    /// Image `pilcrowIcon`.
    static let pilcrowIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "pilcrowIcon")
    /// Image `pin-1`.
    static let pin1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin-1")
    /// Image `pin-2`.
    static let pin2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin-2")
    /// Image `pin`.
    static let pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin")
    /// Image `pins(red)`.
    static let pinsRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "pins(red)")
    /// Image `pins`.
    static let pins = Rswift.ImageResource(bundle: R.hostingBundle, name: "pins")
    /// Image `play-button`.
    static let playButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "play-button")
    /// Image `play-buttons`.
    static let playButtons = Rswift.ImageResource(bundle: R.hostingBundle, name: "play-buttons")
    /// Image `play`.
    static let play = Rswift.ImageResource(bundle: R.hostingBundle, name: "play")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `portfolio-black-symbol`.
    static let portfolioBlackSymbol = Rswift.ImageResource(bundle: R.hostingBundle, name: "portfolio-black-symbol")
    /// Image `portfolioCase`.
    static let portfolioCase = Rswift.ImageResource(bundle: R.hostingBundle, name: "portfolioCase")
    /// Image `portfolio`.
    static let portfolio = Rswift.ImageResource(bundle: R.hostingBundle, name: "portfolio")
    /// Image `portfolioes`.
    static let portfolioes = Rswift.ImageResource(bundle: R.hostingBundle, name: "portfolioes")
    /// Image `portfolioess`.
    static let portfolioess = Rswift.ImageResource(bundle: R.hostingBundle, name: "portfolioess")
    /// Image `price-tag`.
    static let priceTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "price-tag")
    /// Image `pro`.
    static let pro = Rswift.ImageResource(bundle: R.hostingBundle, name: "pro")
    /// Image `pros`.
    static let pros = Rswift.ImageResource(bundle: R.hostingBundle, name: "pros")
    /// Image `protection`.
    static let protection = Rswift.ImageResource(bundle: R.hostingBundle, name: "protection")
    /// Image `question-mark`.
    static let questionMark = Rswift.ImageResource(bundle: R.hostingBundle, name: "question-mark")
    /// Image `remote`.
    static let remote = Rswift.ImageResource(bundle: R.hostingBundle, name: "remote")
    /// Image `right-arrow`.
    static let rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "right-arrow")
    /// Image `rightGray`.
    static let rightGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "rightGray")
    /// Image `right`.
    static let right = Rswift.ImageResource(bundle: R.hostingBundle, name: "right")
    /// Image `rocket-1`.
    static let rocket1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rocket-1")
    /// Image `rocket`.
    static let rocket = Rswift.ImageResource(bundle: R.hostingBundle, name: "rocket")
    /// Image `rotateCam`.
    static let rotateCam = Rswift.ImageResource(bundle: R.hostingBundle, name: "rotateCam")
    /// Image `roundabout`.
    static let roundabout = Rswift.ImageResource(bundle: R.hostingBundle, name: "roundabout")
    /// Image `sad.gif`.
    static let sadGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "sad.gif")
    /// Image `sad1.gif`.
    static let sad1Gif = Rswift.ImageResource(bundle: R.hostingBundle, name: "sad1.gif")
    /// Image `sad1`.
    static let sad1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sad1")
    /// Image `sad2`.
    static let sad2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sad2")
    /// Image `sadReact`.
    static let sadReact = Rswift.ImageResource(bundle: R.hostingBundle, name: "sadReact")
    /// Image `sad`.
    static let sad = Rswift.ImageResource(bundle: R.hostingBundle, name: "sad")
    /// Image `sale`.
    static let sale = Rswift.ImageResource(bundle: R.hostingBundle, name: "sale")
    /// Image `saved`.
    static let saved = Rswift.ImageResource(bundle: R.hostingBundle, name: "saved")
    /// Image `search-engine`.
    static let searchEngine = Rswift.ImageResource(bundle: R.hostingBundle, name: "search-engine")
    /// Image `searchWhite`.
    static let searchWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "searchWhite")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `send-1`.
    static let send1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "send-1")
    /// Image `send`.
    static let send = Rswift.ImageResource(bundle: R.hostingBundle, name: "send")
    /// Image `sends`.
    static let sends = Rswift.ImageResource(bundle: R.hostingBundle, name: "sends")
    /// Image `shadow`.
    static let shadow = Rswift.ImageResource(bundle: R.hostingBundle, name: "shadow")
    /// Image `shareTemp`.
    static let shareTemp = Rswift.ImageResource(bundle: R.hostingBundle, name: "shareTemp")
    /// Image `shopping-bag`.
    static let shoppingBag = Rswift.ImageResource(bundle: R.hostingBundle, name: "shopping-bag")
    /// Image `show`.
    static let show = Rswift.ImageResource(bundle: R.hostingBundle, name: "show")
    /// Image `shutter-camera`.
    static let shutterCamera = Rswift.ImageResource(bundle: R.hostingBundle, name: "shutter-camera")
    /// Image `shutter`.
    static let shutter = Rswift.ImageResource(bundle: R.hostingBundle, name: "shutter")
    /// Image `skipBackward`.
    static let skipBackward = Rswift.ImageResource(bundle: R.hostingBundle, name: "skipBackward")
    /// Image `skipForward`.
    static let skipForward = Rswift.ImageResource(bundle: R.hostingBundle, name: "skipForward")
    /// Image `small-rocket-ship-silhouette`.
    static let smallRocketShipSilhouette = Rswift.ImageResource(bundle: R.hostingBundle, name: "small-rocket-ship-silhouette")
    /// Image `smartphone`.
    static let smartphone = Rswift.ImageResource(bundle: R.hostingBundle, name: "smartphone")
    /// Image `smile`.
    static let smile = Rswift.ImageResource(bundle: R.hostingBundle, name: "smile")
    /// Image `smileys`.
    static let smileys = Rswift.ImageResource(bundle: R.hostingBundle, name: "smileys")
    /// Image `speech-bubble`.
    static let speechBubble = Rswift.ImageResource(bundle: R.hostingBundle, name: "speech-bubble")
    /// Image `successed`.
    static let successed = Rswift.ImageResource(bundle: R.hostingBundle, name: "successed")
    /// Image `tag`.
    static let tag = Rswift.ImageResource(bundle: R.hostingBundle, name: "tag")
    /// Image `tap`.
    static let tap = Rswift.ImageResource(bundle: R.hostingBundle, name: "tap")
    /// Image `team`.
    static let team = Rswift.ImageResource(bundle: R.hostingBundle, name: "team")
    /// Image `teamwork`.
    static let teamwork = Rswift.ImageResource(bundle: R.hostingBundle, name: "teamwork")
    /// Image `telephone`.
    static let telephone = Rswift.ImageResource(bundle: R.hostingBundle, name: "telephone")
    /// Image `think`.
    static let think = Rswift.ImageResource(bundle: R.hostingBundle, name: "think")
    /// Image `thumbs-up-hand-symbol`.
    static let thumbsUpHandSymbol = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumbs-up-hand-symbol")
    /// Image `tick`.
    static let tick = Rswift.ImageResource(bundle: R.hostingBundle, name: "tick")
    /// Image `tools-cross`.
    static let toolsCross = Rswift.ImageResource(bundle: R.hostingBundle, name: "tools-cross")
    /// Image `transparentBack`.
    static let transparentBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "transparentBack")
    /// Image `trash`.
    static let trash = Rswift.ImageResource(bundle: R.hostingBundle, name: "trash")
    /// Image `trending`.
    static let trending = Rswift.ImageResource(bundle: R.hostingBundle, name: "trending")
    /// Image `twitter`.
    static let twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "twitter")
    /// Image `twoFactor`.
    static let twoFactor = Rswift.ImageResource(bundle: R.hostingBundle, name: "twoFactor")
    /// Image `ubipro`.
    static let ubipro = Rswift.ImageResource(bundle: R.hostingBundle, name: "ubipro")
    /// Image `unlink`.
    static let unlink = Rswift.ImageResource(bundle: R.hostingBundle, name: "unlink")
    /// Image `unlock`.
    static let unlock = Rswift.ImageResource(bundle: R.hostingBundle, name: "unlock")
    /// Image `user1`.
    static let user1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "user1")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")
    /// Image `users`.
    static let users = Rswift.ImageResource(bundle: R.hostingBundle, name: "users")
    /// Image `veirfied`.
    static let veirfied = Rswift.ImageResource(bundle: R.hostingBundle, name: "veirfied")
    /// Image `verified-1`.
    static let verified1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "verified-1")
    /// Image `verified-2`.
    static let verified2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "verified-2")
    /// Image `verified`.
    static let verified = Rswift.ImageResource(bundle: R.hostingBundle, name: "verified")
    /// Image `video-camera`.
    static let videoCamera = Rswift.ImageResource(bundle: R.hostingBundle, name: "video-camera")
    /// Image `view`.
    static let view = Rswift.ImageResource(bundle: R.hostingBundle, name: "view")
    /// Image `vk`.
    static let vk = Rswift.ImageResource(bundle: R.hostingBundle, name: "vk")
    /// Image `wall`.
    static let wall = Rswift.ImageResource(bundle: R.hostingBundle, name: "wall")
    /// Image `white-bullseye`.
    static let whiteBullseye = Rswift.ImageResource(bundle: R.hostingBundle, name: "white-bullseye")
    /// Image `work-done`.
    static let workDone = Rswift.ImageResource(bundle: R.hostingBundle, name: "work-done")
    /// Image `wow.gif`.
    static let wowGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "wow.gif")
    /// Image `wow1.gif`.
    static let wow1Gif = Rswift.ImageResource(bundle: R.hostingBundle, name: "wow1.gif")
    /// Image `wow2`.
    static let wow2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wow2")
    /// Image `wow`.
    static let wow = Rswift.ImageResource(bundle: R.hostingBundle, name: "wow")
    /// Image `youtube`.
    static let youtube = Rswift.ImageResource(bundle: R.hostingBundle, name: "youtube")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ad", bundle: ..., traitCollection: ...)`
    static func ad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AgeCalender", bundle: ..., traitCollection: ...)`
    static func ageCalender(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ageCalender, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Album", bundle: ..., traitCollection: ...)`
    static func album(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.album, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Archery", bundle: ..., traitCollection: ...)`
    static func archery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archery, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Blog-icon", bundle: ..., traitCollection: ...)`
    static func blogIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blogIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Cameras", bundle: ..., traitCollection: ...)`
    static func cameras(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameras, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Cart", bundle: ..., traitCollection: ...)`
    static func cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CategoriesIMg", bundle: ..., traitCollection: ...)`
    static func categoriesIMg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.categoriesIMg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CategoryIcon", bundle: ..., traitCollection: ...)`
    static func categoryIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.categoryIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CategoryImage", bundle: ..., traitCollection: ...)`
    static func categoryImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.categoryImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ChevronRight", bundle: ..., traitCollection: ...)`
    static func chevronRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Coffee", bundle: ..., traitCollection: ...)`
    static func coffee(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coffee, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CopyLink", bundle: ..., traitCollection: ...)`
    static func copyLink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.copyLink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Cover_image", bundle: ..., traitCollection: ...)`
    static func cover_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cover_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditImage", bundle: ..., traitCollection: ...)`
    static func editImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Fillsstar", bundle: ..., traitCollection: ...)`
    static func fillsstar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fillsstar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Gender", bundle: ..., traitCollection: ...)`
    static func gender(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gender, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "General", bundle: ..., traitCollection: ...)`
    static func general(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.general, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group", bundle: ..., traitCollection: ...)`
    static func group(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group-1", bundle: ..., traitCollection: ...)`
    static func group1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GroupIcons-1", bundle: ..., traitCollection: ...)`
    static func groupIcons1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.groupIcons1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GroupMembers", bundle: ..., traitCollection: ...)`
    static func groupMembers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.groupMembers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ic_Post_videoPlay", bundle: ..., traitCollection: ...)`
    static func ic_Post_videoPlay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_Post_videoPlay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Image", bundle: ..., traitCollection: ...)`
    static func image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Infinity", bundle: ..., traitCollection: ...)`
    static func infinity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.infinity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Mappin", bundle: ..., traitCollection: ...)`
    static func mappin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mappin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Movies", bundle: ..., traitCollection: ...)`
    static func movies(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.movies, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Musics", bundle: ..., traitCollection: ...)`
    static func musics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.musics, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NewsFeed", bundle: ..., traitCollection: ...)`
    static func newsFeed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newsFeed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NewsFeed-1", bundle: ..., traitCollection: ...)`
    static func newsFeed1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newsFeed1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NoAlbum", bundle: ..., traitCollection: ...)`
    static func noAlbum(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noAlbum, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NoImage", bundle: ..., traitCollection: ...)`
    static func noImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Options", bundle: ..., traitCollection: ...)`
    static func options(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.options, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Oval", bundle: ..., traitCollection: ...)`
    static func oval(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.oval, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PagePro", bundle: ..., traitCollection: ...)`
    static func pagePro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pagePro, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PagesIcon", bundle: ..., traitCollection: ...)`
    static func pagesIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pagesIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Path 14", bundle: ..., traitCollection: ...)`
    static func path14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.path14, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Plays", bundle: ..., traitCollection: ...)`
    static func plays(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plays, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Profiles", bundle: ..., traitCollection: ...)`
    static func profiles(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profiles, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rating", bundle: ..., traitCollection: ...)`
    static func rating(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rating, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RegisterEmail", bundle: ..., traitCollection: ...)`
    static func registerEmail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.registerEmail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Shape", bundle: ..., traitCollection: ...)`
    static func shape(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shape, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Shape-1", bundle: ..., traitCollection: ...)`
    static func shape1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shape1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Shape-2", bundle: ..., traitCollection: ...)`
    static func shape2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shape2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Shape-3", bundle: ..., traitCollection: ...)`
    static func shape3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shape3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Shape-4", bundle: ..., traitCollection: ...)`
    static func shape4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shape4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Shape-5", bundle: ..., traitCollection: ...)`
    static func shape5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shape5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Sharess", bundle: ..., traitCollection: ...)`
    static func sharess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sharess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "StarGreen", bundle: ..., traitCollection: ...)`
    static func starGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Stars", bundle: ..., traitCollection: ...)`
    static func stars(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stars, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Starts", bundle: ..., traitCollection: ...)`
    static func starts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starts, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Veriified", bundle: ..., traitCollection: ...)`
    static func veriified(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.veriified, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "VideoOff", bundle: ..., traitCollection: ...)`
    static func videoOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.videoOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "VideoOn", bundle: ..., traitCollection: ...)`
    static func videoOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.videoOn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "_Icons - Search", bundle: ..., traitCollection: ...)`
    static func _IconsSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image._IconsSearch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add-button", bundle: ..., traitCollection: ...)`
    static func addButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add-friend", bundle: ..., traitCollection: ...)`
    static func addFriend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addFriend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add-friends", bundle: ..., traitCollection: ...)`
    static func addFriends(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addFriends, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addAlbum", bundle: ..., traitCollection: ...)`
    static func addAlbum(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addAlbum, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addusers", bundle: ..., traitCollection: ...)`
    static func addusers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addusers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "albums", bundle: ..., traitCollection: ...)`
    static func albums(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.albums, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "albums-1", bundle: ..., traitCollection: ...)`
    static func albums1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.albums1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "angry", bundle: ..., traitCollection: ...)`
    static func angry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.angry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "angry.gif", bundle: ..., traitCollection: ...)`
    static func angryGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.angryGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "angry1.gif", bundle: ..., traitCollection: ...)`
    static func angry1Gif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.angry1Gif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "angry2", bundle: ..., traitCollection: ...)`
    static func angry2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.angry2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "angryReact", bundle: ..., traitCollection: ...)`
    static func angryReact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.angryReact, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-pointing", bundle: ..., traitCollection: ...)`
    static func arrowPointing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowPointing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-pointing-to-right", bundle: ..., traitCollection: ...)`
    static func arrowPointingToRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowPointingToRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "at", bundle: ..., traitCollection: ...)`
    static func at(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.at, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar", bundle: ..., traitCollection: ...)`
    static func avatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backh", bundle: ..., traitCollection: ...)`
    static func backh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "badge", bundle: ..., traitCollection: ...)`
    static func badge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "badge-1", bundle: ..., traitCollection: ...)`
    static func badge1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badge1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bags", bundle: ..., traitCollection: ...)`
    static func bags(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bags, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bank", bundle: ..., traitCollection: ...)`
    static func bank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bank, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bell", bundle: ..., traitCollection: ...)`
    static func bell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg2", bundle: ..., traitCollection: ...)`
    static func bg2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg3", bundle: ..., traitCollection: ...)`
    static func bg3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg4", bundle: ..., traitCollection: ...)`
    static func bg4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg5", bundle: ..., traitCollection: ...)`
    static func bg5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg6", bundle: ..., traitCollection: ...)`
    static func bg6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg7", bundle: ..., traitCollection: ...)`
    static func bg7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bill", bundle: ..., traitCollection: ...)`
    static func bill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "birthday-cake", bundle: ..., traitCollection: ...)`
    static func birthdayCake(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.birthdayCake, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "birthday-cake-1", bundle: ..., traitCollection: ...)`
    static func birthdayCake1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.birthdayCake1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "boardImage1", bundle: ..., traitCollection: ...)`
    static func boardImage1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boardImage1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "boardImage2", bundle: ..., traitCollection: ...)`
    static func boardImage2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boardImage2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "boardImage3", bundle: ..., traitCollection: ...)`
    static func boardImage3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boardImage3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "boardImage4", bundle: ..., traitCollection: ...)`
    static func boardImage4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boardImage4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookmark", bundle: ..., traitCollection: ...)`
    static func bookmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "borefire", bundle: ..., traitCollection: ...)`
    static func borefire(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.borefire, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "box", bundle: ..., traitCollection: ...)`
    static func box(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.box, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "briefcase", bundle: ..., traitCollection: ...)`
    static func briefcase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.briefcase, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "business-center", bundle: ..., traitCollection: ...)`
    static func businessCenter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.businessCenter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calendars", bundle: ..., traitCollection: ...)`
    static func calendars(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendars, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calendarss", bundle: ..., traitCollection: ...)`
    static func calendarss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendarss, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camera", bundle: ..., traitCollection: ...)`
    static func camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel", bundle: ..., traitCollection: ...)`
    static func cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cash", bundle: ..., traitCollection: ...)`
    static func cash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chain", bundle: ..., traitCollection: ...)`
    static func chain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chain, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat", bundle: ..., traitCollection: ...)`
    static func chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat-comment", bundle: ..., traitCollection: ...)`
    static func chatComment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatComment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check-box-empty", bundle: ..., traitCollection: ...)`
    static func checkBoxEmpty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkBoxEmpty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check-sign-in-a-square", bundle: ..., traitCollection: ...)`
    static func checkSignInASquare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkSignInASquare, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check-symbol", bundle: ..., traitCollection: ...)`
    static func checkSymbol(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkSymbol, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkess", bundle: ..., traitCollection: ...)`
    static func checkess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkmark", bundle: ..., traitCollection: ...)`
    static func checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chevronBack", bundle: ..., traitCollection: ...)`
    static func chevronBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cinema-clapboard", bundle: ..., traitCollection: ...)`
    static func cinemaClapboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cinemaClapboard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "circular-shape", bundle: ..., traitCollection: ...)`
    static func circularShape(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circularShape, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "circular-shape-silhouettet", bundle: ..., traitCollection: ...)`
    static func circularShapeSilhouettet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circularShapeSilhouettet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clipboard", bundle: ..., traitCollection: ...)`
    static func clipboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clipboard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clipboardes", bundle: ..., traitCollection: ...)`
    static func clipboardes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clipboardes, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clock", bundle: ..., traitCollection: ...)`
    static func clock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clockBlack", bundle: ..., traitCollection: ...)`
    static func clockBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clockBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close-1", bundle: ..., traitCollection: ...)`
    static func close1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "coin", bundle: ..., traitCollection: ...)`
    static func coin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "commentss", bundle: ..., traitCollection: ...)`
    static func commentss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commentss, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "commerce", bundle: ..., traitCollection: ...)`
    static func commerce(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commerce, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "contract", bundle: ..., traitCollection: ...)`
    static func contract(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contract, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "copy", bundle: ..., traitCollection: ...)`
    static func copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.copy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "copyes", bundle: ..., traitCollection: ...)`
    static func copyes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.copyes, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "credit-card", bundle: ..., traitCollection: ...)`
    static func creditCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.creditCard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "credit-card-1", bundle: ..., traitCollection: ...)`
    static func creditCard1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.creditCard1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "credit-cards", bundle: ..., traitCollection: ...)`
    static func creditCards(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.creditCards, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "d-cover", bundle: ..., traitCollection: ...)`
    static func dCover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dCover, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "d-page", bundle: ..., traitCollection: ...)`
    static func dPage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dPage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete", bundle: ..., traitCollection: ...)`
    static func delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "directory", bundle: ..., traitCollection: ...)`
    static func directory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.directory, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "documents", bundle: ..., traitCollection: ...)`
    static func documents(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.documents, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dollar", bundle: ..., traitCollection: ...)`
    static func dollar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dollar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dollar-sign", bundle: ..., traitCollection: ...)`
    static func dollarSign(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dollarSign, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "download", bundle: ..., traitCollection: ...)`
    static func download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.download, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "envelope", bundle: ..., traitCollection: ...)`
    static func envelope(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.envelope, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "exclamation-mark", bundle: ..., traitCollection: ...)`
    static func exclamationMark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exclamationMark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "explorer", bundle: ..., traitCollection: ...)`
    static func explorer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.explorer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eye", bundle: ..., traitCollection: ...)`
    static func eye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyes", bundle: ..., traitCollection: ...)`
    static func eyes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyes, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook", bundle: ..., traitCollection: ...)`
    static func facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook-group", bundle: ..., traitCollection: ...)`
    static func facebookGroup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebookGroup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebookLogo", bundle: ..., traitCollection: ...)`
    static func facebookLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebookLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "file", bundle: ..., traitCollection: ...)`
    static func file(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.file, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter", bundle: ..., traitCollection: ...)`
    static func filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fire", bundle: ..., traitCollection: ...)`
    static func fire(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fire, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fire-1", bundle: ..., traitCollection: ...)`
    static func fire1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fire1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fire-symbol", bundle: ..., traitCollection: ...)`
    static func fireSymbol(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fireSymbol, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flag", bundle: ..., traitCollection: ...)`
    static func flag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flag-icon", bundle: ..., traitCollection: ...)`
    static func flagIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flagIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flages", bundle: ..., traitCollection: ...)`
    static func flages(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flages, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flash", bundle: ..., traitCollection: ...)`
    static func flash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flash-1", bundle: ..., traitCollection: ...)`
    static func flash1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flash1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flash-2", bundle: ..., traitCollection: ...)`
    static func flash2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flash2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "friends", bundle: ..., traitCollection: ...)`
    static func friends(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friends, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "friends-1", bundle: ..., traitCollection: ...)`
    static func friends1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friends1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "game-controller", bundle: ..., traitCollection: ...)`
    static func gameController(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gameController, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "game-controllers", bundle: ..., traitCollection: ...)`
    static func gameControllers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gameControllers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "genderi", bundle: ..., traitCollection: ...)`
    static func genderi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.genderi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goal", bundle: ..., traitCollection: ...)`
    static func goal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "googleLogo", bundle: ..., traitCollection: ...)`
    static func googleLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googleLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gotoNext", bundle: ..., traitCollection: ...)`
    static func gotoNext(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gotoNext, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gps", bundle: ..., traitCollection: ...)`
    static func gps(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gps, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "groupIcons", bundle: ..., traitCollection: ...)`
    static func groupIcons(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.groupIcons, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "groupes", bundle: ..., traitCollection: ...)`
    static func groupes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.groupes, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "groups", bundle: ..., traitCollection: ...)`
    static func groups(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.groups, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "haha", bundle: ..., traitCollection: ...)`
    static func haha(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.haha, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "haha.gif", bundle: ..., traitCollection: ...)`
    static func hahaGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hahaGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "haha1.gif", bundle: ..., traitCollection: ...)`
    static func haha1Gif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.haha1Gif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "haha2", bundle: ..., traitCollection: ...)`
    static func haha2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.haha2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hahaReact", bundle: ..., traitCollection: ...)`
    static func hahaReact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hahaReact, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hahaReact-1", bundle: ..., traitCollection: ...)`
    static func hahaReact1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hahaReact1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart", bundle: ..., traitCollection: ...)`
    static func heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart-1", bundle: ..., traitCollection: ...)`
    static func heart1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hidePass", bundle: ..., traitCollection: ...)`
    static func hidePass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hidePass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "high-school", bundle: ..., traitCollection: ...)`
    static func highSchool(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.highSchool, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home-page", bundle: ..., traitCollection: ...)`
    static func homePage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homePage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home-run", bundle: ..., traitCollection: ...)`
    static func homeRun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeRun, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homeicon", bundle: ..., traitCollection: ...)`
    static func homeicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "human-location", bundle: ..., traitCollection: ...)`
    static func humanLocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.humanLocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_action_arrow_upward", bundle: ..., traitCollection: ...)`
    static func ic_action_arrow_upward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_arrow_upward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_action_comment", bundle: ..., traitCollection: ...)`
    static func ic_action_comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_action_download", bundle: ..., traitCollection: ...)`
    static func ic_action_download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_download, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_action_more", bundle: ..., traitCollection: ...)`
    static func ic_action_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_right", bundle: ..., traitCollection: ...)`
    static func ic_arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_capture_camera", bundle: ..., traitCollection: ...)`
    static func ic_capture_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_capture_camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_chat_violet", bundle: ..., traitCollection: ...)`
    static func ic_chat_violet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chat_violet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_chats", bundle: ..., traitCollection: ...)`
    static func ic_chats(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chats, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_check", bundle: ..., traitCollection: ...)`
    static func ic_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_comments_small", bundle: ..., traitCollection: ...)`
    static func ic_comments_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_comments_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_email", bundle: ..., traitCollection: ...)`
    static func ic_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_email, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_location_place", bundle: ..., traitCollection: ...)`
    static func ic_location_place(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_location_place, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_magnifying_glass", bundle: ..., traitCollection: ...)`
    static func ic_magnifying_glass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_magnifying_glass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_next_small", bundle: ..., traitCollection: ...)`
    static func ic_next_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_next_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_paper_plane", bundle: ..., traitCollection: ...)`
    static func ic_paper_plane(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_paper_plane, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_play", bundle: ..., traitCollection: ...)`
    static func ic_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_post_desert", bundle: ..., traitCollection: ...)`
    static func ic_post_desert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_post_desert, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_post_park", bundle: ..., traitCollection: ...)`
    static func ic_post_park(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_post_park, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_post_sea", bundle: ..., traitCollection: ...)`
    static func ic_post_sea(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_post_sea, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_profile_small", bundle: ..., traitCollection: ...)`
    static func ic_profile_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_profile_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_remove_item", bundle: ..., traitCollection: ...)`
    static func ic_remove_item(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_remove_item, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_rocket", bundle: ..., traitCollection: ...)`
    static func ic_rocket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_rocket, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_smiley", bundle: ..., traitCollection: ...)`
    static func ic_smiley(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_smiley, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_smiley-1", bundle: ..., traitCollection: ...)`
    static func ic_smiley1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_smiley1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_stop", bundle: ..., traitCollection: ...)`
    static func ic_stop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_stop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tooltip_gif", bundle: ..., traitCollection: ...)`
    static func ic_tooltip_gif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tooltip_gif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tooltip_image", bundle: ..., traitCollection: ...)`
    static func ic_tooltip_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tooltip_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tooltip_image-1", bundle: ..., traitCollection: ...)`
    static func ic_tooltip_image1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tooltip_image1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tooltip_video", bundle: ..., traitCollection: ...)`
    static func ic_tooltip_video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tooltip_video, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_uncheck", bundle: ..., traitCollection: ...)`
    static func ic_uncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_uncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "instagram", bundle: ..., traitCollection: ...)`
    static func instagram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.instagram, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "internet", bundle: ..., traitCollection: ...)`
    static func internet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.internet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "inviteUser", bundle: ..., traitCollection: ...)`
    static func inviteUser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.inviteUser, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "jobType", bundle: ..., traitCollection: ...)`
    static func jobType(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jobType, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "label", bundle: ..., traitCollection: ...)`
    static func label(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.label, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "launchScreen", bundle: ..., traitCollection: ...)`
    static func launchScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "left-arrow", bundle: ..., traitCollection: ...)`
    static func leftArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leftArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "levels", bundle: ..., traitCollection: ...)`
    static func levels(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.levels, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like", bundle: ..., traitCollection: ...)`
    static func like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like-1", bundle: ..., traitCollection: ...)`
    static func like1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like-2", bundle: ..., traitCollection: ...)`
    static func like2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like-3", bundle: ..., traitCollection: ...)`
    static func like3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like.gif", bundle: ..., traitCollection: ...)`
    static func likeGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likeGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like1.gif", bundle: ..., traitCollection: ...)`
    static func like1Gif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like1Gif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "likeReact", bundle: ..., traitCollection: ...)`
    static func likeReact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likeReact, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "linkedin", bundle: ..., traitCollection: ...)`
    static func linkedin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.linkedin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location", bundle: ..., traitCollection: ...)`
    static func location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lock", bundle: ..., traitCollection: ...)`
    static func lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loginBackground", bundle: ..., traitCollection: ...)`
    static func loginBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loginImage", bundle: ..., traitCollection: ...)`
    static func loginImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo-1", bundle: ..., traitCollection: ...)`
    static func logo1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "love", bundle: ..., traitCollection: ...)`
    static func love(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.love, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "love.gif", bundle: ..., traitCollection: ...)`
    static func loveGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loveGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "love1", bundle: ..., traitCollection: ...)`
    static func love1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.love1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "love1.gif", bundle: ..., traitCollection: ...)`
    static func love1Gif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.love1Gif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loveReact", bundle: ..., traitCollection: ...)`
    static func loveReact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loveReact, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "magic", bundle: ..., traitCollection: ...)`
    static func magic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.magic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mail", bundle: ..., traitCollection: ...)`
    static func mail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map", bundle: ..., traitCollection: ...)`
    static func map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "maps-and-flags", bundle: ..., traitCollection: ...)`
    static func mapsAndFlags(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapsAndFlags, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "medal", bundle: ..., traitCollection: ...)`
    static func medal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.medal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "megaphone", bundle: ..., traitCollection: ...)`
    static func megaphone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.megaphone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu-1", bundle: ..., traitCollection: ...)`
    static func menu1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu-2", bundle: ..., traitCollection: ...)`
    static func menu2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menues", bundle: ..., traitCollection: ...)`
    static func menues(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menues, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menuicon", bundle: ..., traitCollection: ...)`
    static func menuicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "messageIcon", bundle: ..., traitCollection: ...)`
    static func messageIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messageIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mic", bundle: ..., traitCollection: ...)`
    static func mic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "micOff", bundle: ..., traitCollection: ...)`
    static func micOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.micOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "more", bundle: ..., traitCollection: ...)`
    static func more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "more-1", bundle: ..., traitCollection: ...)`
    static func more1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "morese", bundle: ..., traitCollection: ...)`
    static func morese(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.morese, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "moress", bundle: ..., traitCollection: ...)`
    static func moress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moress, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "movie_video", bundle: ..., traitCollection: ...)`
    static func movie_video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.movie_video, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "multimedia", bundle: ..., traitCollection: ...)`
    static func multimedia(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.multimedia, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "music", bundle: ..., traitCollection: ...)`
    static func music(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.music, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "next", bundle: ..., traitCollection: ...)`
    static func next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.next, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no-avatar", bundle: ..., traitCollection: ...)`
    static func noAvatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noAvatar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "noContent", bundle: ..., traitCollection: ...)`
    static func noContent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noContent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification", bundle: ..., traitCollection: ...)`
    static func notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notificationicon", bundle: ..., traitCollection: ...)`
    static func notificationicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notificationicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nucleus", bundle: ..., traitCollection: ...)`
    static func nucleus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nucleus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "padlock", bundle: ..., traitCollection: ...)`
    static func padlock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.padlock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paid-articles", bundle: ..., traitCollection: ...)`
    static func paidArticles(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paidArticles, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "password", bundle: ..., traitCollection: ...)`
    static func password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.password, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paste", bundle: ..., traitCollection: ...)`
    static func paste(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paste, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pause", bundle: ..., traitCollection: ...)`
    static func pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pause, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pause-button", bundle: ..., traitCollection: ...)`
    static func pauseButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pauseButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pencil", bundle: ..., traitCollection: ...)`
    static func pencil(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pencil, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pencil-black", bundle: ..., traitCollection: ...)`
    static func pencilBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pencilBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "people", bundle: ..., traitCollection: ...)`
    static func people(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.people, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photo", bundle: ..., traitCollection: ...)`
    static func photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photo-camera", bundle: ..., traitCollection: ...)`
    static func photoCamera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoCamera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photo-cameraw", bundle: ..., traitCollection: ...)`
    static func photoCameraw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoCameraw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photo-library", bundle: ..., traitCollection: ...)`
    static func photoLibrary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoLibrary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photos", bundle: ..., traitCollection: ...)`
    static func photos(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photos, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "picture", bundle: ..., traitCollection: ...)`
    static func picture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.picture, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pilcrowIcon", bundle: ..., traitCollection: ...)`
    static func pilcrowIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pilcrowIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pin", bundle: ..., traitCollection: ...)`
    static func pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pin-1", bundle: ..., traitCollection: ...)`
    static func pin1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pin-2", bundle: ..., traitCollection: ...)`
    static func pin2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pins", bundle: ..., traitCollection: ...)`
    static func pins(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pins, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pins(red)", bundle: ..., traitCollection: ...)`
    static func pinsRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinsRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "play", bundle: ..., traitCollection: ...)`
    static func play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "play-button", bundle: ..., traitCollection: ...)`
    static func playButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "play-buttons", bundle: ..., traitCollection: ...)`
    static func playButtons(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playButtons, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "portfolio", bundle: ..., traitCollection: ...)`
    static func portfolio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.portfolio, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "portfolio-black-symbol", bundle: ..., traitCollection: ...)`
    static func portfolioBlackSymbol(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.portfolioBlackSymbol, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "portfolioCase", bundle: ..., traitCollection: ...)`
    static func portfolioCase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.portfolioCase, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "portfolioes", bundle: ..., traitCollection: ...)`
    static func portfolioes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.portfolioes, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "portfolioess", bundle: ..., traitCollection: ...)`
    static func portfolioess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.portfolioess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "price-tag", bundle: ..., traitCollection: ...)`
    static func priceTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.priceTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pro", bundle: ..., traitCollection: ...)`
    static func pro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pro, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pros", bundle: ..., traitCollection: ...)`
    static func pros(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pros, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "protection", bundle: ..., traitCollection: ...)`
    static func protection(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.protection, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "question-mark", bundle: ..., traitCollection: ...)`
    static func questionMark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.questionMark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "remote", bundle: ..., traitCollection: ...)`
    static func remote(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.remote, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "right", bundle: ..., traitCollection: ...)`
    static func right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "right-arrow", bundle: ..., traitCollection: ...)`
    static func rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rightGray", bundle: ..., traitCollection: ...)`
    static func rightGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rocket", bundle: ..., traitCollection: ...)`
    static func rocket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rocket, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rocket-1", bundle: ..., traitCollection: ...)`
    static func rocket1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rocket1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rotateCam", bundle: ..., traitCollection: ...)`
    static func rotateCam(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rotateCam, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "roundabout", bundle: ..., traitCollection: ...)`
    static func roundabout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.roundabout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sad", bundle: ..., traitCollection: ...)`
    static func sad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sad.gif", bundle: ..., traitCollection: ...)`
    static func sadGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sadGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sad1", bundle: ..., traitCollection: ...)`
    static func sad1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sad1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sad1.gif", bundle: ..., traitCollection: ...)`
    static func sad1Gif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sad1Gif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sad2", bundle: ..., traitCollection: ...)`
    static func sad2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sad2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sadReact", bundle: ..., traitCollection: ...)`
    static func sadReact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sadReact, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sale", bundle: ..., traitCollection: ...)`
    static func sale(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sale, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "saved", bundle: ..., traitCollection: ...)`
    static func saved(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.saved, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search-engine", bundle: ..., traitCollection: ...)`
    static func searchEngine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchEngine, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "searchWhite", bundle: ..., traitCollection: ...)`
    static func searchWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "send", bundle: ..., traitCollection: ...)`
    static func send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.send, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "send-1", bundle: ..., traitCollection: ...)`
    static func send1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.send1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sends", bundle: ..., traitCollection: ...)`
    static func sends(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sends, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shadow", bundle: ..., traitCollection: ...)`
    static func shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shareTemp", bundle: ..., traitCollection: ...)`
    static func shareTemp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shareTemp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shopping-bag", bundle: ..., traitCollection: ...)`
    static func shoppingBag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shoppingBag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "show", bundle: ..., traitCollection: ...)`
    static func show(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.show, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shutter", bundle: ..., traitCollection: ...)`
    static func shutter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shutter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shutter-camera", bundle: ..., traitCollection: ...)`
    static func shutterCamera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shutterCamera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "skipBackward", bundle: ..., traitCollection: ...)`
    static func skipBackward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skipBackward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "skipForward", bundle: ..., traitCollection: ...)`
    static func skipForward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skipForward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "small-rocket-ship-silhouette", bundle: ..., traitCollection: ...)`
    static func smallRocketShipSilhouette(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smallRocketShipSilhouette, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smartphone", bundle: ..., traitCollection: ...)`
    static func smartphone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smartphone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smile", bundle: ..., traitCollection: ...)`
    static func smile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smileys", bundle: ..., traitCollection: ...)`
    static func smileys(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smileys, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "speech-bubble", bundle: ..., traitCollection: ...)`
    static func speechBubble(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speechBubble, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "successed", bundle: ..., traitCollection: ...)`
    static func successed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.successed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tag", bundle: ..., traitCollection: ...)`
    static func tag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tap", bundle: ..., traitCollection: ...)`
    static func tap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tap, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "team", bundle: ..., traitCollection: ...)`
    static func team(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.team, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "teamwork", bundle: ..., traitCollection: ...)`
    static func teamwork(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.teamwork, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "telephone", bundle: ..., traitCollection: ...)`
    static func telephone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.telephone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "think", bundle: ..., traitCollection: ...)`
    static func think(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.think, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "thumbs-up-hand-symbol", bundle: ..., traitCollection: ...)`
    static func thumbsUpHandSymbol(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumbsUpHandSymbol, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tick", bundle: ..., traitCollection: ...)`
    static func tick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tools-cross", bundle: ..., traitCollection: ...)`
    static func toolsCross(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolsCross, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "transparentBack", bundle: ..., traitCollection: ...)`
    static func transparentBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transparentBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trash", bundle: ..., traitCollection: ...)`
    static func trash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trending", bundle: ..., traitCollection: ...)`
    static func trending(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trending, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "twitter", bundle: ..., traitCollection: ...)`
    static func twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.twitter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "twoFactor", bundle: ..., traitCollection: ...)`
    static func twoFactor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.twoFactor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ubipro", bundle: ..., traitCollection: ...)`
    static func ubipro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ubipro, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unlink", bundle: ..., traitCollection: ...)`
    static func unlink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unlink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unlock", bundle: ..., traitCollection: ...)`
    static func unlock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unlock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user1", bundle: ..., traitCollection: ...)`
    static func user1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "users", bundle: ..., traitCollection: ...)`
    static func users(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.users, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "veirfied", bundle: ..., traitCollection: ...)`
    static func veirfied(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.veirfied, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "verified", bundle: ..., traitCollection: ...)`
    static func verified(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.verified, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "verified-1", bundle: ..., traitCollection: ...)`
    static func verified1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.verified1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "verified-2", bundle: ..., traitCollection: ...)`
    static func verified2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.verified2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video-camera", bundle: ..., traitCollection: ...)`
    static func videoCamera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.videoCamera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "view", bundle: ..., traitCollection: ...)`
    static func view(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.view, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vk", bundle: ..., traitCollection: ...)`
    static func vk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wall", bundle: ..., traitCollection: ...)`
    static func wall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "white-bullseye", bundle: ..., traitCollection: ...)`
    static func whiteBullseye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whiteBullseye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "work-done", bundle: ..., traitCollection: ...)`
    static func workDone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.workDone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wow", bundle: ..., traitCollection: ...)`
    static func wow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wow.gif", bundle: ..., traitCollection: ...)`
    static func wowGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wowGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wow1.gif", bundle: ..., traitCollection: ...)`
    static func wow1Gif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wow1Gif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wow2", bundle: ..., traitCollection: ...)`
    static func wow2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wow2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "youtube", bundle: ..., traitCollection: ...)`
    static func youtube(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.youtube, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 103 nibs.
  struct nib {
    /// Nib `AboutTableItem`.
    static let aboutTableItem = _R.nib._AboutTableItem()
    /// Nib `ActivitiesCollectionItem`.
    static let activitiesCollectionItem = _R.nib._ActivitiesCollectionItem()
    /// Nib `ActivitiesSectionOneTableitem`.
    static let activitiesSectionOneTableitem = _R.nib._ActivitiesSectionOneTableitem()
    /// Nib `ActivitiesSectionTwoTableItem`.
    static let activitiesSectionTwoTableItem = _R.nib._ActivitiesSectionTwoTableItem()
    /// Nib `ActivitiesThreeTableItem`.
    static let activitiesThreeTableItem = _R.nib._ActivitiesThreeTableItem()
    /// Nib `AddCommentCell`.
    static let addCommentCell = _R.nib._AddCommentCell()
    /// Nib `AddPostCell`.
    static let addPostCell = _R.nib._AddPostCell()
    /// Nib `AddPostSectionFourTableItem`.
    static let addPostSectionFourTableItem = _R.nib._AddPostSectionFourTableItem()
    /// Nib `AddPostSectionOneTableItem`.
    static let addPostSectionOneTableItem = _R.nib._AddPostSectionOneTableItem()
    /// Nib `AddPostSectionThreeCollectionItem`.
    static let addPostSectionThreeCollectionItem = _R.nib._AddPostSectionThreeCollectionItem()
    /// Nib `AddPostSectionThreeTableItem`.
    static let addPostSectionThreeTableItem = _R.nib._AddPostSectionThreeTableItem()
    /// Nib `AddPostSectionTwoCollectionItem`.
    static let addPostSectionTwoCollectionItem = _R.nib._AddPostSectionTwoCollectionItem()
    /// Nib `AddPostSectionTwoTableItem`.
    static let addPostSectionTwoTableItem = _R.nib._AddPostSectionTwoTableItem()
    /// Nib `ArticleDetailCell`.
    static let articleDetailCell = _R.nib._ArticleDetailCell()
    /// Nib `BlockedUsersTableItem`.
    static let blockedUsersTableItem = _R.nib._BlockedUsersTableItem()
    /// Nib `BlogCell`.
    static let blogCell = _R.nib._BlogCell()
    /// Nib `CommentCellTableViewCell`.
    static let commentCellTableViewCell = _R.nib._CommentCellTableViewCell()
    /// Nib `CoverView`.
    static let coverView = _R.nib._CoverView()
    /// Nib `CreateJobCell`.
    static let createJobCell = _R.nib._CreateJobCell()
    /// Nib `CustomFooterView`.
    static let customFooterView = _R.nib._CustomFooterView()
    /// Nib `DetailOfferTableItem`.
    static let detailOfferTableItem = _R.nib._DetailOfferTableItem()
    /// Nib `DonationPostCell`.
    static let donationPostCell = _R.nib._DonationPostCell()
    /// Nib `EventCell`.
    static let eventCell = _R.nib._EventCell()
    /// Nib `EventCollectionCell`.
    static let eventCollectionCell = _R.nib._EventCollectionCell()
    /// Nib `FollowRequestCell`.
    static let followRequestCell = _R.nib._FollowRequestCell()
    /// Nib `ForgetPasswordTableItem`.
    static let forgetPasswordTableItem = _R.nib._ForgetPasswordTableItem()
    /// Nib `FriendRequestCell`.
    static let friendRequestCell = _R.nib._FriendRequestCell()
    /// Nib `FundingDetailsSectionOneTableItem`.
    static let fundingDetailsSectionOneTableItem = _R.nib._FundingDetailsSectionOneTableItem()
    /// Nib `GIFCollectionItem`.
    static let gifCollectionItem = _R.nib._GIFCollectionItem()
    /// Nib `GetFundingTableItem`.
    static let getFundingTableItem = _R.nib._GetFundingTableItem()
    /// Nib `GetOffersTableItem`.
    static let getOffersTableItem = _R.nib._GetOffersTableItem()
    /// Nib `GifImageCell`.
    static let gifImageCell = _R.nib._GifImageCell()
    /// Nib `GroupCategoryCollectionCell`.
    static let groupCategoryCollectionCell = _R.nib._GroupCategoryCollectionCell()
    /// Nib `GroupCategoryTableCell`.
    static let groupCategoryTableCell = _R.nib._GroupCategoryTableCell()
    /// Nib `GroupCell`.
    static let groupCell = _R.nib._GroupCell()
    /// Nib `GroupCoverCell`.
    static let groupCoverCell = _R.nib._GroupCoverCell()
    /// Nib `HelpSupportTableItem`.
    static let helpSupportTableItem = _R.nib._HelpSupportTableItem()
    /// Nib `HomeAddPostCell`.
    static let homeAddPostCell = _R.nib._HomeAddPostCell()
    /// Nib `HomeGreetings`.
    static let homeGreetings = _R.nib._HomeGreetings()
    /// Nib `HomeStroyCells`.
    static let homeStroyCells = _R.nib._HomeStroyCells()
    /// Nib `IntroImageSlider`.
    static let introImageSlider = _R.nib._IntroImageSlider()
    /// Nib `InvitationLinkCell`.
    static let invitationLinkCell = _R.nib._InvitationLinkCell()
    /// Nib `JobAppliesCell`.
    static let jobAppliesCell = _R.nib._JobAppliesCell()
    /// Nib `LikeAndCommentCell`.
    static let likeAndCommentCell = _R.nib._LikeAndCommentCell()
    /// Nib `LikePagesCell`.
    static let likePagesCell = _R.nib._LikePagesCell()
    /// Nib `LiveCommentCell`.
    static let liveCommentCell = _R.nib._LiveCommentCell()
    /// Nib `LoginTableItem`.
    static let loginTableItem = _R.nib._LoginTableItem()
    /// Nib `ManageSessionTableItem`.
    static let manageSessionTableItem = _R.nib._ManageSessionTableItem()
    /// Nib `MentionUserTableItem`.
    static let mentionUserTableItem = _R.nib._MentionUserTableItem()
    /// Nib `MoreItemCell2`.
    static let moreItemCell2 = _R.nib._MoreItemCell2()
    /// Nib `MoreItemCell`.
    static let moreItemCell = _R.nib._MoreItemCell()
    /// Nib `MoviesTableItem`.
    static let moviesTableItem = _R.nib._MoviesTableItem()
    /// Nib `MultiImage2`.
    static let multiImage2 = _R.nib._MultiImage2()
    /// Nib `MultiImage3`.
    static let multiImage3 = _R.nib._MultiImage3()
    /// Nib `MusicCell`.
    static let musicCell = _R.nib._MusicCell()
    /// Nib `MyFollowingCell`.
    static let myFollowingCell = _R.nib._MyFollowingCell()
    /// Nib `MyPointSecionOneTableItem`.
    static let myPointSecionOneTableItem = _R.nib._MyPointSecionOneTableItem()
    /// Nib `MyPointSectionThreeTableItem`.
    static let myPointSectionThreeTableItem = _R.nib._MyPointSectionThreeTableItem()
    /// Nib `MyPointSectionTwoTableItem`.
    static let myPointSectionTwoTableItem = _R.nib._MyPointSectionTwoTableItem()
    /// Nib `MyProfileCell`.
    static let myProfileCell = _R.nib._MyProfileCell()
    /// Nib `NewsFeedCell`.
    static let newsFeedCell = _R.nib._NewsFeedCell()
    /// Nib `NormalPostCell`.
    static let normalPostCell = _R.nib._NormalPostCell()
    /// Nib `NotificationOneTableItem`.
    static let notificationOneTableItem = _R.nib._NotificationOneTableItem()
    /// Nib `NotificationTwoTableItem`.
    static let notificationTwoTableItem = _R.nib._NotificationTwoTableItem()
    /// Nib `NotificationsTableItem`.
    static let notificationsTableItem = _R.nib._NotificationsTableItem()
    /// Nib `PageCoverCell`.
    static let pageCoverCell = _R.nib._PageCoverCell()
    /// Nib `PageReviewCell`.
    static let pageReviewCell = _R.nib._PageReviewCell()
    /// Nib `PhotoAlbum2`.
    static let photoAlbum2 = _R.nib._PhotoAlbum2()
    /// Nib `PhotoAlbum3`.
    static let photoAlbum3 = _R.nib._PhotoAlbum3()
    /// Nib `PhotoAlbumCell`.
    static let photoAlbumCell = _R.nib._PhotoAlbumCell()
    /// Nib `PostJobCell`.
    static let postJobCell = _R.nib._PostJobCell()
    /// Nib `PostLiveCell`.
    static let postLiveCell = _R.nib._PostLiveCell()
    /// Nib `PostOptionCell`.
    static let postOptionCell = _R.nib._PostOptionCell()
    /// Nib `PostPDFCell`.
    static let postPDFCell = _R.nib._PostPDFCell()
    /// Nib `PostShareCell`.
    static let postShareCell = _R.nib._PostShareCell()
    /// Nib `PostWithLinkCell`.
    static let postWithLinkCell = _R.nib._PostWithLinkCell()
    /// Nib `PostYoutubeCell`.
    static let postYoutubeCell = _R.nib._PostYoutubeCell()
    /// Nib `PostwithBg_imageCell`.
    static let postwithBg_imageCell = _R.nib._PostwithBg_imageCell()
    /// Nib `ProductCell`.
    static let productCell = _R.nib._ProductCell()
    /// Nib `ProductDetailCell`.
    static let productDetailCell = _R.nib._ProductDetailCell()
    /// Nib `RegisterStartTableItem`.
    static let registerStartTableItem = _R.nib._RegisterStartTableItem()
    /// Nib `RegisterTableItem`.
    static let registerTableItem = _R.nib._RegisterTableItem()
    /// Nib `SearchPostCell`.
    static let searchPostCell = _R.nib._SearchPostCell()
    /// Nib `SelectAmountTableItem`.
    static let selectAmountTableItem = _R.nib._SelectAmountTableItem()
    /// Nib `SelectFeelingTypeCollectionItem`.
    static let selectFeelingTypeCollectionItem = _R.nib._SelectFeelingTypeCollectionItem()
    /// Nib `SelectPostTypeTableItem`.
    static let selectPostTypeTableItem = _R.nib._SelectPostTypeTableItem()
    /// Nib `SelectUserTableItem`.
    static let selectUserTableItem = _R.nib._SelectUserTableItem()
    /// Nib `SettingsTableItem`.
    static let settingsTableItem = _R.nib._SettingsTableItem()
    /// Nib `SocialLinksTableItem`.
    static let socialLinksTableItem = _R.nib._SocialLinksTableItem()
    /// Nib `SortFilterCell`.
    static let sortFilterCell = _R.nib._SortFilterCell()
    /// Nib `StoryCells`.
    static let storyCells = _R.nib._StoryCells()
    /// Nib `SuggestedGroupCollectionCell`.
    static let suggestedGroupCollectionCell = _R.nib._SuggestedGroupCollectionCell()
    /// Nib `SuggestedGroupTableCell`.
    static let suggestedGroupTableCell = _R.nib._SuggestedGroupTableCell()
    /// Nib `SuggestedUserCollectionCell`.
    static let suggestedUserCollectionCell = _R.nib._SuggestedUserCollectionCell()
    /// Nib `SuggestedUserTableCell`.
    static let suggestedUserTableCell = _R.nib._SuggestedUserTableCell()
    /// Nib `TellFriendTableItem`.
    static let tellFriendTableItem = _R.nib._TellFriendTableItem()
    /// Nib `TrendingCell`.
    static let trendingCell = _R.nib._TrendingCell()
    /// Nib `UserCell`.
    static let userCell = _R.nib._UserCell()
    /// Nib `UserCoverView`.
    static let userCoverView = _R.nib._UserCoverView()
    /// Nib `UserDonationCell`.
    static let userDonationCell = _R.nib._UserDonationCell()
    /// Nib `UserInfoCell`.
    static let userInfoCell = _R.nib._UserInfoCell()
    /// Nib `VideoCell`.
    static let videoCell = _R.nib._VideoCell()
    /// Nib `VoiceCommentCell`.
    static let voiceCommentCell = _R.nib._VoiceCommentCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AboutTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.aboutTableItem) instead")
    static func aboutTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aboutTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ActivitiesCollectionItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.activitiesCollectionItem) instead")
    static func activitiesCollectionItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.activitiesCollectionItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ActivitiesSectionOneTableitem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.activitiesSectionOneTableitem) instead")
    static func activitiesSectionOneTableitem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.activitiesSectionOneTableitem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ActivitiesSectionTwoTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.activitiesSectionTwoTableItem) instead")
    static func activitiesSectionTwoTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.activitiesSectionTwoTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ActivitiesThreeTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.activitiesThreeTableItem) instead")
    static func activitiesThreeTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.activitiesThreeTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddCommentCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addCommentCell) instead")
    static func addCommentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addCommentCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddPostCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addPostCell) instead")
    static func addPostCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addPostCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddPostSectionFourTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addPostSectionFourTableItem) instead")
    static func addPostSectionFourTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addPostSectionFourTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddPostSectionOneTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addPostSectionOneTableItem) instead")
    static func addPostSectionOneTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addPostSectionOneTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddPostSectionThreeCollectionItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addPostSectionThreeCollectionItem) instead")
    static func addPostSectionThreeCollectionItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addPostSectionThreeCollectionItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddPostSectionThreeTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addPostSectionThreeTableItem) instead")
    static func addPostSectionThreeTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addPostSectionThreeTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddPostSectionTwoCollectionItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addPostSectionTwoCollectionItem) instead")
    static func addPostSectionTwoCollectionItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addPostSectionTwoCollectionItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddPostSectionTwoTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addPostSectionTwoTableItem) instead")
    static func addPostSectionTwoTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addPostSectionTwoTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ArticleDetailCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.articleDetailCell) instead")
    static func articleDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.articleDetailCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BlockedUsersTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.blockedUsersTableItem) instead")
    static func blockedUsersTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.blockedUsersTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BlogCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.blogCell) instead")
    static func blogCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.blogCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CommentCellTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.commentCellTableViewCell) instead")
    static func commentCellTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentCellTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CoverView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.coverView) instead")
    static func coverView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.coverView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CreateJobCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.createJobCell) instead")
    static func createJobCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.createJobCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CustomFooterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customFooterView) instead")
    static func customFooterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customFooterView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailOfferTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailOfferTableItem) instead")
    static func detailOfferTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailOfferTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DonationPostCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.donationPostCell) instead")
    static func donationPostCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.donationPostCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EventCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.eventCell) instead")
    static func eventCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eventCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EventCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.eventCollectionCell) instead")
    static func eventCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eventCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FollowRequestCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.followRequestCell) instead")
    static func followRequestCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.followRequestCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ForgetPasswordTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.forgetPasswordTableItem) instead")
    static func forgetPasswordTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.forgetPasswordTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FriendRequestCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.friendRequestCell) instead")
    static func friendRequestCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.friendRequestCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FundingDetailsSectionOneTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.fundingDetailsSectionOneTableItem) instead")
    static func fundingDetailsSectionOneTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fundingDetailsSectionOneTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GIFCollectionItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gifCollectionItem) instead")
    static func gifCollectionItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gifCollectionItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GetFundingTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.getFundingTableItem) instead")
    static func getFundingTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.getFundingTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GetOffersTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.getOffersTableItem) instead")
    static func getOffersTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.getOffersTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GifImageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gifImageCell) instead")
    static func gifImageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gifImageCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GroupCategoryCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.groupCategoryCollectionCell) instead")
    static func groupCategoryCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.groupCategoryCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GroupCategoryTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.groupCategoryTableCell) instead")
    static func groupCategoryTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.groupCategoryTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GroupCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.groupCell) instead")
    static func groupCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.groupCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GroupCoverCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.groupCoverCell) instead")
    static func groupCoverCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.groupCoverCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HelpSupportTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.helpSupportTableItem) instead")
    static func helpSupportTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.helpSupportTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeAddPostCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeAddPostCell) instead")
    static func homeAddPostCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeAddPostCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeGreetings", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeGreetings) instead")
    static func homeGreetings(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeGreetings)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeStroyCells", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeStroyCells) instead")
    static func homeStroyCells(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeStroyCells)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IntroImageSlider", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.introImageSlider) instead")
    static func introImageSlider(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.introImageSlider)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "InvitationLinkCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.invitationLinkCell) instead")
    static func invitationLinkCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.invitationLinkCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JobAppliesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.jobAppliesCell) instead")
    static func jobAppliesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jobAppliesCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LikeAndCommentCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.likeAndCommentCell) instead")
    static func likeAndCommentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.likeAndCommentCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LikePagesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.likePagesCell) instead")
    static func likePagesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.likePagesCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LiveCommentCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.liveCommentCell) instead")
    static func liveCommentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.liveCommentCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoginTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loginTableItem) instead")
    static func loginTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ManageSessionTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.manageSessionTableItem) instead")
    static func manageSessionTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.manageSessionTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MentionUserTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mentionUserTableItem) instead")
    static func mentionUserTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mentionUserTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MoreItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.moreItemCell) instead")
    static func moreItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.moreItemCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MoreItemCell2", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.moreItemCell2) instead")
    static func moreItemCell2(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.moreItemCell2)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MoviesTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.moviesTableItem) instead")
    static func moviesTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.moviesTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MultiImage2", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.multiImage2) instead")
    static func multiImage2(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.multiImage2)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MultiImage3", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.multiImage3) instead")
    static func multiImage3(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.multiImage3)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MusicCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.musicCell) instead")
    static func musicCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.musicCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyFollowingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myFollowingCell) instead")
    static func myFollowingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myFollowingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyPointSecionOneTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myPointSecionOneTableItem) instead")
    static func myPointSecionOneTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myPointSecionOneTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyPointSectionThreeTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myPointSectionThreeTableItem) instead")
    static func myPointSectionThreeTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myPointSectionThreeTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyPointSectionTwoTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myPointSectionTwoTableItem) instead")
    static func myPointSectionTwoTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myPointSectionTwoTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyProfileCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myProfileCell) instead")
    static func myProfileCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myProfileCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NewsFeedCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.newsFeedCell) instead")
    static func newsFeedCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newsFeedCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NormalPostCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.normalPostCell) instead")
    static func normalPostCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.normalPostCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationOneTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationOneTableItem) instead")
    static func notificationOneTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationOneTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationTwoTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationTwoTableItem) instead")
    static func notificationTwoTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationTwoTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationsTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationsTableItem) instead")
    static func notificationsTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationsTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PageCoverCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pageCoverCell) instead")
    static func pageCoverCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pageCoverCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PageReviewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pageReviewCell) instead")
    static func pageReviewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pageReviewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PhotoAlbum2", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.photoAlbum2) instead")
    static func photoAlbum2(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photoAlbum2)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PhotoAlbum3", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.photoAlbum3) instead")
    static func photoAlbum3(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photoAlbum3)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PhotoAlbumCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.photoAlbumCell) instead")
    static func photoAlbumCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photoAlbumCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PostJobCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.postJobCell) instead")
    static func postJobCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postJobCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PostLiveCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.postLiveCell) instead")
    static func postLiveCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postLiveCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PostOptionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.postOptionCell) instead")
    static func postOptionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postOptionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PostPDFCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.postPDFCell) instead")
    static func postPDFCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postPDFCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PostShareCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.postShareCell) instead")
    static func postShareCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postShareCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PostWithLinkCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.postWithLinkCell) instead")
    static func postWithLinkCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postWithLinkCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PostYoutubeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.postYoutubeCell) instead")
    static func postYoutubeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postYoutubeCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PostwithBg_imageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.postwithBg_imageCell) instead")
    static func postwithBg_imageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postwithBg_imageCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productCell) instead")
    static func productCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductDetailCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productDetailCell) instead")
    static func productDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productDetailCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RegisterStartTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.registerStartTableItem) instead")
    static func registerStartTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.registerStartTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RegisterTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.registerTableItem) instead")
    static func registerTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.registerTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchPostCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchPostCell) instead")
    static func searchPostCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchPostCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SelectAmountTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectAmountTableItem) instead")
    static func selectAmountTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectAmountTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SelectFeelingTypeCollectionItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectFeelingTypeCollectionItem) instead")
    static func selectFeelingTypeCollectionItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectFeelingTypeCollectionItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SelectPostTypeTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectPostTypeTableItem) instead")
    static func selectPostTypeTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectPostTypeTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SelectUserTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectUserTableItem) instead")
    static func selectUserTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectUserTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SettingsTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingsTableItem) instead")
    static func settingsTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SocialLinksTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.socialLinksTableItem) instead")
    static func socialLinksTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.socialLinksTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SortFilterCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sortFilterCell) instead")
    static func sortFilterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sortFilterCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StoryCells", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.storyCells) instead")
    static func storyCells(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.storyCells)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SuggestedGroupCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.suggestedGroupCollectionCell) instead")
    static func suggestedGroupCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.suggestedGroupCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SuggestedGroupTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.suggestedGroupTableCell) instead")
    static func suggestedGroupTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.suggestedGroupTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SuggestedUserCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.suggestedUserCollectionCell) instead")
    static func suggestedUserCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.suggestedUserCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SuggestedUserTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.suggestedUserTableCell) instead")
    static func suggestedUserTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.suggestedUserTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TellFriendTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tellFriendTableItem) instead")
    static func tellFriendTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tellFriendTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TrendingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.trendingCell) instead")
    static func trendingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.trendingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userCell) instead")
    static func userCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserCoverView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userCoverView) instead")
    static func userCoverView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userCoverView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserDonationCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userDonationCell) instead")
    static func userDonationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userDonationCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserInfoCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userInfoCell) instead")
    static func userInfoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userInfoCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoCell) instead")
    static func videoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VoiceCommentCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.voiceCommentCell) instead")
    static func voiceCommentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.voiceCommentCell)
    }
    #endif

    static func aboutTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AboutTableItem? {
      return R.nib.aboutTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AboutTableItem
    }

    static func activitiesCollectionItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActivitiesCollectionItem? {
      return R.nib.activitiesCollectionItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActivitiesCollectionItem
    }

    static func activitiesSectionOneTableitem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActivitiesSectionOneTableitem? {
      return R.nib.activitiesSectionOneTableitem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActivitiesSectionOneTableitem
    }

    static func activitiesSectionTwoTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActivitiesSectionTwoTableItem? {
      return R.nib.activitiesSectionTwoTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActivitiesSectionTwoTableItem
    }

    static func activitiesThreeTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActivitiesThreeTableItem? {
      return R.nib.activitiesThreeTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActivitiesThreeTableItem
    }

    static func addCommentCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddCommentCell? {
      return R.nib.addCommentCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddCommentCell
    }

    static func addPostCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddPostCell? {
      return R.nib.addPostCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddPostCell
    }

    static func addPostSectionFourTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddPostSectionFourTableItem? {
      return R.nib.addPostSectionFourTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddPostSectionFourTableItem
    }

    static func addPostSectionOneTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddPostSectionOneTableItem? {
      return R.nib.addPostSectionOneTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddPostSectionOneTableItem
    }

    static func addPostSectionThreeCollectionItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddPostSectionThreeCollectionItem? {
      return R.nib.addPostSectionThreeCollectionItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddPostSectionThreeCollectionItem
    }

    static func addPostSectionThreeTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddPostSectionThreeTableItem? {
      return R.nib.addPostSectionThreeTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddPostSectionThreeTableItem
    }

    static func addPostSectionTwoCollectionItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddPostSectionTwoCollectionItem? {
      return R.nib.addPostSectionTwoCollectionItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddPostSectionTwoCollectionItem
    }

    static func addPostSectionTwoTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddPostSectionTwoTableItem? {
      return R.nib.addPostSectionTwoTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddPostSectionTwoTableItem
    }

    static func articleDetailCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleDetailCell? {
      return R.nib.articleDetailCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleDetailCell
    }

    static func blockedUsersTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlockedUsersTableItem? {
      return R.nib.blockedUsersTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlockedUsersTableItem
    }

    static func blogCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogCell? {
      return R.nib.blogCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogCell
    }

    static func commentCellTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentCellTableViewCell? {
      return R.nib.commentCellTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentCellTableViewCell
    }

    static func coverView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoverView? {
      return R.nib.coverView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoverView
    }

    static func createJobCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CreateJobCell? {
      return R.nib.createJobCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CreateJobCell
    }

    static func customFooterView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomFooterView? {
      return R.nib.customFooterView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomFooterView
    }

    static func detailOfferTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailOfferTableItem? {
      return R.nib.detailOfferTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailOfferTableItem
    }

    static func donationPostCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DonationPostCell? {
      return R.nib.donationPostCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DonationPostCell
    }

    static func eventCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventCell? {
      return R.nib.eventCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventCell
    }

    static func eventCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventCollectionCell? {
      return R.nib.eventCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventCollectionCell
    }

    static func followRequestCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FollowRequestCell? {
      return R.nib.followRequestCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FollowRequestCell
    }

    static func forgetPasswordTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ForgetPasswordTableItem? {
      return R.nib.forgetPasswordTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ForgetPasswordTableItem
    }

    static func friendRequestCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FriendRequestCell? {
      return R.nib.friendRequestCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FriendRequestCell
    }

    static func fundingDetailsSectionOneTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FundingDetailsSectionOneTableItem? {
      return R.nib.fundingDetailsSectionOneTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FundingDetailsSectionOneTableItem
    }

    static func getFundingTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GetFundingTableItem? {
      return R.nib.getFundingTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GetFundingTableItem
    }

    static func getOffersTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GetOffersTableItem? {
      return R.nib.getOffersTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GetOffersTableItem
    }

    static func gifCollectionItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GIFCollectionItem? {
      return R.nib.gifCollectionItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GIFCollectionItem
    }

    static func gifImageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GifImageCell? {
      return R.nib.gifImageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GifImageCell
    }

    static func groupCategoryCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GroupCategoryCollectionCell? {
      return R.nib.groupCategoryCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GroupCategoryCollectionCell
    }

    static func groupCategoryTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GroupCategoryTableCell? {
      return R.nib.groupCategoryTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GroupCategoryTableCell
    }

    static func groupCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GroupCell? {
      return R.nib.groupCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GroupCell
    }

    static func groupCoverCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GroupCoverCell? {
      return R.nib.groupCoverCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GroupCoverCell
    }

    static func helpSupportTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HelpSupportTableItem? {
      return R.nib.helpSupportTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HelpSupportTableItem
    }

    static func homeAddPostCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeAddPostCell? {
      return R.nib.homeAddPostCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeAddPostCell
    }

    static func homeGreetings(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeGreetings? {
      return R.nib.homeGreetings.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeGreetings
    }

    static func homeStroyCells(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeStroyCells? {
      return R.nib.homeStroyCells.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeStroyCells
    }

    static func introImageSlider(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IntroImageSlider? {
      return R.nib.introImageSlider.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IntroImageSlider
    }

    static func invitationLinkCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InvitationLinkCell? {
      return R.nib.invitationLinkCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvitationLinkCell
    }

    static func jobAppliesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobAppliesCell? {
      return R.nib.jobAppliesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobAppliesCell
    }

    static func likeAndCommentCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LikeAndCommentCell? {
      return R.nib.likeAndCommentCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LikeAndCommentCell
    }

    static func likePagesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LikePagesCell? {
      return R.nib.likePagesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LikePagesCell
    }

    static func liveCommentCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LiveCommentCell? {
      return R.nib.liveCommentCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LiveCommentCell
    }

    static func loginTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoginTableItem? {
      return R.nib.loginTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoginTableItem
    }

    static func manageSessionTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ManageSessionTableItem? {
      return R.nib.manageSessionTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ManageSessionTableItem
    }

    static func mentionUserTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MentionUserTableItem? {
      return R.nib.mentionUserTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MentionUserTableItem
    }

    static func moreItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MoreItemCell? {
      return R.nib.moreItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MoreItemCell
    }

    static func moreItemCell2(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MoreItemCell2? {
      return R.nib.moreItemCell2.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MoreItemCell2
    }

    static func moviesTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MoviesTableItem? {
      return R.nib.moviesTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MoviesTableItem
    }

    static func multiImage2(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MultiImage2? {
      return R.nib.multiImage2.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MultiImage2
    }

    static func multiImage3(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MultiImage3? {
      return R.nib.multiImage3.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MultiImage3
    }

    static func musicCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MusicCell? {
      return R.nib.musicCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MusicCell
    }

    static func myFollowingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyFollowing_MyFollowerCell? {
      return R.nib.myFollowingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyFollowing_MyFollowerCell
    }

    static func myPointSecionOneTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPointSecionOneTableItem? {
      return R.nib.myPointSecionOneTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPointSecionOneTableItem
    }

    static func myPointSectionThreeTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPointSectionThreeTableItem? {
      return R.nib.myPointSectionThreeTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPointSectionThreeTableItem
    }

    static func myPointSectionTwoTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPointSectionTwoTableItem? {
      return R.nib.myPointSectionTwoTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPointSectionTwoTableItem
    }

    static func myProfileCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyProfileCell? {
      return R.nib.myProfileCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyProfileCell
    }

    static func newsFeedCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewsFeedCell? {
      return R.nib.newsFeedCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewsFeedCell
    }

    static func normalPostCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NormalPostCell? {
      return R.nib.normalPostCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NormalPostCell
    }

    static func notificationOneTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationOneTableItem? {
      return R.nib.notificationOneTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationOneTableItem
    }

    static func notificationTwoTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationTwoTableItem? {
      return R.nib.notificationTwoTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTwoTableItem
    }

    static func notificationsTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationsTableItem? {
      return R.nib.notificationsTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationsTableItem
    }

    static func pageCoverCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PageCoverCell? {
      return R.nib.pageCoverCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PageCoverCell
    }

    static func pageReviewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PageReviewCell? {
      return R.nib.pageReviewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PageReviewCell
    }

    static func photoAlbum2(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PhotoAlbum2? {
      return R.nib.photoAlbum2.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotoAlbum2
    }

    static func photoAlbum3(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PhotoAlbum3? {
      return R.nib.photoAlbum3.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotoAlbum3
    }

    static func photoAlbumCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PhotoAlbumCell? {
      return R.nib.photoAlbumCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotoAlbumCell
    }

    static func postJobCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostJobCell? {
      return R.nib.postJobCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostJobCell
    }

    static func postLiveCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostLiveCell? {
      return R.nib.postLiveCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostLiveCell
    }

    static func postOptionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostOptionCell? {
      return R.nib.postOptionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostOptionCell
    }

    static func postPDFCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostPDFCell? {
      return R.nib.postPDFCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostPDFCell
    }

    static func postShareCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostShareCell? {
      return R.nib.postShareCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostShareCell
    }

    static func postWithLinkCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostWithLinkCell? {
      return R.nib.postWithLinkCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostWithLinkCell
    }

    static func postYoutubeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostYoutubeCell? {
      return R.nib.postYoutubeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostYoutubeCell
    }

    static func postwithBg_imageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostwithBg_imageCell? {
      return R.nib.postwithBg_imageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostwithBg_imageCell
    }

    static func productCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductCell? {
      return R.nib.productCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductCell
    }

    static func productDetailCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductDetailCell? {
      return R.nib.productDetailCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductDetailCell
    }

    static func registerStartTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RegisterStartTableItem? {
      return R.nib.registerStartTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RegisterStartTableItem
    }

    static func registerTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RegisterTableItem? {
      return R.nib.registerTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RegisterTableItem
    }

    static func searchPostCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchPostCell? {
      return R.nib.searchPostCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchPostCell
    }

    static func selectAmountTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectAmountTableItem? {
      return R.nib.selectAmountTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectAmountTableItem
    }

    static func selectFeelingTypeCollectionItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectFeelingTypeCollectionItem? {
      return R.nib.selectFeelingTypeCollectionItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectFeelingTypeCollectionItem
    }

    static func selectPostTypeTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectPostTypeTableItem? {
      return R.nib.selectPostTypeTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectPostTypeTableItem
    }

    static func selectUserTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectUserTableItem? {
      return R.nib.selectUserTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectUserTableItem
    }

    static func settingsTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsTableItem? {
      return R.nib.settingsTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsTableItem
    }

    static func socialLinksTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SocialLinksTableItem? {
      return R.nib.socialLinksTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SocialLinksTableItem
    }

    static func sortFilterCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SortFilterCell? {
      return R.nib.sortFilterCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SortFilterCell
    }

    static func storyCells(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StoryCells? {
      return R.nib.storyCells.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StoryCells
    }

    static func suggestedGroupCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SuggestedGroupCollectionCell? {
      return R.nib.suggestedGroupCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SuggestedGroupCollectionCell
    }

    static func suggestedGroupTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SuggestedGroupTableCell? {
      return R.nib.suggestedGroupTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SuggestedGroupTableCell
    }

    static func suggestedUserCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SuggestedUserCollectionCell? {
      return R.nib.suggestedUserCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SuggestedUserCollectionCell
    }

    static func suggestedUserTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SuggestedUserTableCell? {
      return R.nib.suggestedUserTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SuggestedUserTableCell
    }

    static func tellFriendTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TellFriendTableItem? {
      return R.nib.tellFriendTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TellFriendTableItem
    }

    static func trendingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TrendingCell? {
      return R.nib.trendingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TrendingCell
    }

    static func userCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserCell? {
      return R.nib.userCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserCell
    }

    static func userCoverView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserCoverView? {
      return R.nib.userCoverView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserCoverView
    }

    static func userDonationCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserDonationCell? {
      return R.nib.userDonationCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserDonationCell
    }

    static func userInfoCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserInfoCell? {
      return R.nib.userInfoCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserInfoCell
    }

    static func videoCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VideoCell? {
      return R.nib.videoCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoCell
    }

    static func voiceCommentCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VoiceCommentCell? {
      return R.nib.voiceCommentCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VoiceCommentCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 140 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AboutTableItem`.
    static let aboutTableItem: Rswift.ReuseIdentifier<AboutTableItem> = Rswift.ReuseIdentifier(identifier: "AboutTableItem")
    /// Reuse identifier `ActivitiesCollectionItem`.
    static let activitiesCollectionItem: Rswift.ReuseIdentifier<ActivitiesCollectionItem> = Rswift.ReuseIdentifier(identifier: "ActivitiesCollectionItem")
    /// Reuse identifier `ActivitiesSectionOneTableitem`.
    static let activitiesSectionOneTableitem: Rswift.ReuseIdentifier<ActivitiesSectionOneTableitem> = Rswift.ReuseIdentifier(identifier: "ActivitiesSectionOneTableitem")
    /// Reuse identifier `ActivitiesSectionTwoTableItem`.
    static let activitiesSectionTwoTableItem: Rswift.ReuseIdentifier<ActivitiesSectionTwoTableItem> = Rswift.ReuseIdentifier(identifier: "ActivitiesSectionTwoTableItem")
    /// Reuse identifier `ActivitiesThreeTableItem`.
    static let activitiesThreeTableItem: Rswift.ReuseIdentifier<ActivitiesThreeTableItem> = Rswift.ReuseIdentifier(identifier: "ActivitiesThreeTableItem")
    /// Reuse identifier `AddBlogComment`.
    static let addBlogComment: Rswift.ReuseIdentifier<AddCommentCell> = Rswift.ReuseIdentifier(identifier: "AddBlogComment")
    /// Reuse identifier `AddImage`.
    static let addImage: Rswift.ReuseIdentifier<AddImageCell> = Rswift.ReuseIdentifier(identifier: "AddImage")
    /// Reuse identifier `AddPostCells`.
    static let addPostCells: Rswift.ReuseIdentifier<AddPostCell> = Rswift.ReuseIdentifier(identifier: "AddPostCells")
    /// Reuse identifier `AddPostSectionFourTableItem`.
    static let addPostSectionFourTableItem: Rswift.ReuseIdentifier<AddPostSectionFourTableItem> = Rswift.ReuseIdentifier(identifier: "AddPostSectionFourTableItem")
    /// Reuse identifier `AddPostSectionOneTableItem`.
    static let addPostSectionOneTableItem: Rswift.ReuseIdentifier<AddPostSectionOneTableItem> = Rswift.ReuseIdentifier(identifier: "AddPostSectionOneTableItem")
    /// Reuse identifier `AddPostSectionThreeCollectionItem`.
    static let addPostSectionThreeCollectionItem: Rswift.ReuseIdentifier<AddPostSectionThreeCollectionItem> = Rswift.ReuseIdentifier(identifier: "AddPostSectionThreeCollectionItem")
    /// Reuse identifier `AddPostSectionThreeTableItem`.
    static let addPostSectionThreeTableItem: Rswift.ReuseIdentifier<AddPostSectionThreeTableItem> = Rswift.ReuseIdentifier(identifier: "AddPostSectionThreeTableItem")
    /// Reuse identifier `AddPostSectionTwoCollectionItem`.
    static let addPostSectionTwoCollectionItem: Rswift.ReuseIdentifier<AddPostSectionTwoCollectionItem> = Rswift.ReuseIdentifier(identifier: "AddPostSectionTwoCollectionItem")
    /// Reuse identifier `AlbumImage`.
    static let albumImage: Rswift.ReuseIdentifier<AlbumImageCell> = Rswift.ReuseIdentifier(identifier: "AlbumImage")
    /// Reuse identifier `AllEventCell`.
    static let allEventCell: Rswift.ReuseIdentifier<GetEventCell> = Rswift.ReuseIdentifier(identifier: "AllEventCell")
    /// Reuse identifier `AppliesCell`.
    static let appliesCell: Rswift.ReuseIdentifier<JobAppliesCell> = Rswift.ReuseIdentifier(identifier: "AppliesCell")
    /// Reuse identifier `ArticleDetails`.
    static let articleDetails: Rswift.ReuseIdentifier<ArticleDetailCell> = Rswift.ReuseIdentifier(identifier: "ArticleDetails")
    /// Reuse identifier `BlockedUsersTableItem`.
    static let blockedUsersTableItem: Rswift.ReuseIdentifier<BlockedUsersTableItem> = Rswift.ReuseIdentifier(identifier: "BlockedUsersTableItem")
    /// Reuse identifier `BlogCell`.
    static let blogCell: Rswift.ReuseIdentifier<BlogCell> = Rswift.ReuseIdentifier(identifier: "BlogCell")
    /// Reuse identifier `BlogComments`.
    static let blogComments: Rswift.ReuseIdentifier<ArticleCommentsCell> = Rswift.ReuseIdentifier(identifier: "BlogComments")
    /// Reuse identifier `Blog`.
    static let blog: Rswift.ReuseIdentifier<ArticleCell> = Rswift.ReuseIdentifier(identifier: "Blog")
    /// Reuse identifier `CollectionCell`.
    static let collectionCell: Rswift.ReuseIdentifier<MyPagesCollectionCell> = Rswift.ReuseIdentifier(identifier: "CollectionCell")
    /// Reuse identifier `CollectionViewCell`.
    static let collectionViewCell: Rswift.ReuseIdentifier<CollectionViewCell> = Rswift.ReuseIdentifier(identifier: "CollectionViewCell")
    /// Reuse identifier `CommentsCell`.
    static let commentsCell: Rswift.ReuseIdentifier<CommentCellTableViewCell> = Rswift.ReuseIdentifier(identifier: "CommentsCell")
    /// Reuse identifier `CommonThingsCollectionCell`.
    static let commonThingsCollectionCell: Rswift.ReuseIdentifier<CommonThingsCollectionCell> = Rswift.ReuseIdentifier(identifier: "CommonThingsCollectionCell")
    /// Reuse identifier `Cover`.
    static let cover: Rswift.ReuseIdentifier<UserCoverView> = Rswift.ReuseIdentifier(identifier: "Cover")
    /// Reuse identifier `CreateJob`.
    static let createJob: Rswift.ReuseIdentifier<CreateJobCell> = Rswift.ReuseIdentifier(identifier: "CreateJob")
    /// Reuse identifier `DetailOfferTableItem`.
    static let detailOfferTableItem: Rswift.ReuseIdentifier<DetailOfferTableItem> = Rswift.ReuseIdentifier(identifier: "DetailOfferTableItem")
    /// Reuse identifier `DonationPost`.
    static let donationPost: Rswift.ReuseIdentifier<DonationPostCell> = Rswift.ReuseIdentifier(identifier: "DonationPost")
    /// Reuse identifier `EventCell`.
    static let eventCell: Rswift.ReuseIdentifier<EventCell> = Rswift.ReuseIdentifier(identifier: "EventCell")
    /// Reuse identifier `EventCollectionCells`.
    static let eventCollectionCells: Rswift.ReuseIdentifier<EventCollectionCell> = Rswift.ReuseIdentifier(identifier: "EventCollectionCells")
    /// Reuse identifier `FindFriendCollectionCell`.
    static let findFriendCollectionCell: Rswift.ReuseIdentifier<FindFriendCollectionCell> = Rswift.ReuseIdentifier(identifier: "FindFriendCollectionCell")
    /// Reuse identifier `FollowerCell`.
    static let followerCell: Rswift.ReuseIdentifier<GetUserFollowers> = Rswift.ReuseIdentifier(identifier: "FollowerCell")
    /// Reuse identifier `ForgetPasswordTableItem`.
    static let forgetPasswordTableItem: Rswift.ReuseIdentifier<ForgetPasswordTableItem> = Rswift.ReuseIdentifier(identifier: "ForgetPasswordTableItem")
    /// Reuse identifier `FriendRequestcell`.
    static let friendRequestcell: Rswift.ReuseIdentifier<FriendRequestCell> = Rswift.ReuseIdentifier(identifier: "FriendRequestcell")
    /// Reuse identifier `FundingDetailsSectionOneTableItem`.
    static let fundingDetailsSectionOneTableItem: Rswift.ReuseIdentifier<FundingDetailsSectionOneTableItem> = Rswift.ReuseIdentifier(identifier: "FundingDetailsSectionOneTableItem")
    /// Reuse identifier `GIFCollectionItem`.
    static let gifCollectionItem: Rswift.ReuseIdentifier<GIFCollectionItem> = Rswift.ReuseIdentifier(identifier: "GIFCollectionItem")
    /// Reuse identifier `GamesCollectionCell`.
    static let gamesCollectionCell: Rswift.ReuseIdentifier<GamesCollectionCell> = Rswift.ReuseIdentifier(identifier: "GamesCollectionCell")
    /// Reuse identifier `GetAlbumImageCell`.
    static let getAlbumImageCell: Rswift.ReuseIdentifier<GetAlbumCell> = Rswift.ReuseIdentifier(identifier: "GetAlbumImageCell")
    /// Reuse identifier `GetFundingTableItem`.
    static let getFundingTableItem: Rswift.ReuseIdentifier<GetFundingTableItem> = Rswift.ReuseIdentifier(identifier: "GetFundingTableItem")
    /// Reuse identifier `GetOffersTableItem`.
    static let getOffersTableItem: Rswift.ReuseIdentifier<GetOffersTableItem> = Rswift.ReuseIdentifier(identifier: "GetOffersTableItem")
    /// Reuse identifier `GetProductcell`.
    static let getProductcell: Rswift.ReuseIdentifier<GetProductCell> = Rswift.ReuseIdentifier(identifier: "GetProductcell")
    /// Reuse identifier `GifCell`.
    static let gifCell: Rswift.ReuseIdentifier<GifImageCell> = Rswift.ReuseIdentifier(identifier: "GifCell")
    /// Reuse identifier `GroupCateCollectionCell`.
    static let groupCateCollectionCell: Rswift.ReuseIdentifier<GroupCategoryCollectionCell> = Rswift.ReuseIdentifier(identifier: "GroupCateCollectionCell")
    /// Reuse identifier `GroupCateTableCell`.
    static let groupCateTableCell: Rswift.ReuseIdentifier<GroupCategoryTableCell> = Rswift.ReuseIdentifier(identifier: "GroupCateTableCell")
    /// Reuse identifier `GroupCell`.
    static let groupCell: Rswift.ReuseIdentifier<GroupCell> = Rswift.ReuseIdentifier(identifier: "GroupCell")
    /// Reuse identifier `GroupCover`.
    static let groupCover: Rswift.ReuseIdentifier<GroupCoverCell> = Rswift.ReuseIdentifier(identifier: "GroupCover")
    /// Reuse identifier `Group`.
    static let group: Rswift.ReuseIdentifier<GetUserGroup> = Rswift.ReuseIdentifier(identifier: "Group")
    /// Reuse identifier `HelpSupportTableItem`.
    static let helpSupportTableItem: Rswift.ReuseIdentifier<HelpSupportTableItem> = Rswift.ReuseIdentifier(identifier: "HelpSupportTableItem")
    /// Reuse identifier `HomeAddPostCell`.
    static let homeAddPostCell: Rswift.ReuseIdentifier<HomeAddPostCell> = Rswift.ReuseIdentifier(identifier: "HomeAddPostCell")
    /// Reuse identifier `HomeGreetings`.
    static let homeGreetings: Rswift.ReuseIdentifier<HomeGreetings> = Rswift.ReuseIdentifier(identifier: "HomeGreetings")
    /// Reuse identifier `HomeStroyCells`.
    static let homeStroyCells: Rswift.ReuseIdentifier<HomeStroyCells> = Rswift.ReuseIdentifier(identifier: "HomeStroyCells")
    /// Reuse identifier `JobVCCollectionCell`.
    static let jobVCCollectionCell: Rswift.ReuseIdentifier<JobVCCollectionCell> = Rswift.ReuseIdentifier(identifier: "JobVCCollectionCell")
    /// Reuse identifier `JoinGroup`.
    static let joinGroup: Rswift.ReuseIdentifier<JoinedGroupCell> = Rswift.ReuseIdentifier(identifier: "JoinGroup")
    /// Reuse identifier `LikeCommentCell`.
    static let likeCommentCell: Rswift.ReuseIdentifier<LikeAndCommentCell> = Rswift.ReuseIdentifier(identifier: "LikeCommentCell")
    /// Reuse identifier `LikePage`.
    static let likePage: Rswift.ReuseIdentifier<LikePagesCell> = Rswift.ReuseIdentifier(identifier: "LikePage")
    /// Reuse identifier `LiveCell`.
    static let liveCell: Rswift.ReuseIdentifier<PostLiveCell> = Rswift.ReuseIdentifier(identifier: "LiveCell")
    /// Reuse identifier `LoginTableItem`.
    static let loginTableItem: Rswift.ReuseIdentifier<LoginTableItem> = Rswift.ReuseIdentifier(identifier: "LoginTableItem")
    /// Reuse identifier `ManageSessionTableItem`.
    static let manageSessionTableItem: Rswift.ReuseIdentifier<ManageSessionTableItem> = Rswift.ReuseIdentifier(identifier: "ManageSessionTableItem")
    /// Reuse identifier `Market&MyProductscell`.
    static let marketMyProductscell: Rswift.ReuseIdentifier<MarketAndMyProductCell> = Rswift.ReuseIdentifier(identifier: "Market&MyProductscell")
    /// Reuse identifier `MemberCell`.
    static let memberCell: Rswift.ReuseIdentifier<GroupMemberCell> = Rswift.ReuseIdentifier(identifier: "MemberCell")
    /// Reuse identifier `MentionUserTableItem`.
    static let mentionUserTableItem: Rswift.ReuseIdentifier<MentionUserTableItem> = Rswift.ReuseIdentifier(identifier: "MentionUserTableItem")
    /// Reuse identifier `MoreImageCells2`.
    static let moreImageCells2: Rswift.ReuseIdentifier<MoreItemCell2> = Rswift.ReuseIdentifier(identifier: "MoreImageCells2")
    /// Reuse identifier `MoreItemCells`.
    static let moreItemCells: Rswift.ReuseIdentifier<MoreItemCell> = Rswift.ReuseIdentifier(identifier: "MoreItemCells")
    /// Reuse identifier `MoviesTableItem`.
    static let moviesTableItem: Rswift.ReuseIdentifier<MoviesTableItem> = Rswift.ReuseIdentifier(identifier: "MoviesTableItem")
    /// Reuse identifier `MultiImage2`.
    static let multiImage2: Rswift.ReuseIdentifier<MultiImage2> = Rswift.ReuseIdentifier(identifier: "MultiImage2")
    /// Reuse identifier `MultiImage3`.
    static let multiImage3: Rswift.ReuseIdentifier<MultiImage3> = Rswift.ReuseIdentifier(identifier: "MultiImage3")
    /// Reuse identifier `MyEventCell`.
    static let myEventCell: Rswift.ReuseIdentifier<GetEventCell> = Rswift.ReuseIdentifier(identifier: "MyEventCell")
    /// Reuse identifier `MyFollower&FollowingCell`.
    static let myFollowerFollowingCell: Rswift.ReuseIdentifier<MyFollowing_MyFollowerCell> = Rswift.ReuseIdentifier(identifier: "MyFollower&FollowingCell")
    /// Reuse identifier `MyGroup`.
    static let myGroup: Rswift.ReuseIdentifier<GetUserGroup> = Rswift.ReuseIdentifier(identifier: "MyGroup")
    /// Reuse identifier `MyPages`.
    static let myPages: Rswift.ReuseIdentifier<MyPagesCell> = Rswift.ReuseIdentifier(identifier: "MyPages")
    /// Reuse identifier `MyPointSecionOneTableItem`.
    static let myPointSecionOneTableItem: Rswift.ReuseIdentifier<MyPointSecionOneTableItem> = Rswift.ReuseIdentifier(identifier: "MyPointSecionOneTableItem")
    /// Reuse identifier `MyPointSectionThreeTableItem`.
    static let myPointSectionThreeTableItem: Rswift.ReuseIdentifier<MyPointSectionThreeTableItem> = Rswift.ReuseIdentifier(identifier: "MyPointSectionThreeTableItem")
    /// Reuse identifier `MyPointSectionTwoTableItem`.
    static let myPointSectionTwoTableItem: Rswift.ReuseIdentifier<MyPointSectionTwoTableItem> = Rswift.ReuseIdentifier(identifier: "MyPointSectionTwoTableItem")
    /// Reuse identifier `MyProfile`.
    static let myProfile: Rswift.ReuseIdentifier<MyProfileCell> = Rswift.ReuseIdentifier(identifier: "MyProfile")
    /// Reuse identifier `MyVideosCell`.
    static let myVideosCell: Rswift.ReuseIdentifier<MyVideosCell> = Rswift.ReuseIdentifier(identifier: "MyVideosCell")
    /// Reuse identifier `NearByCollectionCell`.
    static let nearByCollectionCell: Rswift.ReuseIdentifier<NearByCollectionCell> = Rswift.ReuseIdentifier(identifier: "NearByCollectionCell")
    /// Reuse identifier `NewsFeedCell`.
    static let newsFeedCell: Rswift.ReuseIdentifier<NewsFeedCell> = Rswift.ReuseIdentifier(identifier: "NewsFeedCell")
    /// Reuse identifier `NormalPostCell`.
    static let normalPostCell: Rswift.ReuseIdentifier<NormalPostCell> = Rswift.ReuseIdentifier(identifier: "NormalPostCell")
    /// Reuse identifier `NotificationOneTableItem`.
    static let notificationOneTableItem: Rswift.ReuseIdentifier<NotificationOneTableItem> = Rswift.ReuseIdentifier(identifier: "NotificationOneTableItem")
    /// Reuse identifier `NotificationTwoTableItem`.
    static let notificationTwoTableItem: Rswift.ReuseIdentifier<NotificationTwoTableItem> = Rswift.ReuseIdentifier(identifier: "NotificationTwoTableItem")
    /// Reuse identifier `NotificationsTableItem`.
    static let notificationsTableItem: Rswift.ReuseIdentifier<NotificationsTableItem> = Rswift.ReuseIdentifier(identifier: "NotificationsTableItem")
    /// Reuse identifier `OtherCell`.
    static let otherCell: Rswift.ReuseIdentifier<OtherCell> = Rswift.ReuseIdentifier(identifier: "OtherCell")
    /// Reuse identifier `PageCell`.
    static let pageCell: Rswift.ReuseIdentifier<GetUserLikePages> = Rswift.ReuseIdentifier(identifier: "PageCell")
    /// Reuse identifier `PageCover`.
    static let pageCover: Rswift.ReuseIdentifier<PageCoverCell> = Rswift.ReuseIdentifier(identifier: "PageCover")
    /// Reuse identifier `PhotoAlbum2`.
    static let photoAlbum2: Rswift.ReuseIdentifier<PhotoAlbum2> = Rswift.ReuseIdentifier(identifier: "PhotoAlbum2")
    /// Reuse identifier `PhotoAlbum3`.
    static let photoAlbum3: Rswift.ReuseIdentifier<PhotoAlbum3> = Rswift.ReuseIdentifier(identifier: "PhotoAlbum3")
    /// Reuse identifier `PhotoAlbumCell`.
    static let photoAlbumCell: Rswift.ReuseIdentifier<PhotoAlbumCell> = Rswift.ReuseIdentifier(identifier: "PhotoAlbumCell")
    /// Reuse identifier `PostLinkCell`.
    static let postLinkCell: Rswift.ReuseIdentifier<PostWithLinkCell> = Rswift.ReuseIdentifier(identifier: "PostLinkCell")
    /// Reuse identifier `PostOptions`.
    static let postOptions: Rswift.ReuseIdentifier<PostOptionCell> = Rswift.ReuseIdentifier(identifier: "PostOptions")
    /// Reuse identifier `PostPDFCell`.
    static let postPDFCell: Rswift.ReuseIdentifier<PostPDFCell> = Rswift.ReuseIdentifier(identifier: "PostPDFCell")
    /// Reuse identifier `PostReactioncell`.
    static let postReactioncell: Rswift.ReuseIdentifier<ReactionCells> = Rswift.ReuseIdentifier(identifier: "PostReactioncell")
    /// Reuse identifier `PostShare`.
    static let postShare: Rswift.ReuseIdentifier<PostShareCell> = Rswift.ReuseIdentifier(identifier: "PostShare")
    /// Reuse identifier `PostStatusCell`.
    static let postStatusCell: Rswift.ReuseIdentifier<PostStatusCell> = Rswift.ReuseIdentifier(identifier: "PostStatusCell")
    /// Reuse identifier `PostStatus`.
    static let postStatus: Rswift.ReuseIdentifier<PostStatusCell> = Rswift.ReuseIdentifier(identifier: "PostStatus")
    /// Reuse identifier `PostYoutube`.
    static let postYoutube: Rswift.ReuseIdentifier<PostYoutubeCell> = Rswift.ReuseIdentifier(identifier: "PostYoutube")
    /// Reuse identifier `Postreactioncell`.
    static let postreactioncell: Rswift.ReuseIdentifier<PostReactionCell> = Rswift.ReuseIdentifier(identifier: "Postreactioncell")
    /// Reuse identifier `ProductCell`.
    static let productCell: Rswift.ReuseIdentifier<ProductCell> = Rswift.ReuseIdentifier(identifier: "ProductCell")
    /// Reuse identifier `Productcategory`.
    static let productcategory: Rswift.ReuseIdentifier<ProductCategoryCell> = Rswift.ReuseIdentifier(identifier: "Productcategory")
    /// Reuse identifier `ProfileCell`.
    static let profileCell: Rswift.ReuseIdentifier<GetUserPofile> = Rswift.ReuseIdentifier(identifier: "ProfileCell")
    /// Reuse identifier `RefreshFooterView`.
    static let refreshFooterView: Rswift.ReuseIdentifier<CustomFooterView> = Rswift.ReuseIdentifier(identifier: "RefreshFooterView")
    /// Reuse identifier `RegisterStartTableItem`.
    static let registerStartTableItem: Rswift.ReuseIdentifier<RegisterStartTableItem> = Rswift.ReuseIdentifier(identifier: "RegisterStartTableItem")
    /// Reuse identifier `RegisterTableItem`.
    static let registerTableItem: Rswift.ReuseIdentifier<RegisterTableItem> = Rswift.ReuseIdentifier(identifier: "RegisterTableItem")
    /// Reuse identifier `RequestCell`.
    static let requestCell: Rswift.ReuseIdentifier<FollowRequestCell> = Rswift.ReuseIdentifier(identifier: "RequestCell")
    /// Reuse identifier `ReviewCell`.
    static let reviewCell: Rswift.ReuseIdentifier<PageReviewCell> = Rswift.ReuseIdentifier(identifier: "ReviewCell")
    /// Reuse identifier `SearchCell`.
    static let searchCell: Rswift.ReuseIdentifier<SearchPostCell> = Rswift.ReuseIdentifier(identifier: "SearchCell")
    /// Reuse identifier `SelectAmountTableItem`.
    static let selectAmountTableItem: Rswift.ReuseIdentifier<SelectAmountTableItem> = Rswift.ReuseIdentifier(identifier: "SelectAmountTableItem")
    /// Reuse identifier `SelectFeelingTypeCollectionItem`.
    static let selectFeelingTypeCollectionItem: Rswift.ReuseIdentifier<SelectFeelingTypeCollectionItem> = Rswift.ReuseIdentifier(identifier: "SelectFeelingTypeCollectionItem")
    /// Reuse identifier `SelectPostTypeTableItem`.
    static let selectPostTypeTableItem: Rswift.ReuseIdentifier<SelectPostTypeTableItem> = Rswift.ReuseIdentifier(identifier: "SelectPostTypeTableItem")
    /// Reuse identifier `SelectUserTableItem`.
    static let selectUserTableItem: Rswift.ReuseIdentifier<SelectUserTableItem> = Rswift.ReuseIdentifier(identifier: "SelectUserTableItem")
    /// Reuse identifier `SettingsTableItem`.
    static let settingsTableItem: Rswift.ReuseIdentifier<SettingsTableItem> = Rswift.ReuseIdentifier(identifier: "SettingsTableItem")
    /// Reuse identifier `SocialLinksTableItem`.
    static let socialLinksTableItem: Rswift.ReuseIdentifier<SocialLinksTableItem> = Rswift.ReuseIdentifier(identifier: "SocialLinksTableItem")
    /// Reuse identifier `SortCell`.
    static let sortCell: Rswift.ReuseIdentifier<SortFilterCell> = Rswift.ReuseIdentifier(identifier: "SortCell")
    /// Reuse identifier `StroiesCell`.
    static let stroiesCell: Rswift.ReuseIdentifier<StoriesCell> = Rswift.ReuseIdentifier(identifier: "StroiesCell")
    /// Reuse identifier `TellFriendTableItem`.
    static let tellFriendTableItem: Rswift.ReuseIdentifier<TellFriendTableItem> = Rswift.ReuseIdentifier(identifier: "TellFriendTableItem")
    /// Reuse identifier `USerInfoCells`.
    static let uSerInfoCells: Rswift.ReuseIdentifier<UserInfoCell> = Rswift.ReuseIdentifier(identifier: "USerInfoCells")
    /// Reuse identifier `UpgradeUser`.
    static let upgradeUser: Rswift.ReuseIdentifier<UpgradeUserCell> = Rswift.ReuseIdentifier(identifier: "UpgradeUser")
    /// Reuse identifier `UserContactcell`.
    static let userContactcell: Rswift.ReuseIdentifier<UserContactCell> = Rswift.ReuseIdentifier(identifier: "UserContactcell")
    /// Reuse identifier `UserDonationCells`.
    static let userDonationCells: Rswift.ReuseIdentifier<UserDonationCell> = Rswift.ReuseIdentifier(identifier: "UserDonationCells")
    /// Reuse identifier `cell`.
    static let cell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "cell")
    /// Reuse identifier `followerImage`.
    static let followerImage: Rswift.ReuseIdentifier<GetUserFollowerImageCell> = Rswift.ReuseIdentifier(identifier: "followerImage")
    /// Reuse identifier `groupImage`.
    static let groupImage: Rswift.ReuseIdentifier<UserGroupImageCell> = Rswift.ReuseIdentifier(identifier: "groupImage")
    /// Reuse identifier `hashTagCell`.
    static let hashTagCell: Rswift.ReuseIdentifier<SearchHastTagCell> = Rswift.ReuseIdentifier(identifier: "hashTagCell")
    /// Reuse identifier `imageCell`.
    static let imageCell: Rswift.ReuseIdentifier<MyImagesCell> = Rswift.ReuseIdentifier(identifier: "imageCell")
    /// Reuse identifier `images`.
    static let images: Rswift.ReuseIdentifier<ImagesCell> = Rswift.ReuseIdentifier(identifier: "images")
    /// Reuse identifier `invitationCell`.
    static let invitationCell: Rswift.ReuseIdentifier<InvitationLinkCell> = Rswift.ReuseIdentifier(identifier: "invitationCell")
    /// Reuse identifier `inviteFriend`.
    static let inviteFriend: Rswift.ReuseIdentifier<InviteFriendCell> = Rswift.ReuseIdentifier(identifier: "inviteFriend")
    /// Reuse identifier `liveCommentsCell`.
    static let liveCommentsCell: Rswift.ReuseIdentifier<LiveCommentCell> = Rswift.ReuseIdentifier(identifier: "liveCommentsCell")
    /// Reuse identifier `musicCell`.
    static let musicCell: Rswift.ReuseIdentifier<MusicCell> = Rswift.ReuseIdentifier(identifier: "musicCell")
    /// Reuse identifier `pokeCell`.
    static let pokeCell: Rswift.ReuseIdentifier<PokeCell> = Rswift.ReuseIdentifier(identifier: "pokeCell")
    /// Reuse identifier `postWithBg_image`.
    static let postWithBg_image: Rswift.ReuseIdentifier<PostwithBg_imageCell> = Rswift.ReuseIdentifier(identifier: "postWithBg_image")
    /// Reuse identifier `productDetailCell`.
    static let productDetailCell: Rswift.ReuseIdentifier<ProductDetailCell> = Rswift.ReuseIdentifier(identifier: "productDetailCell")
    /// Reuse identifier `productsCommentsCell`.
    static let productsCommentsCell: Rswift.ReuseIdentifier<ProductCommentsCell> = Rswift.ReuseIdentifier(identifier: "productsCommentsCell")
    /// Reuse identifier `profileImageCell`.
    static let profileImageCell: Rswift.ReuseIdentifier<UserProfileImageCell> = Rswift.ReuseIdentifier(identifier: "profileImageCell")
    /// Reuse identifier `sharePost`.
    static let sharePost: Rswift.ReuseIdentifier<SharePostCell> = Rswift.ReuseIdentifier(identifier: "sharePost")
    /// Reuse identifier `suggestedCollectionCell`.
    static let suggestedCollectionCell: Rswift.ReuseIdentifier<SuggestedGroupCollectionCell> = Rswift.ReuseIdentifier(identifier: "suggestedCollectionCell")
    /// Reuse identifier `suggestedTableCell`.
    static let suggestedTableCell: Rswift.ReuseIdentifier<SuggestedGroupTableCell> = Rswift.ReuseIdentifier(identifier: "suggestedTableCell")
    /// Reuse identifier `suggestedUserCollectionCell`.
    static let suggestedUserCollectionCell: Rswift.ReuseIdentifier<SuggestedUserCollectionCell> = Rswift.ReuseIdentifier(identifier: "suggestedUserCollectionCell")
    /// Reuse identifier `suggestedUserTableCell`.
    static let suggestedUserTableCell: Rswift.ReuseIdentifier<SuggestedUserTableCell> = Rswift.ReuseIdentifier(identifier: "suggestedUserTableCell")
    /// Reuse identifier `trendingCell`.
    static let trendingCell: Rswift.ReuseIdentifier<TrendingCell> = Rswift.ReuseIdentifier(identifier: "trendingCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 682 localization keys.
    struct localizable {
      /// en translation: #Wallet
      ///
      /// Locales: en, tr
      static let wallet = Rswift.StringResource(key: "#Wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: A confirmation email has been sent
      ///
      /// Locales: en, tr
      static let aConfirmationEmailHasBeenSent = Rswift.StringResource(key: "A confirmation email has been sent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: ABOUT
      ///
      /// Locales: en, tr
      static let abouT = Rswift.StringResource(key: "ABOUT", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: ALL EVENTS
      ///
      /// Locales: en, tr
      static let alleventS = Rswift.StringResource(key: "ALL EVENTS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: APPLY FILTER
      ///
      /// Locales: en, tr
      static let applyfilteR = Rswift.StringResource(key: "APPLY FILTER", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: About
      ///
      /// Locales: en, tr
      static let about = Rswift.StringResource(key: "About", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: About Group
      ///
      /// Locales: en, tr
      static let aboutGroup = Rswift.StringResource(key: "About Group", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: About Page
      ///
      /// Locales: en, tr
      static let aboutPage = Rswift.StringResource(key: "About Page", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: About Us
      ///
      /// Locales: en, tr
      static let aboutUs = Rswift.StringResource(key: "About Us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: About me
      ///
      /// Locales: en, tr
      static let aboutMe = Rswift.StringResource(key: "About me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Action Buttons
      ///
      /// Locales: en, tr
      static let actionButtons = Rswift.StringResource(key: "Action Buttons", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Actions Buttons
      ///
      /// Locales: en, tr
      static let actionsButtons = Rswift.StringResource(key: "Actions Buttons", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Activites
      ///
      /// Locales: en, tr
      static let activites = Rswift.StringResource(key: "Activites", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Activities
      ///
      /// Locales: en, tr
      static let activities = Rswift.StringResource(key: "Activities", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Add
      ///
      /// Locales: en, tr
      static let add = Rswift.StringResource(key: "Add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Add Friend
      ///
      /// Locales: en, tr
      static let addFriend = Rswift.StringResource(key: "AddFriend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Add Participants
      ///
      /// Locales: en, tr
      static let addParticipants = Rswift.StringResource(key: "Add Participants", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Add Post
      ///
      /// Locales: en, tr
      static let addPost = Rswift.StringResource(key: "Add Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Add To
      ///
      /// Locales: en, tr
      static let addTo = Rswift.StringResource(key: "Add To", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Add a comment here
      ///
      /// Locales: en, tr
      static let addACommentHere = Rswift.StringResource(key: "Add a comment here", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Add code number
      ///
      /// Locales: en, tr
      static let addCodeNumber = Rswift.StringResource(key: "Add code number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Add new Story
      ///
      /// Locales: en, tr
      static let addNewStory = Rswift.StringResource(key: "Add new Story", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Add to Playlist
      ///
      /// Locales: en, tr
      static let addToPlaylist = Rswift.StringResource(key: "Add to Playlist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Add to Watch Later
      ///
      /// Locales: en, tr
      static let addToWatchLater = Rswift.StringResource(key: "Add to Watch Later", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: AddFunds
      ///
      /// Locales: en, tr
      static let addFunds = Rswift.StringResource(key: "AddFunds", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Added to watch later
      ///
      /// Locales: en, tr
      static let addedToWatchLater = Rswift.StringResource(key: "Added to watch later", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Admin & Office
      ///
      /// Locales: en, tr
      static let adminOffice = Rswift.StringResource(key: "Admin & Office", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Affliates
      ///
      /// Locales: en, tr
      static let affliates = Rswift.StringResource(key: "Affliates", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Age
      ///
      /// Locales: en, tr
      static let age = Rswift.StringResource(key: "Age", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Album Created SuccessFully
      ///
      /// Locales: en, tr
      static let albumCreatedSuccessFully = Rswift.StringResource(key: "Album Created SuccessFully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Album Name
      ///
      /// Locales: en, tr
      static let albumName = Rswift.StringResource(key: "Album Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Albums
      ///
      /// Locales: en, tr
      static let albums = Rswift.StringResource(key: "Albums", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: All
      ///
      /// Locales: en, tr
      static let all = Rswift.StringResource(key: "All", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: All Time
      ///
      /// Locales: en, tr
      static let allTime = Rswift.StringResource(key: "All Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Allow Microphone Access to record audio?
      ///
      /// Locales: en, tr
      static let allowMicrophoneAccessToRecordAudio = Rswift.StringResource(key: "Allow Microphone Access to record audio?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Already added in watch later
      ///
      /// Locales: en, tr
      static let alreadyAddedInWatchLater = Rswift.StringResource(key: "Already added in watch later", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Already have an Account ?
      ///
      /// Locales: en, tr
      static let alreadyHaveAnAccount = Rswift.StringResource(key: "Already have an Account ?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Amount
      ///
      /// Locales: en, tr
      static let amount = Rswift.StringResource(key: "Amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Amount shouldn't be less than 50.
      ///
      /// Locales: en, tr
      static let amountShouldnTBeLessThan50 = Rswift.StringResource(key: "Amount shouldn't be less than 50.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Angry
      ///
      /// Locales: en, tr
      static let angry = Rswift.StringResource(key: "Angry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Answer
      ///
      /// Locales: en
      static let answer = Rswift.StringResource(key: "Answer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Apply Filter
      ///
      /// Locales: en, tr
      static let applyFilter = Rswift.StringResource(key: "Apply Filter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Are you sure want to delete group please check
      ///
      /// Locales: en, tr
      static let areYouSureWantToDeleteGroupPleaseCheck = Rswift.StringResource(key: "Are you sure want to delete group please check", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Are you sure you want to delete Account?
      ///
      /// Locales: en, tr
      static let areYouSureYouWantToDeleteAccount = Rswift.StringResource(key: "Are you sure you want to delete Account?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Are you sure you want to delete the account ?
      ///
      /// Locales: en
      static let areYouSureYouWantToDeleteTheAccount = Rswift.StringResource(key: "Are you sure you want to delete the account ?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Are you sure you want to logout
      ///
      /// Locales: en, tr
      static let areYouSureYouWantToLogout = Rswift.StringResource(key: "Are you sure you want to logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Art & Design
      ///
      /// Locales: en, tr
      static let artDesign = Rswift.StringResource(key: "Art & Design", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Autos & Vehicles
      ///
      /// Locales: en, tr
      static let autosVehicles = Rswift.StringResource(key: "Autos & Vehicles", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Avatar
      ///
      /// Locales: en, tr
      static let avatar = Rswift.StringResource(key: "Avatar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Avatar&Cover
      ///
      /// Locales: en, tr
      static let avatarCover = Rswift.StringResource(key: "Avatar&Cover", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Baby & Children's Products
      ///
      /// Locales: en, tr
      static let babyChildrenSProducts = Rswift.StringResource(key: "Baby & Children's Products", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Bank Transfer
      ///
      /// Locales: en, tr
      static let bankTransfer = Rswift.StringResource(key: "Bank Transfer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Beauty Products & Services
      ///
      /// Locales: en, tr
      static let beautyProductsServices = Rswift.StringResource(key: "Beauty Products & Services", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Birthday
      ///
      /// Locales: en, tr
      static let birthday = Rswift.StringResource(key: "Birthday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Block
      ///
      /// Locales: en, tr
      static let block = Rswift.StringResource(key: "Block", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Block Member
      ///
      /// Locales: en, tr
      static let blockMember = Rswift.StringResource(key: "Block Member", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Blocked Users
      ///
      /// Locales: en, tr
      static let blockedUsers = Rswift.StringResource(key: "Blocked Users", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Blogs
      ///
      /// Locales: en, tr
      static let blogs = Rswift.StringResource(key: "Blogs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Boost Post
      ///
      /// Locales: en, tr
      static let boostPost = Rswift.StringResource(key: "Boost Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Boost up to 20 Pages
      ///
      /// Locales: en, tr
      static let boostUpTo20Pages = Rswift.StringResource(key: "Boost up to 20 Pages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Boost up to 5 Pages
      ///
      /// Locales: en, tr
      static let boostUpTo5Pages = Rswift.StringResource(key: "Boost up to 5 Pages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Boost up to 60 Pages
      ///
      /// Locales: en, tr
      static let boostUpTo60Pages = Rswift.StringResource(key: "Boost up to 60 Pages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Boost upto 20 posts
      ///
      /// Locales: en, tr
      static let boostUpto20Posts = Rswift.StringResource(key: "Boost upto 20 posts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Boost upto 5 posts
      ///
      /// Locales: en, tr
      static let boostUpto5Posts = Rswift.StringResource(key: "Boost upto 5 posts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Boost upto 60 posts
      ///
      /// Locales: en, tr
      static let boostUpto60Posts = Rswift.StringResource(key: "Boost upto 60 posts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Boosts Page
      ///
      /// Locales: en, tr
      static let boostsPage = Rswift.StringResource(key: "Boosts Page", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Business Operations
      ///
      /// Locales: en, tr
      static let businessOperations = Rswift.StringResource(key: "Business Operations", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Buy
      ///
      /// Locales: en, tr
      static let buy = Rswift.StringResource(key: "Buy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: CANCEL
      ///
      /// Locales: en, tr
      static let canceL = Rswift.StringResource(key: "CANCEL", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: COMMENTS
      ///
      /// Locales: en
      static let commentS = Rswift.StringResource(key: "COMMENTS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: CONTINUE
      ///
      /// Locales: en, tr
      static let continuE = Rswift.StringResource(key: "CONTINUE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Cache Removed
      ///
      /// Locales: en, tr
      static let cacheRemoved = Rswift.StringResource(key: "Cache Removed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Call to action
      ///
      /// Locales: en, tr
      static let callToAction = Rswift.StringResource(key: "Call to action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Call to target url
      ///
      /// Locales: en, tr
      static let callToTargetUrl = Rswift.StringResource(key: "Call to target url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Calling
      ///
      /// Locales: en
      static let calling = Rswift.StringResource(key: "Calling", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Camera
      ///
      /// Locales: en, tr
      static let camera = Rswift.StringResource(key: "Camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, tr
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Cars and Vehicles
      ///
      /// Locales: en, tr
      static let carsAndVehicles = Rswift.StringResource(key: "Cars and Vehicles", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Categories
      ///
      /// Locales: en, tr
      static let categories = Rswift.StringResource(key: "Categories", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Category
      ///
      /// Locales: en, tr
      static let category = Rswift.StringResource(key: "Category", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Change Image
      ///
      /// Locales: en, tr
      static let changeImage = Rswift.StringResource(key: "Change Image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Change Location
      ///
      /// Locales: en, tr
      static let changeLocation = Rswift.StringResource(key: "Change Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: en, tr
      static let changePassword = Rswift.StringResource(key: "Change Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Change image avatar
      ///
      /// Locales: en, tr
      static let changeImageAvatar = Rswift.StringResource(key: "Change image avatar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Change image cover
      ///
      /// Locales: en, tr
      static let changeImageCover = Rswift.StringResource(key: "Change image cover", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Change your Password
      ///
      /// Locales: en, tr
      static let changeYourPassword = Rswift.StringResource(key: "Change your Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Cleaning & Facilities
      ///
      /// Locales: en, tr
      static let cleaningFacilities = Rswift.StringResource(key: "Cleaning & Facilities", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: en, tr
      static let close = Rswift.StringResource(key: "Close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Comedy
      ///
      /// Locales: en, tr
      static let comedy = Rswift.StringResource(key: "Comedy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Comment
      ///
      /// Locales: en, tr
      static let comment = Rswift.StringResource(key: "Comment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Comments
      ///
      /// Locales: en, tr
      static let comments = Rswift.StringResource(key: "Comments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Comments are disabled by
      ///
      /// Locales: en, tr
      static let commentsAreDisabledBy = Rswift.StringResource(key: "Comments are disabled by", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Common Things
      ///
      /// Locales: en, tr
      static let commonThings = Rswift.StringResource(key: "Common Things", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Community & Social Services
      ///
      /// Locales: en, tr
      static let communitySocialServices = Rswift.StringResource(key: "Community & Social Services", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Company
      ///
      /// Locales: en, tr
      static let company = Rswift.StringResource(key: "Company", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Computer & Data
      ///
      /// Locales: en, tr
      static let computerData = Rswift.StringResource(key: "Computer & Data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Computers & Peripherals
      ///
      /// Locales: en, tr
      static let computersPeripherals = Rswift.StringResource(key: "Computers & Peripherals", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, tr
      static let confirm = Rswift.StringResource(key: "Confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Confirm Password
      ///
      /// Locales: en, tr
      static let confirmPassword = Rswift.StringResource(key: "Confirm Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Confirm Request
      ///
      /// Locales: en, tr
      static let confirmRequest = Rswift.StringResource(key: "Confirm Request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Confirm when someone joining this group ?
      ///
      /// Locales: en, tr
      static let confirmWhenSomeoneJoiningThisGroup = Rswift.StringResource(key: "Confirm when someone joining this group ?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Confirmation Code
      ///
      /// Locales: en, tr
      static let confirmationCode = Rswift.StringResource(key: "Confirmation Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Construction & Mining
      ///
      /// Locales: en, tr
      static let constructionMining = Rswift.StringResource(key: "Construction & Mining", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Consumer Electronics
      ///
      /// Locales: en, tr
      static let consumerElectronics = Rswift.StringResource(key: "Consumer Electronics", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Contact
      ///
      /// Locales: en, tr
      static let contact = Rswift.StringResource(key: "Contact", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Continue with Facebook
      ///
      /// Locales: en, tr
      static let continueWithFacebook = Rswift.StringResource(key: "Continue with Facebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Conversation Tones
      ///
      /// Locales: en, tr
      static let conversationTones = Rswift.StringResource(key: "Conversation Tones", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Copied
      ///
      /// Locales: en, tr
      static let copied = Rswift.StringResource(key: "Copied", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Copy
      ///
      /// Locales: en, tr
      static let copy = Rswift.StringResource(key: "Copy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Copy Link
      ///
      /// Locales: en, tr
      static let copyLink = Rswift.StringResource(key: "Copy Link", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Copy Link to profile
      ///
      /// Locales: en, tr
      static let copyLinkToProfile = Rswift.StringResource(key: "Copy Link to profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Copy Text
      ///
      /// Locales: en, tr
      static let copyText = Rswift.StringResource(key: "Copy Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Copy to clipboard
      ///
      /// Locales: en, tr
      static let copyToClipboard = Rswift.StringResource(key: "Copy to clipboard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Cover
      ///
      /// Locales: en, tr
      static let cover = Rswift.StringResource(key: "Cover", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Create
      ///
      /// Locales: en, tr
      static let create = Rswift.StringResource(key: "Create", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Create Account Sign Up
      ///
      /// Locales: en, tr
      static let createAccountSignUp = Rswift.StringResource(key: "Create Account Sign Up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Create Event
      ///
      /// Locales: en, tr
      static let createEvent = Rswift.StringResource(key: "Create Event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Create Live Video
      ///
      /// Locales: en, tr
      static let createLiveVideo = Rswift.StringResource(key: "Create Live Video", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Create New Group
      ///
      /// Locales: en, tr
      static let createNewGroup = Rswift.StringResource(key: "Create New Group", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Create New Page
      ///
      /// Locales: en, tr
      static let createNewPage = Rswift.StringResource(key: "Create New Page", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Create New Product
      ///
      /// Locales: en, tr
      static let createNewProduct = Rswift.StringResource(key: "Create New Product", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Create Playlist
      ///
      /// Locales: en, tr
      static let createPlaylist = Rswift.StringResource(key: "Create Playlist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Create a Job
      ///
      /// Locales: en, tr
      static let createAJob = Rswift.StringResource(key: "Create a Job", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Currency
      ///
      /// Locales: en, tr
      static let currency = Rswift.StringResource(key: "Currency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Current Balance
      ///
      /// Locales: en, tr
      static let currentBalance = Rswift.StringResource(key: "Current Balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Current Password
      ///
      /// Locales: en, tr
      static let currentPassword = Rswift.StringResource(key: "Current Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: DONATE
      ///
      /// Locales: en, tr
      static let donatE = Rswift.StringResource(key: "DONATE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Dark mode
      ///
      /// Locales: en, tr
      static let darkMode = Rswift.StringResource(key: "Dark mode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Date
      ///
      /// Locales: en, tr
      static let date = Rswift.StringResource(key: "Date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Dating Services
      ///
      /// Locales: en, tr
      static let datingServices = Rswift.StringResource(key: "Dating Services", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Decline
      ///
      /// Locales: en
      static let decline = Rswift.StringResource(key: "Decline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en, tr
      static let delete = Rswift.StringResource(key: "Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Delete Account
      ///
      /// Locales: en, tr
      static let deleteAccount = Rswift.StringResource(key: "Delete Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Delete Group
      ///
      /// Locales: en, tr
      static let deleteGroup = Rswift.StringResource(key: "Delete Group", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Delete Post
      ///
      /// Locales: en, tr
      static let deletePost = Rswift.StringResource(key: "Delete Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Delete a Page
      ///
      /// Locales: en, tr
      static let deleteAPage = Rswift.StringResource(key: "Delete a Page", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Describe Your Group
      ///
      /// Locales: en, tr
      static let describeYourGroup = Rswift.StringResource(key: "Describe Your Group", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Describe Your Page
      ///
      /// Locales: en, tr
      static let describeYourPage = Rswift.StringResource(key: "Describe Your Page", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Description
      ///
      /// Locales: en, tr
      static let description = Rswift.StringResource(key: "Description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Dicover more features with Playtube Pro Package
      ///
      /// Locales: en, tr
      static let dicoverMoreFeaturesWithPlaytubeProPackage = Rswift.StringResource(key: "Dicover more features with Playtube Pro Package", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Disable
      ///
      /// Locales: en, tr
      static let disable = Rswift.StringResource(key: "Disable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Disable Comments
      ///
      /// Locales: en, tr
      static let disableComments = Rswift.StringResource(key: "Disable Comments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Discount
      ///
      /// Locales: en, tr
      static let discount = Rswift.StringResource(key: "Discount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Discover
      ///
      /// Locales: en, tr
      static let discover = Rswift.StringResource(key: "Discover", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Disliked
      ///
      /// Locales: en, tr
      static let disliked = Rswift.StringResource(key: "Disliked", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Don't have access to use your microphone.
      ///
      /// Locales: en, tr
      static let donTHaveAccessToUseYourMicrophone = Rswift.StringResource(key: "Don't have access to use your microphone.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Don't worry type your email here and we will recover it for you
      ///
      /// Locales: en, tr
      static let donTWorryTypeYourEmailHereAndWeWillRecoverItForYou = Rswift.StringResource(key: "Don't worry type your email here and we will recover it for you", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, tr
      static let done = Rswift.StringResource(key: "Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Downloads
      ///
      /// Locales: en, tr
      static let downloads = Rswift.StringResource(key: "Downloads", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Earn 10 by commenting any post
      ///
      /// Locales: en, tr
      static let earn10ByCommentingAnyPost = Rswift.StringResource(key: "Earn 10 by commenting any post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Earn 15 by creating a new blog
      ///
      /// Locales: en, tr
      static let earn15ByCreatingANewBlog = Rswift.StringResource(key: "Earn 15 by creating a new blog", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Earn 20 by creating new post
      ///
      /// Locales: en, tr
      static let earn20ByCreatingNewPost = Rswift.StringResource(key: "Earn 20 by creating new post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Earn 5 by reacting on any post
      ///
      /// Locales: en, tr
      static let earn5ByReactingOnAnyPost = Rswift.StringResource(key: "Earn 5 by reacting on any post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Earn up to 10$ for each user you refer to us!
      ///
      /// Locales: en, tr
      static let earnUpTo10ForEachUserYouReferToUs = Rswift.StringResource(key: "Earn up to 10$ for each user you refer to us!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Earnings
      ///
      /// Locales: en, tr
      static let earnings = Rswift.StringResource(key: "Earnings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Economics & Trade
      ///
      /// Locales: en, tr
      static let economicsTrade = Rswift.StringResource(key: "Economics & Trade", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Economics and Trade
      ///
      /// Locales: en, tr
      static let economicsAndTrade = Rswift.StringResource(key: "Economics and Trade", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: en, tr
      static let edit = Rswift.StringResource(key: "Edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Edit Event
      ///
      /// Locales: en, tr
      static let editEvent = Rswift.StringResource(key: "Edit Event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Edit Post
      ///
      /// Locales: en, tr
      static let editPost = Rswift.StringResource(key: "Edit Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Edit Profile
      ///
      /// Locales: en, tr
      static let editProfile = Rswift.StringResource(key: "Edit Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Education
      ///
      /// Locales: en, tr
      static let education = Rswift.StringResource(key: "Education", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, tr
      static let email = Rswift.StringResource(key: "Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Email or Username
      ///
      /// Locales: en, tr
      static let emailOrUsername = Rswift.StringResource(key: "Email or Username", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enable
      ///
      /// Locales: en, tr
      static let enable = Rswift.StringResource(key: "Enable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enable Comments
      ///
      /// Locales: en, tr
      static let enableComments = Rswift.StringResource(key: "Enable Comments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enabled
      ///
      /// Locales: en, tr
      static let enabled = Rswift.StringResource(key: "Enabled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: End Date
      ///
      /// Locales: en, tr
      static let endDate = Rswift.StringResource(key: "End Date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Engaged
      ///
      /// Locales: en, tr
      static let engaged = Rswift.StringResource(key: "Engaged", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Album-Name
      ///
      /// Locales: en, tr
      static let enterAlbumName = Rswift.StringResource(key: "Enter Album-Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Amount
      ///
      /// Locales: en, tr
      static let enterAmount = Rswift.StringResource(key: "Enter Amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter BusinessName
      ///
      /// Locales: en, tr
      static let enterBusinessName = Rswift.StringResource(key: "Enter BusinessName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Category
      ///
      /// Locales: en, tr
      static let enterCategory = Rswift.StringResource(key: "Enter Category", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Category name
      ///
      /// Locales: en, tr
      static let enterCategoryName = Rswift.StringResource(key: "Enter Category name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Email
      ///
      /// Locales: en, tr
      static let enterEmail = Rswift.StringResource(key: "Enter Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Event Description
      ///
      /// Locales: en, tr
      static let enterEventDescription = Rswift.StringResource(key: "Enter Event Description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Event EndDate
      ///
      /// Locales: en, tr
      static let enterEventEndDate = Rswift.StringResource(key: "Enter Event EndDate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Event EndTime
      ///
      /// Locales: en, tr
      static let enterEventEndTime = Rswift.StringResource(key: "Enter Event EndTime", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Event Location
      ///
      /// Locales: en, tr
      static let enterEventLocation = Rswift.StringResource(key: "Enter Event Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Event Name
      ///
      /// Locales: en, tr
      static let enterEventName = Rswift.StringResource(key: "Enter Event Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Event StartDate
      ///
      /// Locales: en, tr
      static let enterEventStartDate = Rswift.StringResource(key: "Enter Event StartDate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Event StartTime
      ///
      /// Locales: en, tr
      static let enterEventStartTime = Rswift.StringResource(key: "Enter Event StartTime", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Group About
      ///
      /// Locales: en, tr
      static let enterGroupAbout = Rswift.StringResource(key: "Enter Group About", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Group Name
      ///
      /// Locales: en, tr
      static let enterGroupName = Rswift.StringResource(key: "Enter Group Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Group Url
      ///
      /// Locales: en, tr
      static let enterGroupUrl = Rswift.StringResource(key: "Enter Group Url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter License name
      ///
      /// Locales: en, tr
      static let enterLicenseName = Rswift.StringResource(key: "Enter License name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Name
      ///
      /// Locales: en, tr
      static let enterName = Rswift.StringResource(key: "Enter Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Page About
      ///
      /// Locales: en, tr
      static let enterPageAbout = Rswift.StringResource(key: "Enter Page About", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Page Title
      ///
      /// Locales: en, tr
      static let enterPageTitle = Rswift.StringResource(key: "Enter Page Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Page Url
      ///
      /// Locales: en, tr
      static let enterPageUrl = Rswift.StringResource(key: "Enter Page Url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter PhoneNumber
      ///
      /// Locales: en, tr
      static let enterPhoneNumber = Rswift.StringResource(key: "Enter PhoneNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Price
      ///
      /// Locales: en, tr
      static let enterPrice = Rswift.StringResource(key: "Enter Price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Stream name
      ///
      /// Locales: en, tr
      static let enterStreamName = Rswift.StringResource(key: "Enter Stream name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Tag
      ///
      /// Locales: en, tr
      static let enterTag = Rswift.StringResource(key: "Enter Tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Title
      ///
      /// Locales: en, tr
      static let enterTitle = Rswift.StringResource(key: "Enter Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Website
      ///
      /// Locales: en, tr
      static let enterWebsite = Rswift.StringResource(key: "Enter Website", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter message
      ///
      /// Locales: en, tr
      static let enterMessage = Rswift.StringResource(key: "Enter message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter password
      ///
      /// Locales: en, tr
      static let enterPassword = Rswift.StringResource(key: "Enter password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter your Email
      ///
      /// Locales: en
      static let enterYourEmail = Rswift.StringResource(key: "Enter your Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Enter your Password
      ///
      /// Locales: en
      static let enterYourPassword = Rswift.StringResource(key: "Enter your Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Entertainment
      ///
      /// Locales: en, tr
      static let entertainment = Rswift.StringResource(key: "Entertainment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Error, Please select gender
      ///
      /// Locales: en, tr
      static let errorPleaseSelectGender = Rswift.StringResource(key: "Error, Please select gender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Error, Required ConfirmPassword
      ///
      /// Locales: en, tr
      static let errorRequiredConfirmPassword = Rswift.StringResource(key: "Error, Required ConfirmPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Error, Required Email
      ///
      /// Locales: en, tr
      static let errorRequiredEmail = Rswift.StringResource(key: "Error, Required Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Error, Required FirstName
      ///
      /// Locales: en, tr
      static let errorRequiredFirstName = Rswift.StringResource(key: "Error, Required FirstName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Error, Required LastName
      ///
      /// Locales: en, tr
      static let errorRequiredLastName = Rswift.StringResource(key: "Error, Required LastName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Error, Required Password
      ///
      /// Locales: en, tr
      static let errorRequiredPassword = Rswift.StringResource(key: "Error, Required Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Error, Required Username
      ///
      /// Locales: en, tr
      static let errorRequiredUsername = Rswift.StringResource(key: "Error, Required Username", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Event Name
      ///
      /// Locales: en, tr
      static let eventName = Rswift.StringResource(key: "Event Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Events
      ///
      /// Locales: en, tr
      static let events = Rswift.StringResource(key: "Events", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Everyone
      ///
      /// Locales: en, tr
      static let everyone = Rswift.StringResource(key: "Everyone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Exit Group
      ///
      /// Locales: en, tr
      static let exitGroup = Rswift.StringResource(key: "Exit Group", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Explore Articles
      ///
      /// Locales: en, tr
      static let exploreArticles = Rswift.StringResource(key: "Explore Articles", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Explore Groups
      ///
      /// Locales: en, tr
      static let exploreGroups = Rswift.StringResource(key: "Explore Groups", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Explore Pages
      ///
      /// Locales: en, tr
      static let explorePages = Rswift.StringResource(key: "Explore Pages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: FEMALE
      ///
      /// Locales: en, tr
      static let famalE = Rswift.StringResource(key: "FAMALE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Facebook
      ///
      /// Locales: en, tr
      static let facebook = Rswift.StringResource(key: "Facebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Farming & Forestry
      ///
      /// Locales: en, tr
      static let farmingForestry = Rswift.StringResource(key: "Farming & Forestry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Fast so we can take you to our space
      ///
      /// Locales: en, tr
      static let fastSoWeCanTakeYouToOurSpace = Rswift.StringResource(key: "Fast so we can take you to our space", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Featured member
      ///
      /// Locales: en, tr
      static let featuredMember = Rswift.StringResource(key: "Featured member", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Feeling/Activity
      ///
      /// Locales: en, tr
      static let feelingActivity = Rswift.StringResource(key: "Feeling/Activity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Female
      ///
      /// Locales: en, tr
      static let female = Rswift.StringResource(key: "Female", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: File
      ///
      /// Locales: en, tr
      static let file = Rswift.StringResource(key: "File", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Filter
      ///
      /// Locales: en, tr
      static let filter = Rswift.StringResource(key: "Filter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Financial Services
      ///
      /// Locales: en, tr
      static let financialServices = Rswift.StringResource(key: "Financial Services", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Find Friends
      ///
      /// Locales: en, tr
      static let findFriends = Rswift.StringResource(key: "Find Friends", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Find a group by browsing top groups
      ///
      /// Locales: en, tr
      static let findAGroupByBrowsingTopGroups = Rswift.StringResource(key: "Find a group by browsing top groups", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Find all invite request
      ///
      /// Locales: en, tr
      static let findAllInviteRequest = Rswift.StringResource(key: "Find all invite request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Find new friends and contacts
      ///
      /// Locales: en, tr
      static let findNewFriendsAndContacts = Rswift.StringResource(key: "Find new friends and contacts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: en, tr
      static let firstName = Rswift.StringResource(key: "First Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Follow Privacy
      ///
      /// Locales: en, tr
      static let followPrivacy = Rswift.StringResource(key: "Follow Privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Follow Request
      ///
      /// Locales: en, tr
      static let followRequest = Rswift.StringResource(key: "Follow Request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Follow Requests
      ///
      /// Locales: en, tr
      static let followRequests = Rswift.StringResource(key: "Follow Requests", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Followers
      ///
      /// Locales: en, tr
      static let followers = Rswift.StringResource(key: "Followers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Forget your Password
      ///
      /// Locales: en, tr
      static let forgetYourPassword = Rswift.StringResource(key: "Forget your Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Forgot Password?
      ///
      /// Locales: en
      static let forgotPassword = Rswift.StringResource(key: "Forgot Password?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Friends Privacy
      ///
      /// Locales: en, tr
      static let friendsPrivacy = Rswift.StringResource(key: "Friends Privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: From Date
      ///
      /// Locales: en, tr
      static let fromDate = Rswift.StringResource(key: "From Date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Funding
      ///
      /// Locales: en, tr
      static let funding = Rswift.StringResource(key: "Funding", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Fundings
      ///
      /// Locales: en, tr
      static let fundings = Rswift.StringResource(key: "Fundings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: GAMES
      ///
      /// Locales: en, tr
      static let gameS = Rswift.StringResource(key: "GAMES", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: GIF
      ///
      /// Locales: en, tr
      static let giF = Rswift.StringResource(key: "GIF", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: GROUPS
      ///
      /// Locales: en, tr
      static let groupS = Rswift.StringResource(key: "GROUPS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Games
      ///
      /// Locales: en, tr
      static let games = Rswift.StringResource(key: "Games", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Gaming
      ///
      /// Locales: en, tr
      static let gaming = Rswift.StringResource(key: "Gaming", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Gender
      ///
      /// Locales: en, tr
      static let gender = Rswift.StringResource(key: "Gender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: General
      ///
      /// Locales: en, tr
      static let general = Rswift.StringResource(key: "General", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: General Account
      ///
      /// Locales: en, tr
      static let generalAccount = Rswift.StringResource(key: "General Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Get articles by categories
      ///
      /// Locales: en, tr
      static let getArticlesByCategories = Rswift.StringResource(key: "Get articles by categories", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Get the conversation started by leaving the first comment
      ///
      /// Locales: en, tr
      static let getTheConversationStartedByLeavingTheFirstComment = Rswift.StringResource(key: "Get the conversation started by leaving the first comment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Gifts & Occasions
      ///
      /// Locales: en, tr
      static let giftsOccasions = Rswift.StringResource(key: "Gifts & Occasions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Go
      ///
      /// Locales: en, tr
      static let go = Rswift.StringResource(key: "Go", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Go Live
      ///
      /// Locales: en, tr
      static let goLive = Rswift.StringResource(key: "Go Live", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Go to Settings
      ///
      /// Locales: en, tr
      static let goToSettings = Rswift.StringResource(key: "Go to Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: GoPro
      ///
      /// Locales: en, tr
      static let goPro = Rswift.StringResource(key: "GoPro", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Going
      ///
      /// Locales: en, tr
      static let going = Rswift.StringResource(key: "Going", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Going People
      ///
      /// Locales: en, tr
      static let goingPeople = Rswift.StringResource(key: "Going People", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Group Members
      ///
      /// Locales: en, tr
      static let groupMembers = Rswift.StringResource(key: "Group Members", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Group Name
      ///
      /// Locales: en, tr
      static let groupName = Rswift.StringResource(key: "Group Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Group Request
      ///
      /// Locales: en, tr
      static let groupRequest = Rswift.StringResource(key: "Group Request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Group Title
      ///
      /// Locales: en, tr
      static let groupTitle = Rswift.StringResource(key: "Group Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Group URL
      ///
      /// Locales: en, tr
      static let groupURL = Rswift.StringResource(key: "Group URL", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Group Username
      ///
      /// Locales: en, tr
      static let groupUsername = Rswift.StringResource(key: "Group Username", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Groups
      ///
      /// Locales: en, tr
      static let groups = Rswift.StringResource(key: "Groups", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Haha
      ///
      /// Locales: en, tr
      static let haha = Rswift.StringResource(key: "Haha", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Hang Up
      ///
      /// Locales: en
      static let hangUp = Rswift.StringResource(key: "Hang Up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Healthcare
      ///
      /// Locales: en, tr
      static let healthcare = Rswift.StringResource(key: "Healthcare", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Help
      ///
      /// Locales: en, tr
      static let help = Rswift.StringResource(key: "Help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Help & Support
      ///
      /// Locales: en, tr
      static let helpSupport = Rswift.StringResource(key: "Help & Support", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Help Center
      ///
      /// Locales: en, tr
      static let helpCenter = Rswift.StringResource(key: "Help Center", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Help and Report Center
      ///
      /// Locales: en, tr
      static let helpAndReportCenter = Rswift.StringResource(key: "Help and Report Center", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Help and Support
      ///
      /// Locales: en, tr
      static let helpAndSupport = Rswift.StringResource(key: "Help and Support", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Hi! there i am using WoWonder Messenger
      ///
      /// Locales: en, tr
      static let hiThereIAmUsingWoWonderMessenger = Rswift.StringResource(key: "Hi! there i am using WoWonder Messenger", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: History and Facts
      ///
      /// Locales: en, tr
      static let historyAndFacts = Rswift.StringResource(key: "History and Facts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Home & Garden
      ///
      /// Locales: en, tr
      static let homeGarden = Rswift.StringResource(key: "Home & Garden", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: I Agree to
      ///
      /// Locales: en, tr
      static let iAgreeTo = Rswift.StringResource(key: "I Agree to", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: If  you forgot your password, you can reset it from here.
      ///
      /// Locales: en, tr
      static let ifYouForgotYourPasswordYouCanResetItFromHere = Rswift.StringResource(key: "If  you forgot your password, you can reset it from here.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Image Gallery
      ///
      /// Locales: en, tr
      static let imageGallery = Rswift.StringResource(key: "Image Gallery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Image Type
      ///
      /// Locales: en, tr
      static let imageType = Rswift.StringResource(key: "Image Type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Import
      ///
      /// Locales: en, tr
      static let `import` = Rswift.StringResource(key: "Import", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Import Video
      ///
      /// Locales: en, tr
      static let importVideo = Rswift.StringResource(key: "Import Video", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: In a realtionship
      ///
      /// Locales: en, tr
      static let inARealtionship = Rswift.StringResource(key: "In a realtionship", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Installation, Maintenance & Repair
      ///
      /// Locales: en, tr
      static let installationMaintenanceRepair = Rswift.StringResource(key: "Installation, Maintenance & Repair", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: InterNetError
      ///
      /// Locales: en, tr
      static let interNetError = Rswift.StringResource(key: "InterNetError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Internet Connection Failed
      ///
      /// Locales: en, tr
      static let internetConnectionFailed = Rswift.StringResource(key: "Internet Connection Failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Intrested
      ///
      /// Locales: en, tr
      static let intrested = Rswift.StringResource(key: "Intrested", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Intrested People
      ///
      /// Locales: en, tr
      static let intrestedPeople = Rswift.StringResource(key: "Intrested People", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Invitation Links
      ///
      /// Locales: en, tr
      static let invitationLinks = Rswift.StringResource(key: "Invitation Links", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Invite Friends
      ///
      /// Locales: en, tr
      static let inviteFriends = Rswift.StringResource(key: "Invite Friends", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: JOIN GROUP
      ///
      /// Locales: en, tr
      static let joingrouP = Rswift.StringResource(key: "JOIN GROUP", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: JOINED
      ///
      /// Locales: en, tr
      static let joineD = Rswift.StringResource(key: "JOINED", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Job Title
      ///
      /// Locales: en, tr
      static let jobTitle = Rswift.StringResource(key: "Job Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Job Type
      ///
      /// Locales: en, tr
      static let jobType = Rswift.StringResource(key: "Job Type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Jobs
      ///
      /// Locales: en, tr
      static let jobs = Rswift.StringResource(key: "Jobs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Join
      ///
      /// Locales: en, tr
      static let join = Rswift.StringResource(key: "Join", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Join Group
      ///
      /// Locales: en, tr
      static let joinGroup = Rswift.StringResource(key: "Join Group", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Join or start your Own Group
      ///
      /// Locales: en, tr
      static let joinOrStartYourOwnGroup = Rswift.StringResource(key: "Join or start your Own Group", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Joined
      ///
      /// Locales: en, tr
      static let joined = Rswift.StringResource(key: "Joined", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Joined Group
      ///
      /// Locales: en, tr
      static let joinedGroup = Rswift.StringResource(key: "Joined Group", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Keep you conversation going from all devices
      ///
      /// Locales: en, tr
      static let keepYouConversationGoingFromAllDevices = Rswift.StringResource(key: "Keep you conversation going from all devices", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Keyword should not be less than 4
      ///
      /// Locales: en, tr
      static let keywordShouldNotBeLessThan4 = Rswift.StringResource(key: "Keyword should not be less than 4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en
      static let label = Rswift.StringResource(key: "Label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Last Activites
      ///
      /// Locales: en, tr
      static let lastActivites = Rswift.StringResource(key: "Last Activites", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Last Name
      ///
      /// Locales: en, tr
      static let lastName = Rswift.StringResource(key: "Last Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Last hour
      ///
      /// Locales: en, tr
      static let lastHour = Rswift.StringResource(key: "Last hour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Latest Videos
      ///
      /// Locales: en, tr
      static let latestVideos = Rswift.StringResource(key: "Latest Videos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Learn more
      ///
      /// Locales: en, tr
      static let learnMore = Rswift.StringResource(key: "Learn more", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Legal
      ///
      /// Locales: en, tr
      static let legal = Rswift.StringResource(key: "Legal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Let's get started!
      ///
      /// Locales: en, tr
      static let letSGetStarted = Rswift.StringResource(key: "Let's get started!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Library
      ///
      /// Locales: en, tr
      static let library = Rswift.StringResource(key: "Library", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: License Type
      ///
      /// Locales: en, tr
      static let licenseType = Rswift.StringResource(key: "License Type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Light mode
      ///
      /// Locales: en, tr
      static let lightMode = Rswift.StringResource(key: "Light mode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Like
      ///
      /// Locales: en, tr
      static let like = Rswift.StringResource(key: "Like", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Liked
      ///
      /// Locales: en, tr
      static let liked = Rswift.StringResource(key: "Liked", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Liked Pages
      ///
      /// Locales: en, tr
      static let likedPages = Rswift.StringResource(key: "Liked Pages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Liked Videos
      ///
      /// Locales: en, tr
      static let likedVideos = Rswift.StringResource(key: "Liked Videos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Likes
      ///
      /// Locales: en, tr
      static let likes = Rswift.StringResource(key: "Likes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Link copied to clipboard
      ///
      /// Locales: en, tr
      static let linkCopiedToClipboard = Rswift.StringResource(key: "Link copied to clipboard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Live
      ///
      /// Locales: en, tr
      static let live = Rswift.StringResource(key: "Live", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Live Style
      ///
      /// Locales: en, tr
      static let liveStyle = Rswift.StringResource(key: "Live Style", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Loading
      ///
      /// Locales: en, tr
      static let loading = Rswift.StringResource(key: "Loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: en, tr
      static let location = Rswift.StringResource(key: "Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Location/Places
      ///
      /// Locales: en, tr
      static let locationPlaces = Rswift.StringResource(key: "Location/Places", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en, tr
      static let login = Rswift.StringResource(key: "Login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: en, tr
      static let logout = Rswift.StringResource(key: "Logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.
      ///
      /// Locales: en
      static let loremIpsumDolorSitErElitLametConsectetaurCilliumAdipisicingPecuSedDoEiusmodTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationUllamcoLaborisNisiUtAliquipExEaCommodoConsequatDuisAuteIrureDolorInReprehenderitInVoluptateVelitEsseCillumDoloreEuFugiatNullaPariaturExcepteurSintOccaecatCupidatatNonProidentSuntInCulpaQuiOfficiaDeseruntMollitAnimIdEstLaborumNamLiberTeConscientToFactorTumPoenLegumOdioqueCiviuda = Rswift.StringResource(key: "Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Love
      ///
      /// Locales: en, tr
      static let love = Rswift.StringResource(key: "Love", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: MALE
      ///
      /// Locales: en, tr
      static let malE = Rswift.StringResource(key: "MALE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: MARKET
      ///
      /// Locales: en, tr
      static let markeT = Rswift.StringResource(key: "MARKET", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: MY BALANCE
      ///
      /// Locales: en, tr
      static let mybalancE = Rswift.StringResource(key: "MY BALANCE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: MY EVENTS
      ///
      /// Locales: en, tr
      static let myeventS = Rswift.StringResource(key: "MY EVENTS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: MY GAMES
      ///
      /// Locales: en, tr
      static let mygameS = Rswift.StringResource(key: "MY GAMES", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: MY PRODUCTS
      ///
      /// Locales: en, tr
      static let myproductS = Rswift.StringResource(key: "MY PRODUCTS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Make your own album to save your special moment
      ///
      /// Locales: en, tr
      static let makeYourOwnAlbumToSaveYourSpecialMoment = Rswift.StringResource(key: "Make your own album to save your special moment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Male
      ///
      /// Locales: en, tr
      static let male = Rswift.StringResource(key: "Male", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Manage Group
      ///
      /// Locales: en, tr
      static let manageGroup = Rswift.StringResource(key: "Manage Group", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Manage Page
      ///
      /// Locales: en, tr
      static let managePage = Rswift.StringResource(key: "Manage Page", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Manage Session
      ///
      /// Locales: en, tr
      static let manageSession = Rswift.StringResource(key: "Manage Session", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Manage Sessions
      ///
      /// Locales: en, tr
      static let manageSessions = Rswift.StringResource(key: "Manage Sessions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Management
      ///
      /// Locales: en, tr
      static let management = Rswift.StringResource(key: "Management", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Manufacturing
      ///
      /// Locales: en, tr
      static let manufacturing = Rswift.StringResource(key: "Manufacturing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: MarketPlace
      ///
      /// Locales: en, tr
      static let marketPlace = Rswift.StringResource(key: "MarketPlace", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Married
      ///
      /// Locales: en, tr
      static let married = Rswift.StringResource(key: "Married", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Max
      ///
      /// Locales: en, tr
      static let max = Rswift.StringResource(key: "Max", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Maximum
      ///
      /// Locales: en, tr
      static let maximum = Rswift.StringResource(key: "Maximum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Media & Communication
      ///
      /// Locales: en, tr
      static let mediaCommunication = Rswift.StringResource(key: "Media & Communication", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Members
      ///
      /// Locales: en, tr
      static let members = Rswift.StringResource(key: "Members", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Mention Contact
      ///
      /// Locales: en, tr
      static let mentionContact = Rswift.StringResource(key: "Mention Contact", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Message Privacy
      ///
      /// Locales: en, tr
      static let messagePrivacy = Rswift.StringResource(key: "Message Privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Messages
      ///
      /// Locales: en, tr
      static let messages = Rswift.StringResource(key: "Messages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Min
      ///
      /// Locales: en, tr
      static let min = Rswift.StringResource(key: "Min", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Minimum
      ///
      /// Locales: en, tr
      static let minimum = Rswift.StringResource(key: "Minimum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Mobile
      ///
      /// Locales: en, tr
      static let mobile = Rswift.StringResource(key: "Mobile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Monitization
      ///
      /// Locales: en, tr
      static let monitization = Rswift.StringResource(key: "Monitization", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: More
      ///
      /// Locales: en, tr
      static let more = Rswift.StringResource(key: "More", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: More Options
      ///
      /// Locales: en, tr
      static let moreOptions = Rswift.StringResource(key: "More Options", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Most Active
      ///
      /// Locales: en, tr
      static let mostActive = Rswift.StringResource(key: "Most Active", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Movies
      ///
      /// Locales: en, tr
      static let movies = Rswift.StringResource(key: "Movies", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Movies & Animation
      ///
      /// Locales: en, tr
      static let moviesAnimation = Rswift.StringResource(key: "Movies & Animation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Music
      ///
      /// Locales: en, tr
      static let music = Rswift.StringResource(key: "Music", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Mute
      ///
      /// Locales: en
      static let mute = Rswift.StringResource(key: "Mute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: My Account
      ///
      /// Locales: en, tr
      static let myAccount = Rswift.StringResource(key: "My Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: My Affiliates
      ///
      /// Locales: en, tr
      static let myAffiliates = Rswift.StringResource(key: "My Affiliates", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: My Balance
      ///
      /// Locales: en, tr
      static let myBalance = Rswift.StringResource(key: "My Balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: My Images
      ///
      /// Locales: en, tr
      static let myImages = Rswift.StringResource(key: "My Images", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: My Points
      ///
      /// Locales: en, tr
      static let myPoints = Rswift.StringResource(key: "My Points", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: My Profile
      ///
      /// Locales: en, tr
      static let myProfile = Rswift.StringResource(key: "My Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: My Videos
      ///
      /// Locales: en, tr
      static let myVideos = Rswift.StringResource(key: "My Videos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: MyFriend
      ///
      /// Locales: en, tr
      static let myFriend = Rswift.StringResource(key: "MyFriend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: NO
      ///
      /// Locales: en, tr
      static let nO = Rswift.StringResource(key: "NO", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Natural
      ///
      /// Locales: en, tr
      static let natural = Rswift.StringResource(key: "Natural", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: New Features
      ///
      /// Locales: en, tr
      static let newFeatures = Rswift.StringResource(key: "New Features", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: New Funding
      ///
      /// Locales: en, tr
      static let newFunding = Rswift.StringResource(key: "New Funding", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: New Password
      ///
      /// Locales: en, tr
      static let newPassword = Rswift.StringResource(key: "New Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: New Version
      ///
      /// Locales: en, tr
      static let newVersion = Rswift.StringResource(key: "New Version", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: News and Politics
      ///
      /// Locales: en, tr
      static let newsAndPolitics = Rswift.StringResource(key: "News and Politics", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Next To
      ///
      /// Locales: en, tr
      static let nextTo = Rswift.StringResource(key: "Next To", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: No Comments Yet
      ///
      /// Locales: en, tr
      static let noCommentsYet = Rswift.StringResource(key: "No Comments Yet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: No Comments to be displayed
      ///
      /// Locales: en, tr
      static let noCommentsToBeDisplayed = Rswift.StringResource(key: "No Comments to be displayed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: No Joined Group Yet
      ///
      /// Locales: en, tr
      static let noJoinedGroupYet = Rswift.StringResource(key: "No Joined Group Yet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: No Liked Pages
      ///
      /// Locales: en, tr
      static let noLikedPages = Rswift.StringResource(key: "No Liked Pages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: No Notification yet
      ///
      /// Locales: en, tr
      static let noNotificationYet = Rswift.StringResource(key: "No Notification yet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: No Notification!
      ///
      /// Locales: en, tr
      static let noNotification = Rswift.StringResource(key: "No Notification!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: No Photos !!
      ///
      /// Locales: en, tr
      static let noPhotos = Rswift.StringResource(key: "No Photos !!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: No PlayList found
      ///
      /// Locales: en, tr
      static let noPlayListFound = Rswift.StringResource(key: "No PlayList found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: No Playlist found for now!
      ///
      /// Locales: en, tr
      static let noPlaylistFoundForNow = Rswift.StringResource(key: "No Playlist found for now!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: No User to show.
      ///
      /// Locales: en, tr
      static let noUserToShow = Rswift.StringResource(key: "No User to show.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: No Video!!
      ///
      /// Locales: en, tr
      static let noVideo = Rswift.StringResource(key: "No Video!!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: No activites found for now
      ///
      /// Locales: en, tr
      static let noActivitesFoundForNow = Rswift.StringResource(key: "No activites found for now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: No games!!
      ///
      /// Locales: en, tr
      static let noGames = Rswift.StringResource(key: "No games!!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: No more Messages
      ///
      /// Locales: en, tr
      static let noMoreMessages = Rswift.StringResource(key: "No more Messages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: No paid videos found
      ///
      /// Locales: en, tr
      static let noPaidVideosFound = Rswift.StringResource(key: "No paid videos found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: No videos found for now!
      ///
      /// Locales: en, tr
      static let noVideosFoundForNow = Rswift.StringResource(key: "No videos found for now!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Nobody
      ///
      /// Locales: en, tr
      static let nobody = Rswift.StringResource(key: "Nobody", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: None
      ///
      /// Locales: en, tr
      static let none = Rswift.StringResource(key: "None", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Not interested
      ///
      /// Locales: en, tr
      static let notInterested = Rswift.StringResource(key: "Not interested", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Notification Popup
      ///
      /// Locales: en, tr
      static let notificationPopup = Rswift.StringResource(key: "Notification Popup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Notifications
      ///
      /// Locales: en, tr
      static let notifications = Rswift.StringResource(key: "Notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: OFFLINE
      ///
      /// Locales: en, tr
      static let offlinE = Rswift.StringResource(key: "OFFLINE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, tr
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: ONLINE
      ///
      /// Locales: en, tr
      static let onlinE = Rswift.StringResource(key: "ONLINE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Offer a Job
      ///
      /// Locales: en, tr
      static let offerAJob = Rswift.StringResource(key: "Offer a Job", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Offers
      ///
      /// Locales: en, tr
      static let offers = Rswift.StringResource(key: "Offers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Offline
      ///
      /// Locales: en, tr
      static let offline = Rswift.StringResource(key: "Offline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Offline Download
      ///
      /// Locales: en, tr
      static let offlineDownload = Rswift.StringResource(key: "Offline Download", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Okay
      ///
      /// Locales: en
      static let okay = Rswift.StringResource(key: "Okay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Online
      ///
      /// Locales: en, tr
      static let online = Rswift.StringResource(key: "Online", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Other
      ///
      /// Locales: en, tr
      static let other = Rswift.StringResource(key: "Other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Others
      ///
      /// Locales: en, tr
      static let others = Rswift.StringResource(key: "Others", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: PAGES
      ///
      /// Locales: en, tr
      static let pageS = Rswift.StringResource(key: "PAGES", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: PLAYLISTS
      ///
      /// Locales: en, tr
      static let playlistS = Rswift.StringResource(key: "PLAYLISTS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Page Information
      ///
      /// Locales: en, tr
      static let pageInformation = Rswift.StringResource(key: "Page Information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Page Url
      ///
      /// Locales: en, tr
      static let pageUrl = Rswift.StringResource(key: "Page Url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Page Username
      ///
      /// Locales: en, tr
      static let pageUsername = Rswift.StringResource(key: "Page Username", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Page name
      ///
      /// Locales: en, tr
      static let pageName = Rswift.StringResource(key: "Page name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Page title
      ///
      /// Locales: en, tr
      static let pageTitle = Rswift.StringResource(key: "Page title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Pages
      ///
      /// Locales: en, tr
      static let pages = Rswift.StringResource(key: "Pages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Pages promotions
      ///
      /// Locales: en, tr
      static let pagesPromotions = Rswift.StringResource(key: "Pages promotions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Paid
      ///
      /// Locales: en, tr
      static let paid = Rswift.StringResource(key: "Paid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, tr
      static let password = Rswift.StringResource(key: "Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: PayNow
      ///
      /// Locales: en, tr
      static let payNow = Rswift.StringResource(key: "PayNow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Paystack
      ///
      /// Locales: en, tr
      static let paystack = Rswift.StringResource(key: "Paystack", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: People Follow me
      ///
      /// Locales: en, tr
      static let peopleFollowMe = Rswift.StringResource(key: "People Follow me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: People and Nations
      ///
      /// Locales: en, tr
      static let peopleAndNations = Rswift.StringResource(key: "People and Nations", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: People i Follow
      ///
      /// Locales: en, tr
      static let peopleIFollow = Rswift.StringResource(key: "People i Follow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Per Month
      ///
      /// Locales: en, tr
      static let perMonth = Rswift.StringResource(key: "Per Month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Per Week
      ///
      /// Locales: en, tr
      static let perWeek = Rswift.StringResource(key: "Per Week", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Per Year
      ///
      /// Locales: en, tr
      static let perYear = Rswift.StringResource(key: "Per Year", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Personal Care
      ///
      /// Locales: en, tr
      static let personalCare = Rswift.StringResource(key: "Personal Care", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Pets & Animals
      ///
      /// Locales: en, tr
      static let petsAnimals = Rswift.StringResource(key: "Pets & Animals", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Phone
      ///
      /// Locales: en, tr
      static let phone = Rswift.StringResource(key: "Phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Photo Album
      ///
      /// Locales: en, tr
      static let photoAlbum = Rswift.StringResource(key: "Photo Album", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Photos
      ///
      /// Locales: en, tr
      static let photos = Rswift.StringResource(key: "Photos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Pick Your Plan
      ///
      /// Locales: en, tr
      static let pickYourPlan = Rswift.StringResource(key: "Pick Your Plan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Places & Regions
      ///
      /// Locales: en, tr
      static let placesRegions = Rswift.StringResource(key: "Places & Regions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Play sounds for incoming and outgoing messages
      ///
      /// Locales: en, tr
      static let playSoundsForIncomingAndOutgoingMessages = Rswift.StringResource(key: "Play sounds for incoming and outgoing messages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Playlist
      ///
      /// Locales: en, tr
      static let playlist = Rswift.StringResource(key: "Playlist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Playlists
      ///
      /// Locales: en, tr
      static let playlists = Rswift.StringResource(key: "Playlists", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please Enter Email
      ///
      /// Locales: en, tr
      static let pleaseEnterEmail = Rswift.StringResource(key: "Please Enter Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please Enter Paypal Email
      ///
      /// Locales: en, tr
      static let pleaseEnterPaypalEmail = Rswift.StringResource(key: "Please Enter Paypal Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please Enter Valid Email Address
      ///
      /// Locales: en, tr
      static let pleaseEnterValidEmailAddress = Rswift.StringResource(key: "Please Enter Valid Email Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please Enter Your Email
      ///
      /// Locales: en
      static let pleaseEnterYourEmail = Rswift.StringResource(key: "Please Enter Your Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please Write your Full email address
      ///
      /// Locales: en
      static let pleaseWriteYourFullEmailAddress = Rswift.StringResource(key: "Please Write your Full email address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please add Photo image
      ///
      /// Locales: en, tr
      static let pleaseAddPhotoImage = Rswift.StringResource(key: "Please add Photo image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please add passport image
      ///
      /// Locales: en, tr
      static let pleaseAddPassportImage = Rswift.StringResource(key: "Please add passport image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please enter Code
      ///
      /// Locales: en, tr
      static let pleaseEnterCode = Rswift.StringResource(key: "Please enter Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please enter a message.
      ///
      /// Locales: en, tr
      static let pleaseEnterAMessage = Rswift.StringResource(key: "Please enter a message.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please enter comment text
      ///
      /// Locales: en, tr
      static let pleaseEnterCommentText = Rswift.StringResource(key: "Please enter comment text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please enter first name.
      ///
      /// Locales: en, tr
      static let pleaseEnterFirstName = Rswift.StringResource(key: "Please enter first name.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please enter last name.
      ///
      /// Locales: en, tr
      static let pleaseEnterLastName = Rswift.StringResource(key: "Please enter last name.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please enter playlist description
      ///
      /// Locales: en, tr
      static let pleaseEnterPlaylistDescription = Rswift.StringResource(key: "Please enter playlist description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please enter playlist name
      ///
      /// Locales: en, tr
      static let pleaseEnterPlaylistName = Rswift.StringResource(key: "Please enter playlist name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please enter text
      ///
      /// Locales: en, tr
      static let pleaseEnterText = Rswift.StringResource(key: "Please enter text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please enter your confirmation code
      ///
      /// Locales: en, tr
      static let pleaseEnterYourConfirmationCode = Rswift.StringResource(key: "Please enter your confirmation code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please enter your email address. You will receive a link to create  a new password.
      ///
      /// Locales: en
      static let pleaseEnterYourEmailAddressYouWillReceiveALinkToCreateANewPassword = Rswift.StringResource(key: "Please enter your email address. You will receive a link to create  a new password.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please read terms of services
      ///
      /// Locales: en, tr
      static let pleaseReadTermsOfServices = Rswift.StringResource(key: "Please read terms of services", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please select Sort By
      ///
      /// Locales: en, tr
      static let pleaseSelectSortBy = Rswift.StringResource(key: "Please select Sort By", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please select Time By
      ///
      /// Locales: en, tr
      static let pleaseSelectTimeBy = Rswift.StringResource(key: "Please select Time By", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please select atleast one media.
      ///
      /// Locales: en, tr
      static let pleaseSelectAtleastOneMedia = Rswift.StringResource(key: "Please select atleast one media.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please select recent picutre of your passport or id.
      ///
      /// Locales: en, tr
      static let pleaseSelectRecentPicutreOfYourPassportOrId = Rswift.StringResource(key: "Please select recent picutre of your passport or id.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please select the Terms & Conditions.
      ///
      /// Locales: en, tr
      static let pleaseSelectTheTermsConditions = Rswift.StringResource(key: "Please select the Terms & Conditions.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please type Comment
      ///
      /// Locales: en, tr
      static let pleaseTypeComment = Rswift.StringResource(key: "Please type Comment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please write your email
      ///
      /// Locales: en, tr
      static let pleaseWriteYourEmail = Rswift.StringResource(key: "Please write your email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please, enter stream name
      ///
      /// Locales: en, tr
      static let pleaseEnterStreamName = Rswift.StringResource(key: "Please, enter stream name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Points
      ///
      /// Locales: en, tr
      static let points = Rswift.StringResource(key: "Points", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Poke Back
      ///
      /// Locales: en, tr
      static let pokeBack = Rswift.StringResource(key: "Poke Back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Pokes
      ///
      /// Locales: en, tr
      static let pokes = Rswift.StringResource(key: "Pokes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Popular Channel
      ///
      /// Locales: en, tr
      static let popularChannel = Rswift.StringResource(key: "Popular Channel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Popular Channels
      ///
      /// Locales: en, tr
      static let popularChannels = Rswift.StringResource(key: "Popular Channels", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Popular Posts
      ///
      /// Locales: en, tr
      static let popularPosts = Rswift.StringResource(key: "Popular Posts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Position
      ///
      /// Locales: en, tr
      static let position = Rswift.StringResource(key: "Position", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Post
      ///
      /// Locales: en, tr
      static let post = Rswift.StringResource(key: "Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Post UnSaved
      ///
      /// Locales: en, tr
      static let postUnSaved = Rswift.StringResource(key: "Post UnSaved", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Posts promotion
      ///
      /// Locales: en, tr
      static let postsPromotion = Rswift.StringResource(key: "Posts promotion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Price
      ///
      /// Locales: en, tr
      static let price = Rswift.StringResource(key: "Price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Price Max
      ///
      /// Locales: en, tr
      static let priceMax = Rswift.StringResource(key: "Price Max", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Price Min
      ///
      /// Locales: en, tr
      static let priceMin = Rswift.StringResource(key: "Price Min", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Privacy
      ///
      /// Locales: en, tr
      static let privacy = Rswift.StringResource(key: "Privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en, tr
      static let privacyPolicy = Rswift.StringResource(key: "Privacy Policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Pro Features give you Complete control over your Profile
      ///
      /// Locales: en, tr
      static let proFeaturesGiveYouCompleteControlOverYourProfile = Rswift.StringResource(key: "Pro Features give you Complete control over your Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Pro Users
      ///
      /// Locales: en, tr
      static let proUsers = Rswift.StringResource(key: "Pro Users", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Product Description
      ///
      /// Locales: en, tr
      static let productDescription = Rswift.StringResource(key: "Product Description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Product name
      ///
      /// Locales: en, tr
      static let productName = Rswift.StringResource(key: "Product name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Product price
      ///
      /// Locales: en, tr
      static let productPrice = Rswift.StringResource(key: "Product price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Profile Picture
      ///
      /// Locales: en, tr
      static let profilePicture = Rswift.StringResource(key: "Profile Picture", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Protective Services
      ///
      /// Locales: en, tr
      static let protectiveServices = Rswift.StringResource(key: "Protective Services", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: RESET
      ///
      /// Locales: en, tr
      static let reseT = Rswift.StringResource(key: "RESET", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Ready to stop live Streaming?
      ///
      /// Locales: en, tr
      static let readyToStopLiveStreaming = Rswift.StringResource(key: "Ready to stop live Streaming?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Ready to stop watching?
      ///
      /// Locales: en, tr
      static let readyToStopWatching = Rswift.StringResource(key: "Ready to stop watching?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Recently Watched
      ///
      /// Locales: en, tr
      static let recentlyWatched = Rswift.StringResource(key: "Recently Watched", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Register
      ///
      /// Locales: en, tr
      static let register = Rswift.StringResource(key: "Register", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Relationship
      ///
      /// Locales: en, tr
      static let relationship = Rswift.StringResource(key: "Relationship", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Remove Location
      ///
      /// Locales: en, tr
      static let removeLocation = Rswift.StringResource(key: "Remove Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Repeat Password
      ///
      /// Locales: en, tr
      static let repeatPassword = Rswift.StringResource(key: "Repeat Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Replenish my balance
      ///
      /// Locales: en, tr
      static let replenishMyBalance = Rswift.StringResource(key: "Replenish my balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Report Post
      ///
      /// Locales: en, tr
      static let reportPost = Rswift.StringResource(key: "Report Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Report a Problem
      ///
      /// Locales: en, tr
      static let reportAProblem = Rswift.StringResource(key: "Report a Problem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Request Withdrawal
      ///
      /// Locales: en, tr
      static let requestWithdrawal = Rswift.StringResource(key: "Request Withdrawal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Requested
      ///
      /// Locales: en, tr
      static let requested = Rswift.StringResource(key: "Requested", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Reset filter
      ///
      /// Locales: en, tr
      static let resetFilter = Rswift.StringResource(key: "Reset filter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Restaurant & Hospitality
      ///
      /// Locales: en, tr
      static let restaurantHospitality = Rswift.StringResource(key: "Restaurant & Hospitality", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Retail & Sales
      ///
      /// Locales: en, tr
      static let retailSales = Rswift.StringResource(key: "Retail & Sales", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: SAVE
      ///
      /// Locales: en, tr
      static let savE = Rswift.StringResource(key: "SAVE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: SHARE
      ///
      /// Locales: en, tr
      static let sharE = Rswift.StringResource(key: "SHARE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: SHOW APPLIES
      ///
      /// Locales: en, tr
      static let showapplieS = Rswift.StringResource(key: "SHOW APPLIES", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: STAR
      ///
      /// Locales: en, tr
      static let staR = Rswift.StringResource(key: "STAR", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: SUBSCRIBE
      ///
      /// Locales: en, tr
      static let subscribE = Rswift.StringResource(key: "SUBSCRIBE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: SUBSCRIBED
      ///
      /// Locales: en, tr
      static let subscribeD = Rswift.StringResource(key: "SUBSCRIBED", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Sad
      ///
      /// Locales: en, tr
      static let sad = Rswift.StringResource(key: "Sad", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Sad no result!
      ///
      /// Locales: en, tr
      static let sadNoResult = Rswift.StringResource(key: "Sad no result!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Salary Date
      ///
      /// Locales: en, tr
      static let salaryDate = Rswift.StringResource(key: "Salary Date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en, tr
      static let save = Rswift.StringResource(key: "Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Save Post
      ///
      /// Locales: en, tr
      static let savePost = Rswift.StringResource(key: "Save Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Saved Post
      ///
      /// Locales: en, tr
      static let savedPost = Rswift.StringResource(key: "Saved Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Saved Posts
      ///
      /// Locales: en, tr
      static let savedPosts = Rswift.StringResource(key: "Saved Posts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: School
      ///
      /// Locales: en, tr
      static let school = Rswift.StringResource(key: "School", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Science & Engineering
      ///
      /// Locales: en, tr
      static let scienceEngineering = Rswift.StringResource(key: "Science & Engineering", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Science and Technology
      ///
      /// Locales: en, tr
      static let scienceAndTechnology = Rswift.StringResource(key: "Science and Technology", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Search Globally
      ///
      /// Locales: en, tr
      static let searchGlobally = Rswift.StringResource(key: "Search Globally", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Search Random
      ///
      /// Locales: en, tr
      static let searchRandom = Rswift.StringResource(key: "Search Random", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Security
      ///
      /// Locales: en, tr
      static let security = Rswift.StringResource(key: "Security", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: See All
      ///
      /// Locales: en, tr
      static let seeAll = Rswift.StringResource(key: "See All", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: See profile visitors
      ///
      /// Locales: en, tr
      static let seeProfileVisitors = Rswift.StringResource(key: "See profile visitors", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Select
      ///
      /// Locales: en, tr
      static let select = Rswift.StringResource(key: "Select", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Select A Category
      ///
      /// Locales: en, tr
      static let selectACategory = Rswift.StringResource(key: "Select A Category", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Select Currency
      ///
      /// Locales: en, tr
      static let selectCurrency = Rswift.StringResource(key: "Select Currency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Select Gender
      ///
      /// Locales: en, tr
      static let selectGender = Rswift.StringResource(key: "Select Gender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Select Image
      ///
      /// Locales: en, tr
      static let selectImage = Rswift.StringResource(key: "Select Image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Select Pictures
      ///
      /// Locales: en, tr
      static let selectPictures = Rswift.StringResource(key: "Select Pictures", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Select Source
      ///
      /// Locales: en, tr
      static let selectSource = Rswift.StringResource(key: "Select Source", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Select from your contact list
      ///
      /// Locales: en, tr
      static let selectFromYourContactList = Rswift.StringResource(key: "Select from your contact list", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Select what you want
      ///
      /// Locales: en
      static let selectWhatYouWant = Rswift.StringResource(key: "Select what you want", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Selecte a Category
      ///
      /// Locales: en, tr
      static let selecteACategory = Rswift.StringResource(key: "Selecte a Category", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Sell New Product
      ///
      /// Locales: en, tr
      static let sellNewProduct = Rswift.StringResource(key: "Sell New Product", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en, tr
      static let send = Rswift.StringResource(key: "Send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Send & Recieve all kind of messages
      ///
      /// Locales: en, tr
      static let sendRecieveAllKindOfMessages = Rswift.StringResource(key: "Send & Recieve all kind of messages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Send Gift
      ///
      /// Locales: en, tr
      static let sendGift = Rswift.StringResource(key: "Send Gift", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Send Money
      ///
      /// Locales: en, tr
      static let sendMoney = Rswift.StringResource(key: "Send Money", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Send money to friends
      ///
      /// Locales: en, tr
      static let sendMoneyToFriends = Rswift.StringResource(key: "Send money to friends", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Setting
      ///
      /// Locales: en, tr
      static let setting = Rswift.StringResource(key: "Setting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Setting Account
      ///
      /// Locales: en, tr
      static let settingAccount = Rswift.StringResource(key: "Setting Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, tr
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Share
      ///
      /// Locales: en, tr
      static let share = Rswift.StringResource(key: "Share", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Share Post
      ///
      /// Locales: en, tr
      static let sharePost = Rswift.StringResource(key: "Share Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Share my location with public
      ///
      /// Locales: en, tr
      static let shareMyLocationWithPublic = Rswift.StringResource(key: "Share my location with public", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Share to
      ///
      /// Locales: en, tr
      static let shareTo = Rswift.StringResource(key: "Share to", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Share to a Group
      ///
      /// Locales: en, tr
      static let shareToAGroup = Rswift.StringResource(key: "Share to a Group", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Share to a Page
      ///
      /// Locales: en, tr
      static let shareToAPage = Rswift.StringResource(key: "Share to a Page", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Share to my Timeline
      ///
      /// Locales: en, tr
      static let shareToMyTimeline = Rswift.StringResource(key: "Share to my Timeline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Shared
      ///
      /// Locales: en, tr
      static let shared = Rswift.StringResource(key: "Shared", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Show / Hide last seen
      ///
      /// Locales: en, tr
      static let showHideLastSeen = Rswift.StringResource(key: "Show / Hide last seen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Show Activities
      ///
      /// Locales: en, tr
      static let showActivities = Rswift.StringResource(key: "Show Activities", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Sign in
      ///
      /// Locales: en, tr
      static let signIn = Rswift.StringResource(key: "Sign in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Single
      ///
      /// Locales: en, tr
      static let single = Rswift.StringResource(key: "Single", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Social Link
      ///
      /// Locales: en, tr
      static let socialLink = Rswift.StringResource(key: "Social Link", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Social Links
      ///
      /// Locales: en, tr
      static let socialLinks = Rswift.StringResource(key: "Social Links", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Sort By
      ///
      /// Locales: en, tr
      static let sortBy = Rswift.StringResource(key: "Sort By", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Sports
      ///
      /// Locales: en, tr
      static let sports = Rswift.StringResource(key: "Sports", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Sports & Entertainment
      ///
      /// Locales: en, tr
      static let sportsEntertainment = Rswift.StringResource(key: "Sports & Entertainment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Start
      ///
      /// Locales: en, tr
      static let start = Rswift.StringResource(key: "Start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Start Date
      ///
      /// Locales: en, tr
      static let startDate = Rswift.StringResource(key: "Start Date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Start Viewing or create your own age
      ///
      /// Locales: en, tr
      static let startViewingOrCreateYourOwnAge = Rswift.StringResource(key: "Start Viewing or create your own age", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Start uploding your own photos
      ///
      /// Locales: en, tr
      static let startUplodingYourOwnPhotos = Rswift.StringResource(key: "Start uploding your own photos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Start uploding your own video
      ///
      /// Locales: en, tr
      static let startUplodingYourOwnVideo = Rswift.StringResource(key: "Start uploding your own video", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Status
      ///
      /// Locales: en, tr
      static let status = Rswift.StringResource(key: "Status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Stay Sync
      ///
      /// Locales: en, tr
      static let staySync = Rswift.StringResource(key: "Stay Sync", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Stay login to your account to be
      ///
      /// Locales: en
      static let stayLoginToYourAccountToBe = Rswift.StringResource(key: "Stay login to your account to be", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Stay tuned notifications about your activity will show up here
      ///
      /// Locales: en, tr
      static let stayTunedNotificationsAboutYourActivityWillShowUpHere = Rswift.StringResource(key: "Stay tuned notifications about your activity will show up here", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Stream Name
      ///
      /// Locales: en, tr
      static let streamName = Rswift.StringResource(key: "Stream Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: en, tr
      static let submit = Rswift.StringResource(key: "Submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Submit Request
      ///
      /// Locales: en
      static let submitRequest = Rswift.StringResource(key: "Submit Request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Subscribe
      ///
      /// Locales: en, tr
      static let subscribe = Rswift.StringResource(key: "Subscribe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Subscribed
      ///
      /// Locales: en, tr
      static let subscribed = Rswift.StringResource(key: "Subscribed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Subscribed Successfully
      ///
      /// Locales: en, tr
      static let subscribedSuccessfully = Rswift.StringResource(key: "Subscribed Successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Subscriber
      ///
      /// Locales: en, tr
      static let subscriber = Rswift.StringResource(key: "Subscriber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Subscriptions
      ///
      /// Locales: en, tr
      static let subscriptions = Rswift.StringResource(key: "Subscriptions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Suggested Groups
      ///
      /// Locales: en, tr
      static let suggestedGroups = Rswift.StringResource(key: "Suggested Groups", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Suggested User
      ///
      /// Locales: en, tr
      static let suggestedUser = Rswift.StringResource(key: "Suggested User", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Switch Camera
      ///
      /// Locales: en
      static let switchCamera = Rswift.StringResource(key: "Switch Camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Tags
      ///
      /// Locales: en, tr
      static let tags = Rswift.StringResource(key: "Tags", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Tap 'Yes' to end your stream or 'No' to continue
      ///
      /// Locales: en, tr
      static let tapYesToEndYourStreamOrNoToContinue = Rswift.StringResource(key: "Tap 'Yes' to end your stream or 'No' to continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Tap 'Yes' to exist live stream or 'No' to keep watching
      ///
      /// Locales: en, tr
      static let tapYesToExistLiveStreamOrNoToKeepWatching = Rswift.StringResource(key: "Tap 'Yes' to exist live stream or 'No' to keep watching", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Tell a Friends
      ///
      /// Locales: en, tr
      static let tellAFriends = Rswift.StringResource(key: "Tell a Friends", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Tell pontentials members what your groups about to help them know whether its relevant to them
      ///
      /// Locales: en, tr
      static let tellPontentialsMembersWhatYourGroupsAboutToHelpThemKnowWhetherItsRelevantToThem = Rswift.StringResource(key: "Tell pontentials members what your groups about to help them know whether its relevant to them", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Tell pontentials members what your pages about to help them know whether its relevant to them
      ///
      /// Locales: en, tr
      static let tellPontentialsMembersWhatYourPagesAboutToHelpThemKnowWhetherItsRelevantToThem = Rswift.StringResource(key: "Tell pontentials members what your pages about to help them know whether its relevant to them", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Term Of service
      ///
      /// Locales: en, tr
      static let termOfService = Rswift.StringResource(key: "Term Of service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Terms of Service
      ///
      /// Locales: en, tr
      static let termsOfService = Rswift.StringResource(key: "Terms of Service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Text copied to clipboard
      ///
      /// Locales: en, tr
      static let textCopiedToClipboard = Rswift.StringResource(key: "Text copied to clipboard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: The post successfully saved
      ///
      /// Locales: en, tr
      static let thePostSuccessfullySaved = Rswift.StringResource(key: "The post successfully saved", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: There are no blocked users
      ///
      /// Locales: en, tr
      static let thereAreNoBlockedUsers = Rswift.StringResource(key: "There are no blocked users", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: There is no Group request
      ///
      /// Locales: en, tr
      static let thereIsNoGroupRequest = Rswift.StringResource(key: "There is no Group request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: There is no chat available. start chatting with friends.;
      ///
      /// Locales: en, tr
      static let thereIsNoChatAvailableStartChattingWithFriends = Rswift.StringResource(key: "There is no chat available. start chatting with friends.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: This Month
      ///
      /// Locales: en, tr
      static let thisMonth = Rswift.StringResource(key: "This Month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: This Week
      ///
      /// Locales: en, tr
      static let thisWeek = Rswift.StringResource(key: "This Week", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: This Year
      ///
      /// Locales: en, tr
      static let thisYear = Rswift.StringResource(key: "This Year", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Time By
      ///
      /// Locales: en, tr
      static let timeBy = Rswift.StringResource(key: "Time By", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Timeline Privacy
      ///
      /// Locales: en, tr
      static let timelinePrivacy = Rswift.StringResource(key: "Timeline Privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Title
      ///
      /// Locales: en, tr
      static let title = Rswift.StringResource(key: "Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: To Date
      ///
      /// Locales: en, tr
      static let toDate = Rswift.StringResource(key: "To Date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: To log in, you need to verify  your identity.
      ///
      /// Locales: en, tr
      static let toLogInYouNeedToVerifyYourIdentity = Rswift.StringResource(key: "To log in, you need to verify  your identity.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Today
      ///
      /// Locales: en, tr
      static let today = Rswift.StringResource(key: "Today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Transportation
      ///
      /// Locales: en, tr
      static let transportation = Rswift.StringResource(key: "Transportation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Traval and Events
      ///
      /// Locales: en, tr
      static let travalAndEvents = Rswift.StringResource(key: "Traval and Events", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Turn on 2 step login level-up your account's security. Once turned on. you'll use both your password and a 6-digit security code sent to your phone or email to log in.
      ///
      /// Locales: en, tr
      static let turnOn2StepLoginLevelUpYourAccountSSecurityOnceTurnedOnYouLlUseBothYourPasswordAndA6DigitSecurityCodeSentToYourPhoneOrEmailToLogIn = Rswift.StringResource(key: "Turn on 2 step login level-up your account's security. Once turned on. you'll use both your password and a 6-digit security code sent to your phone or email to log in.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.
      ///
      /// Locales: en, tr
      static let turnOn2StepLoginToLevelUpYourAccountSecurityOnceTurnedOnYouLlUseBothYourPasswordAndA6DigitSecurityCodeSendToYourPhoneOrEmailToLogIn = Rswift.StringResource(key: "Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: UPDATE
      ///
      /// Locales: en, tr
      static let updatE = Rswift.StringResource(key: "UPDATE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: USERS
      ///
      /// Locales: en, tr
      static let userS = Rswift.StringResource(key: "USERS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: UnVerified
      ///
      /// Locales: en, tr
      static let unVerified = Rswift.StringResource(key: "UnVerified", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Unblock
      ///
      /// Locales: en, tr
      static let unblock = Rswift.StringResource(key: "Unblock", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Unblocked
      ///
      /// Locales: en, tr
      static let unblocked = Rswift.StringResource(key: "Unblocked", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Unlike
      ///
      /// Locales: en, tr
      static let unlike = Rswift.StringResource(key: "Unlike", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Unsave Post
      ///
      /// Locales: en, tr
      static let unsavePost = Rswift.StringResource(key: "Unsave Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Update Data Page
      ///
      /// Locales: en, tr
      static let updateDataPage = Rswift.StringResource(key: "Update Data Page", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Update Group
      ///
      /// Locales: en
      static let updateGroup = Rswift.StringResource(key: "Update Group", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Update Job
      ///
      /// Locales: en, tr
      static let updateJob = Rswift.StringResource(key: "Update Job", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Update Page Data
      ///
      /// Locales: en, tr
      static let updatePageData = Rswift.StringResource(key: "Update Page Data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Upgrade Now
      ///
      /// Locales: en, tr
      static let upgradeNow = Rswift.StringResource(key: "Upgrade Now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Upload Video
      ///
      /// Locales: en, tr
      static let uploadVideo = Rswift.StringResource(key: "Upload Video", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Used
      ///
      /// Locales: en, tr
      static let used = Rswift.StringResource(key: "Used", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: User Info
      ///
      /// Locales: en
      static let userInfo = Rswift.StringResource(key: "User Info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: User has been blocked!
      ///
      /// Locales: en, tr
      static let userHasBeenBlocked = Rswift.StringResource(key: "User has been blocked!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: VERIFY
      ///
      /// Locales: en, tr
      static let verifY = Rswift.StringResource(key: "VERIFY", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: VIDEOS
      ///
      /// Locales: en, tr
      static let videoS = Rswift.StringResource(key: "VIDEOS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Verified
      ///
      /// Locales: en, tr
      static let verified = Rswift.StringResource(key: "Verified", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Verified badge
      ///
      /// Locales: en, tr
      static let verifiedBadge = Rswift.StringResource(key: "Verified badge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Video Gallery
      ///
      /// Locales: en, tr
      static let videoGallery = Rswift.StringResource(key: "Video Gallery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Video Mute
      ///
      /// Locales: en
      static let videoMute = Rswift.StringResource(key: "Video Mute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Video Reported successfully!!
      ///
      /// Locales: en, tr
      static let videoReportedSuccessfully = Rswift.StringResource(key: "Video Reported successfully!!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Video removed from the list
      ///
      /// Locales: en, tr
      static let videoRemovedFromTheList = Rswift.StringResource(key: "Video removed from the list", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Videos
      ///
      /// Locales: en, tr
      static let videos = Rswift.StringResource(key: "Videos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: View
      ///
      /// Locales: en, tr
      static let view = Rswift.StringResource(key: "View", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: View Privacy Shortcut
      ///
      /// Locales: en, tr
      static let viewPrivacyShortcut = Rswift.StringResource(key: "View Privacy Shortcut", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: View all Follow Request
      ///
      /// Locales: en, tr
      static let viewAllFollowRequest = Rswift.StringResource(key: "View all Follow Request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Views
      ///
      /// Locales: en, tr
      static let views = Rswift.StringResource(key: "Views", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Wallet & Credits
      ///
      /// Locales: en, tr
      static let walletCredits = Rswift.StringResource(key: "Wallet & Credits", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Warning
      ///
      /// Locales: en, tr
      static let warning = Rswift.StringResource(key: "Warning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Watch Later
      ///
      /// Locales: en, tr
      static let watchLater = Rswift.StringResource(key: "Watch Later", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Watch offline
      ///
      /// Locales: en, tr
      static let watchOffline = Rswift.StringResource(key: "Watch offline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: We cannot find the keyword  you are searching from maybe a little spelling mistake ?
      ///
      /// Locales: en, tr
      static let weCannotFindTheKeywordYouAreSearchingFromMaybeALittleSpellingMistake = Rswift.StringResource(key: "We cannot find the keyword  you are searching from maybe a little spelling mistake ?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: We have sent you the confirmation code to your email address.
      ///
      /// Locales: en, tr
      static let weHaveSentYouTheConfirmationCodeToYourEmailAddress = Rswift.StringResource(key: "We have sent you the confirmation code to your email address.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Website
      ///
      /// Locales: en, tr
      static let website = Rswift.StringResource(key: "Website", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Welcome,you are the first user here!
      ///
      /// Locales: en, tr
      static let welcomeYouAreTheFirstUserHere = Rswift.StringResource(key: "Welcome,you are the first user here!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: What's going on?#Hashtag..@Mention
      ///
      /// Locales: en, tr
      static let whatSGoingOnHashtagMention = Rswift.StringResource(key: "What's going on?#Hashtag..@Mention", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: When someone follow me
      ///
      /// Locales: en, tr
      static let whenSomeoneFollowMe = Rswift.StringResource(key: "When someone follow me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Who can follow me?
      ///
      /// Locales: en, tr
      static let whoCanFollowMe = Rswift.StringResource(key: "Who can follow me?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Who can message me?
      ///
      /// Locales: en, tr
      static let whoCanMessageMe = Rswift.StringResource(key: "Who can message me?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Who can post on my timeline?
      ///
      /// Locales: en, tr
      static let whoCanPostOnMyTimeline = Rswift.StringResource(key: "Who can post on my timeline?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Who can see my birthday?
      ///
      /// Locales: en, tr
      static let whoCanSeeMyBirthday = Rswift.StringResource(key: "Who can see my birthday?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Who can see my friends?
      ///
      /// Locales: en, tr
      static let whoCanSeeMyFriends = Rswift.StringResource(key: "Who can see my friends?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: WorkPlace
      ///
      /// Locales: en, tr
      static let workPlace = Rswift.StringResource(key: "WorkPlace", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Workspace
      ///
      /// Locales: en, tr
      static let workspace = Rswift.StringResource(key: "Workspace", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Wow
      ///
      /// Locales: en, tr
      static let wow = Rswift.StringResource(key: "Wow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: YES
      ///
      /// Locales: en, tr
      static let yeS = Rswift.StringResource(key: "YES", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: You can list product for sale from the Add a Product tool.
      ///
      /// Locales: en, tr
      static let youCanListProductForSaleFromTheAddAProductTool = Rswift.StringResource(key: "You can list product for sale from the Add a Product tool.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: You cannot block this user because it is administrator
      ///
      /// Locales: en
      static let youCannotBlockThisUserBecauseItIsAdministrator = Rswift.StringResource(key: "You cannot block this user because it is administrator", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You don't have camera
      ///
      /// Locales: en, tr
      static let youDonTHaveCamera = Rswift.StringResource(key: "You don't have camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: You erarned points will automatically go to
      ///
      /// Locales: en, tr
      static let youErarnedPointsWillAutomaticallyGoTo = Rswift.StringResource(key: "You erarned points will automatically go to", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Your Message here...
      ///
      /// Locales: en, tr
      static let yourMessageHere = Rswift.StringResource(key: "Your Message here...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Your report has been sent
      ///
      /// Locales: en, tr
      static let yourReportHasBeenSent = Rswift.StringResource(key: "Your report has been sent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: birthday Privacy
      ///
      /// Locales: en, tr
      static let birthdayPrivacy = Rswift.StringResource(key: "birthday Privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: changed cover picture
      ///
      /// Locales: en, tr
      static let changedCoverPicture = Rswift.StringResource(key: "changed cover picture", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: changed profile picture
      ///
      /// Locales: en, tr
      static let changedProfilePicture = Rswift.StringResource(key: "changed profile picture", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: count
      ///
      /// Locales: en
      static let count = Rswift.StringResource(key: "count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: follow
      ///
      /// Locales: en
      static let follow = Rswift.StringResource(key: "follow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: get notifications when you receive messages
      ///
      /// Locales: en, tr
      static let getNotificationsWhenYouReceiveMessages = Rswift.StringResource(key: "get notifications when you receive messages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: is live now
      ///
      /// Locales: en, tr
      static let isLiveNow = Rswift.StringResource(key: "is live now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: life time
      ///
      /// Locales: en, tr
      static let lifeTime = Rswift.StringResource(key: "life time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: select Group Privacy
      ///
      /// Locales: en, tr
      static let selectGroupPrivacy = Rswift.StringResource(key: "select Group Privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: sells
      ///
      /// Locales: en, tr
      static let sells = Rswift.StringResource(key: "sells", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: someone is calling you
      ///
      /// Locales: en
      static let someoneIsCallingYou = Rswift.StringResource(key: "someone is calling you", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: source
      ///
      /// Locales: en, tr
      static let source = Rswift.StringResource(key: "source", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: started broadcasting live.
      ///
      /// Locales: en, tr
      static let startedBroadcastingLive = Rswift.StringResource(key: "started broadcasting live.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: stream has ended.
      ///
      /// Locales: en, tr
      static let streamHasEnded = Rswift.StringResource(key: "stream has ended.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: unsubscribed
      ///
      /// Locales: en, tr
      static let unsubscribed = Rswift.StringResource(key: "unsubscribed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: update Playlist
      ///
      /// Locales: en, tr
      static let updatePlaylist = Rswift.StringResource(key: "update Playlist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: upload
      ///
      /// Locales: en, tr
      static let upload = Rswift.StringResource(key: "upload", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: was live
      ///
      /// Locales: en, tr
      static let wasLive = Rswift.StringResource(key: "was live", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: you can send money to your friends, acquaintances or anyone
      ///
      /// Locales: en, tr
      static let youCanSendMoneyToYourFriendsAcquaintancesOrAnyone = Rswift.StringResource(key: "you can send money to your friends, acquaintances or anyone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// tr translation: Kullanıcı adı
      ///
      /// Locales: tr
      static let userName = Rswift.StringResource(key: "User Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Kullanıcı adı
      ///
      /// Locales: tr
      static let username = Rswift.StringResource(key: "Username", tableName: "Localizable", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Takip etme
      ///
      /// Locales: tr
      static let following = Rswift.StringResource(key: "Following", tableName: "Localizable", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Şifreyi unut ?
      ///
      /// Locales: tr
      static let forgetPassword = Rswift.StringResource(key: "Forget Password ?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["tr"], comment: nil)

      /// en translation: #Wallet
      ///
      /// Locales: en, tr
      static func wallet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("#Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "#Wallet"
        }

        return NSLocalizedString("#Wallet", bundle: bundle, comment: "")
      }

      /// en translation: A confirmation email has been sent
      ///
      /// Locales: en, tr
      static func aConfirmationEmailHasBeenSent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("A confirmation email has been sent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "A confirmation email has been sent"
        }

        return NSLocalizedString("A confirmation email has been sent", bundle: bundle, comment: "")
      }

      /// en translation: ABOUT
      ///
      /// Locales: en, tr
      static func abouT(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ABOUT", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ABOUT"
        }

        return NSLocalizedString("ABOUT", bundle: bundle, comment: "")
      }

      /// en translation: ALL EVENTS
      ///
      /// Locales: en, tr
      static func alleventS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ALL EVENTS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ALL EVENTS"
        }

        return NSLocalizedString("ALL EVENTS", bundle: bundle, comment: "")
      }

      /// en translation: APPLY FILTER
      ///
      /// Locales: en, tr
      static func applyfilteR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("APPLY FILTER", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "APPLY FILTER"
        }

        return NSLocalizedString("APPLY FILTER", bundle: bundle, comment: "")
      }

      /// en translation: About
      ///
      /// Locales: en, tr
      static func about(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("About", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "About"
        }

        return NSLocalizedString("About", bundle: bundle, comment: "")
      }

      /// en translation: About Group
      ///
      /// Locales: en, tr
      static func aboutGroup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("About Group", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "About Group"
        }

        return NSLocalizedString("About Group", bundle: bundle, comment: "")
      }

      /// en translation: About Page
      ///
      /// Locales: en, tr
      static func aboutPage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("About Page", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "About Page"
        }

        return NSLocalizedString("About Page", bundle: bundle, comment: "")
      }

      /// en translation: About Us
      ///
      /// Locales: en, tr
      static func aboutUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("About Us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "About Us"
        }

        return NSLocalizedString("About Us", bundle: bundle, comment: "")
      }

      /// en translation: About me
      ///
      /// Locales: en, tr
      static func aboutMe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("About me", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "About me"
        }

        return NSLocalizedString("About me", bundle: bundle, comment: "")
      }

      /// en translation: Action Buttons
      ///
      /// Locales: en, tr
      static func actionButtons(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Action Buttons", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Action Buttons"
        }

        return NSLocalizedString("Action Buttons", bundle: bundle, comment: "")
      }

      /// en translation: Actions Buttons
      ///
      /// Locales: en, tr
      static func actionsButtons(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Actions Buttons", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Actions Buttons"
        }

        return NSLocalizedString("Actions Buttons", bundle: bundle, comment: "")
      }

      /// en translation: Activites
      ///
      /// Locales: en, tr
      static func activites(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Activites", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Activites"
        }

        return NSLocalizedString("Activites", bundle: bundle, comment: "")
      }

      /// en translation: Activities
      ///
      /// Locales: en, tr
      static func activities(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Activities", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Activities"
        }

        return NSLocalizedString("Activities", bundle: bundle, comment: "")
      }

      /// en translation: Add
      ///
      /// Locales: en, tr
      static func add(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add"
        }

        return NSLocalizedString("Add", bundle: bundle, comment: "")
      }

      /// en translation: Add Friend
      ///
      /// Locales: en, tr
      static func addFriend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AddFriend", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AddFriend"
        }

        return NSLocalizedString("AddFriend", bundle: bundle, comment: "")
      }

      /// en translation: Add Participants
      ///
      /// Locales: en, tr
      static func addParticipants(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Participants", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add Participants"
        }

        return NSLocalizedString("Add Participants", bundle: bundle, comment: "")
      }

      /// en translation: Add Post
      ///
      /// Locales: en, tr
      static func addPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add Post"
        }

        return NSLocalizedString("Add Post", bundle: bundle, comment: "")
      }

      /// en translation: Add To
      ///
      /// Locales: en, tr
      static func addTo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add To", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add To"
        }

        return NSLocalizedString("Add To", bundle: bundle, comment: "")
      }

      /// en translation: Add a comment here
      ///
      /// Locales: en, tr
      static func addACommentHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add a comment here", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add a comment here"
        }

        return NSLocalizedString("Add a comment here", bundle: bundle, comment: "")
      }

      /// en translation: Add code number
      ///
      /// Locales: en, tr
      static func addCodeNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add code number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add code number"
        }

        return NSLocalizedString("Add code number", bundle: bundle, comment: "")
      }

      /// en translation: Add new Story
      ///
      /// Locales: en, tr
      static func addNewStory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add new Story", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add new Story"
        }

        return NSLocalizedString("Add new Story", bundle: bundle, comment: "")
      }

      /// en translation: Add to Playlist
      ///
      /// Locales: en, tr
      static func addToPlaylist(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add to Playlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add to Playlist"
        }

        return NSLocalizedString("Add to Playlist", bundle: bundle, comment: "")
      }

      /// en translation: Add to Watch Later
      ///
      /// Locales: en, tr
      static func addToWatchLater(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add to Watch Later", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add to Watch Later"
        }

        return NSLocalizedString("Add to Watch Later", bundle: bundle, comment: "")
      }

      /// en translation: AddFunds
      ///
      /// Locales: en, tr
      static func addFunds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AddFunds", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AddFunds"
        }

        return NSLocalizedString("AddFunds", bundle: bundle, comment: "")
      }

      /// en translation: Added to watch later
      ///
      /// Locales: en, tr
      static func addedToWatchLater(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Added to watch later", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Added to watch later"
        }

        return NSLocalizedString("Added to watch later", bundle: bundle, comment: "")
      }

      /// en translation: Admin & Office
      ///
      /// Locales: en, tr
      static func adminOffice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Admin & Office", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Admin & Office"
        }

        return NSLocalizedString("Admin & Office", bundle: bundle, comment: "")
      }

      /// en translation: Affliates
      ///
      /// Locales: en, tr
      static func affliates(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Affliates", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Affliates"
        }

        return NSLocalizedString("Affliates", bundle: bundle, comment: "")
      }

      /// en translation: Age
      ///
      /// Locales: en, tr
      static func age(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Age", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Age"
        }

        return NSLocalizedString("Age", bundle: bundle, comment: "")
      }

      /// en translation: Album Created SuccessFully
      ///
      /// Locales: en, tr
      static func albumCreatedSuccessFully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Album Created SuccessFully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Album Created SuccessFully"
        }

        return NSLocalizedString("Album Created SuccessFully", bundle: bundle, comment: "")
      }

      /// en translation: Album Name
      ///
      /// Locales: en, tr
      static func albumName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Album Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Album Name"
        }

        return NSLocalizedString("Album Name", bundle: bundle, comment: "")
      }

      /// en translation: Albums
      ///
      /// Locales: en, tr
      static func albums(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Albums", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Albums"
        }

        return NSLocalizedString("Albums", bundle: bundle, comment: "")
      }

      /// en translation: All
      ///
      /// Locales: en, tr
      static func all(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("All", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "All"
        }

        return NSLocalizedString("All", bundle: bundle, comment: "")
      }

      /// en translation: All Time
      ///
      /// Locales: en, tr
      static func allTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("All Time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "All Time"
        }

        return NSLocalizedString("All Time", bundle: bundle, comment: "")
      }

      /// en translation: Allow Microphone Access to record audio?
      ///
      /// Locales: en, tr
      static func allowMicrophoneAccessToRecordAudio(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Allow Microphone Access to record audio?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Allow Microphone Access to record audio?"
        }

        return NSLocalizedString("Allow Microphone Access to record audio?", bundle: bundle, comment: "")
      }

      /// en translation: Already added in watch later
      ///
      /// Locales: en, tr
      static func alreadyAddedInWatchLater(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Already added in watch later", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Already added in watch later"
        }

        return NSLocalizedString("Already added in watch later", bundle: bundle, comment: "")
      }

      /// en translation: Already have an Account ?
      ///
      /// Locales: en, tr
      static func alreadyHaveAnAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Already have an Account ?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Already have an Account ?"
        }

        return NSLocalizedString("Already have an Account ?", bundle: bundle, comment: "")
      }

      /// en translation: Amount
      ///
      /// Locales: en, tr
      static func amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Amount"
        }

        return NSLocalizedString("Amount", bundle: bundle, comment: "")
      }

      /// en translation: Amount shouldn't be less than 50.
      ///
      /// Locales: en, tr
      static func amountShouldnTBeLessThan50(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Amount shouldn't be less than 50.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Amount shouldn't be less than 50."
        }

        return NSLocalizedString("Amount shouldn't be less than 50.", bundle: bundle, comment: "")
      }

      /// en translation: Angry
      ///
      /// Locales: en, tr
      static func angry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Angry", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Angry"
        }

        return NSLocalizedString("Angry", bundle: bundle, comment: "")
      }

      /// en translation: Answer
      ///
      /// Locales: en
      static func answer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Answer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Answer"
        }

        return NSLocalizedString("Answer", bundle: bundle, comment: "")
      }

      /// en translation: Apply Filter
      ///
      /// Locales: en, tr
      static func applyFilter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Apply Filter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Apply Filter"
        }

        return NSLocalizedString("Apply Filter", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure want to delete group please check
      ///
      /// Locales: en, tr
      static func areYouSureWantToDeleteGroupPleaseCheck(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure want to delete group please check", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure want to delete group please check"
        }

        return NSLocalizedString("Are you sure want to delete group please check", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to delete Account?
      ///
      /// Locales: en, tr
      static func areYouSureYouWantToDeleteAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure you want to delete Account?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure you want to delete Account?"
        }

        return NSLocalizedString("Are you sure you want to delete Account?", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to delete the account ?
      ///
      /// Locales: en
      static func areYouSureYouWantToDeleteTheAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure you want to delete the account ?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure you want to delete the account ?"
        }

        return NSLocalizedString("Are you sure you want to delete the account ?", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to logout
      ///
      /// Locales: en, tr
      static func areYouSureYouWantToLogout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure you want to logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure you want to logout"
        }

        return NSLocalizedString("Are you sure you want to logout", bundle: bundle, comment: "")
      }

      /// en translation: Art & Design
      ///
      /// Locales: en, tr
      static func artDesign(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Art & Design", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Art & Design"
        }

        return NSLocalizedString("Art & Design", bundle: bundle, comment: "")
      }

      /// en translation: Autos & Vehicles
      ///
      /// Locales: en, tr
      static func autosVehicles(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Autos & Vehicles", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Autos & Vehicles"
        }

        return NSLocalizedString("Autos & Vehicles", bundle: bundle, comment: "")
      }

      /// en translation: Avatar
      ///
      /// Locales: en, tr
      static func avatar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Avatar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Avatar"
        }

        return NSLocalizedString("Avatar", bundle: bundle, comment: "")
      }

      /// en translation: Avatar&Cover
      ///
      /// Locales: en, tr
      static func avatarCover(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Avatar&Cover", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Avatar&Cover"
        }

        return NSLocalizedString("Avatar&Cover", bundle: bundle, comment: "")
      }

      /// en translation: Baby & Children's Products
      ///
      /// Locales: en, tr
      static func babyChildrenSProducts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Baby & Children's Products", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Baby & Children's Products"
        }

        return NSLocalizedString("Baby & Children's Products", bundle: bundle, comment: "")
      }

      /// en translation: Bank Transfer
      ///
      /// Locales: en, tr
      static func bankTransfer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bank Transfer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Bank Transfer"
        }

        return NSLocalizedString("Bank Transfer", bundle: bundle, comment: "")
      }

      /// en translation: Beauty Products & Services
      ///
      /// Locales: en, tr
      static func beautyProductsServices(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Beauty Products & Services", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Beauty Products & Services"
        }

        return NSLocalizedString("Beauty Products & Services", bundle: bundle, comment: "")
      }

      /// en translation: Birthday
      ///
      /// Locales: en, tr
      static func birthday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Birthday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Birthday"
        }

        return NSLocalizedString("Birthday", bundle: bundle, comment: "")
      }

      /// en translation: Block
      ///
      /// Locales: en, tr
      static func block(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Block", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Block"
        }

        return NSLocalizedString("Block", bundle: bundle, comment: "")
      }

      /// en translation: Block Member
      ///
      /// Locales: en, tr
      static func blockMember(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Block Member", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Block Member"
        }

        return NSLocalizedString("Block Member", bundle: bundle, comment: "")
      }

      /// en translation: Blocked Users
      ///
      /// Locales: en, tr
      static func blockedUsers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Blocked Users", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Blocked Users"
        }

        return NSLocalizedString("Blocked Users", bundle: bundle, comment: "")
      }

      /// en translation: Blogs
      ///
      /// Locales: en, tr
      static func blogs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Blogs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Blogs"
        }

        return NSLocalizedString("Blogs", bundle: bundle, comment: "")
      }

      /// en translation: Boost Post
      ///
      /// Locales: en, tr
      static func boostPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Boost Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Boost Post"
        }

        return NSLocalizedString("Boost Post", bundle: bundle, comment: "")
      }

      /// en translation: Boost up to 20 Pages
      ///
      /// Locales: en, tr
      static func boostUpTo20Pages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Boost up to 20 Pages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Boost up to 20 Pages"
        }

        return NSLocalizedString("Boost up to 20 Pages", bundle: bundle, comment: "")
      }

      /// en translation: Boost up to 5 Pages
      ///
      /// Locales: en, tr
      static func boostUpTo5Pages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Boost up to 5 Pages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Boost up to 5 Pages"
        }

        return NSLocalizedString("Boost up to 5 Pages", bundle: bundle, comment: "")
      }

      /// en translation: Boost up to 60 Pages
      ///
      /// Locales: en, tr
      static func boostUpTo60Pages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Boost up to 60 Pages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Boost up to 60 Pages"
        }

        return NSLocalizedString("Boost up to 60 Pages", bundle: bundle, comment: "")
      }

      /// en translation: Boost upto 20 posts
      ///
      /// Locales: en, tr
      static func boostUpto20Posts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Boost upto 20 posts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Boost upto 20 posts"
        }

        return NSLocalizedString("Boost upto 20 posts", bundle: bundle, comment: "")
      }

      /// en translation: Boost upto 5 posts
      ///
      /// Locales: en, tr
      static func boostUpto5Posts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Boost upto 5 posts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Boost upto 5 posts"
        }

        return NSLocalizedString("Boost upto 5 posts", bundle: bundle, comment: "")
      }

      /// en translation: Boost upto 60 posts
      ///
      /// Locales: en, tr
      static func boostUpto60Posts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Boost upto 60 posts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Boost upto 60 posts"
        }

        return NSLocalizedString("Boost upto 60 posts", bundle: bundle, comment: "")
      }

      /// en translation: Boosts Page
      ///
      /// Locales: en, tr
      static func boostsPage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Boosts Page", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Boosts Page"
        }

        return NSLocalizedString("Boosts Page", bundle: bundle, comment: "")
      }

      /// en translation: Business Operations
      ///
      /// Locales: en, tr
      static func businessOperations(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Business Operations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Business Operations"
        }

        return NSLocalizedString("Business Operations", bundle: bundle, comment: "")
      }

      /// en translation: Buy
      ///
      /// Locales: en, tr
      static func buy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Buy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Buy"
        }

        return NSLocalizedString("Buy", bundle: bundle, comment: "")
      }

      /// en translation: CANCEL
      ///
      /// Locales: en, tr
      static func canceL(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CANCEL", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CANCEL"
        }

        return NSLocalizedString("CANCEL", bundle: bundle, comment: "")
      }

      /// en translation: COMMENTS
      ///
      /// Locales: en
      static func commentS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("COMMENTS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "COMMENTS"
        }

        return NSLocalizedString("COMMENTS", bundle: bundle, comment: "")
      }

      /// en translation: CONTINUE
      ///
      /// Locales: en, tr
      static func continuE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CONTINUE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CONTINUE"
        }

        return NSLocalizedString("CONTINUE", bundle: bundle, comment: "")
      }

      /// en translation: Cache Removed
      ///
      /// Locales: en, tr
      static func cacheRemoved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cache Removed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cache Removed"
        }

        return NSLocalizedString("Cache Removed", bundle: bundle, comment: "")
      }

      /// en translation: Call to action
      ///
      /// Locales: en, tr
      static func callToAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Call to action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Call to action"
        }

        return NSLocalizedString("Call to action", bundle: bundle, comment: "")
      }

      /// en translation: Call to target url
      ///
      /// Locales: en, tr
      static func callToTargetUrl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Call to target url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Call to target url"
        }

        return NSLocalizedString("Call to target url", bundle: bundle, comment: "")
      }

      /// en translation: Calling
      ///
      /// Locales: en
      static func calling(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Calling", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Calling"
        }

        return NSLocalizedString("Calling", bundle: bundle, comment: "")
      }

      /// en translation: Camera
      ///
      /// Locales: en, tr
      static func camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Camera"
        }

        return NSLocalizedString("Camera", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, tr
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cars and Vehicles
      ///
      /// Locales: en, tr
      static func carsAndVehicles(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cars and Vehicles", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cars and Vehicles"
        }

        return NSLocalizedString("Cars and Vehicles", bundle: bundle, comment: "")
      }

      /// en translation: Categories
      ///
      /// Locales: en, tr
      static func categories(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Categories", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Categories"
        }

        return NSLocalizedString("Categories", bundle: bundle, comment: "")
      }

      /// en translation: Category
      ///
      /// Locales: en, tr
      static func category(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Category", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Category"
        }

        return NSLocalizedString("Category", bundle: bundle, comment: "")
      }

      /// en translation: Change Image
      ///
      /// Locales: en, tr
      static func changeImage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change Image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change Image"
        }

        return NSLocalizedString("Change Image", bundle: bundle, comment: "")
      }

      /// en translation: Change Location
      ///
      /// Locales: en, tr
      static func changeLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change Location"
        }

        return NSLocalizedString("Change Location", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: en, tr
      static func changePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change Password"
        }

        return NSLocalizedString("Change Password", bundle: bundle, comment: "")
      }

      /// en translation: Change image avatar
      ///
      /// Locales: en, tr
      static func changeImageAvatar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change image avatar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change image avatar"
        }

        return NSLocalizedString("Change image avatar", bundle: bundle, comment: "")
      }

      /// en translation: Change image cover
      ///
      /// Locales: en, tr
      static func changeImageCover(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change image cover", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change image cover"
        }

        return NSLocalizedString("Change image cover", bundle: bundle, comment: "")
      }

      /// en translation: Change your Password
      ///
      /// Locales: en, tr
      static func changeYourPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change your Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change your Password"
        }

        return NSLocalizedString("Change your Password", bundle: bundle, comment: "")
      }

      /// en translation: Cleaning & Facilities
      ///
      /// Locales: en, tr
      static func cleaningFacilities(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cleaning & Facilities", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cleaning & Facilities"
        }

        return NSLocalizedString("Cleaning & Facilities", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: en, tr
      static func close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Close"
        }

        return NSLocalizedString("Close", bundle: bundle, comment: "")
      }

      /// en translation: Comedy
      ///
      /// Locales: en, tr
      static func comedy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Comedy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Comedy"
        }

        return NSLocalizedString("Comedy", bundle: bundle, comment: "")
      }

      /// en translation: Comment
      ///
      /// Locales: en, tr
      static func comment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Comment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Comment"
        }

        return NSLocalizedString("Comment", bundle: bundle, comment: "")
      }

      /// en translation: Comments
      ///
      /// Locales: en, tr
      static func comments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Comments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Comments"
        }

        return NSLocalizedString("Comments", bundle: bundle, comment: "")
      }

      /// en translation: Comments are disabled by
      ///
      /// Locales: en, tr
      static func commentsAreDisabledBy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Comments are disabled by", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Comments are disabled by"
        }

        return NSLocalizedString("Comments are disabled by", bundle: bundle, comment: "")
      }

      /// en translation: Common Things
      ///
      /// Locales: en, tr
      static func commonThings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common Things", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common Things"
        }

        return NSLocalizedString("Common Things", bundle: bundle, comment: "")
      }

      /// en translation: Community & Social Services
      ///
      /// Locales: en, tr
      static func communitySocialServices(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Community & Social Services", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Community & Social Services"
        }

        return NSLocalizedString("Community & Social Services", bundle: bundle, comment: "")
      }

      /// en translation: Company
      ///
      /// Locales: en, tr
      static func company(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Company", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Company"
        }

        return NSLocalizedString("Company", bundle: bundle, comment: "")
      }

      /// en translation: Computer & Data
      ///
      /// Locales: en, tr
      static func computerData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Computer & Data", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Computer & Data"
        }

        return NSLocalizedString("Computer & Data", bundle: bundle, comment: "")
      }

      /// en translation: Computers & Peripherals
      ///
      /// Locales: en, tr
      static func computersPeripherals(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Computers & Peripherals", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Computers & Peripherals"
        }

        return NSLocalizedString("Computers & Peripherals", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, tr
      static func confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirm"
        }

        return NSLocalizedString("Confirm", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Password
      ///
      /// Locales: en, tr
      static func confirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirm Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirm Password"
        }

        return NSLocalizedString("Confirm Password", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Request
      ///
      /// Locales: en, tr
      static func confirmRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirm Request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirm Request"
        }

        return NSLocalizedString("Confirm Request", bundle: bundle, comment: "")
      }

      /// en translation: Confirm when someone joining this group ?
      ///
      /// Locales: en, tr
      static func confirmWhenSomeoneJoiningThisGroup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirm when someone joining this group ?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirm when someone joining this group ?"
        }

        return NSLocalizedString("Confirm when someone joining this group ?", bundle: bundle, comment: "")
      }

      /// en translation: Confirmation Code
      ///
      /// Locales: en, tr
      static func confirmationCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirmation Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirmation Code"
        }

        return NSLocalizedString("Confirmation Code", bundle: bundle, comment: "")
      }

      /// en translation: Construction & Mining
      ///
      /// Locales: en, tr
      static func constructionMining(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Construction & Mining", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Construction & Mining"
        }

        return NSLocalizedString("Construction & Mining", bundle: bundle, comment: "")
      }

      /// en translation: Consumer Electronics
      ///
      /// Locales: en, tr
      static func consumerElectronics(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Consumer Electronics", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Consumer Electronics"
        }

        return NSLocalizedString("Consumer Electronics", bundle: bundle, comment: "")
      }

      /// en translation: Contact
      ///
      /// Locales: en, tr
      static func contact(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Contact", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Contact"
        }

        return NSLocalizedString("Contact", bundle: bundle, comment: "")
      }

      /// en translation: Continue with Facebook
      ///
      /// Locales: en, tr
      static func continueWithFacebook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Continue with Facebook", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Continue with Facebook"
        }

        return NSLocalizedString("Continue with Facebook", bundle: bundle, comment: "")
      }

      /// en translation: Conversation Tones
      ///
      /// Locales: en, tr
      static func conversationTones(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Conversation Tones", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Conversation Tones"
        }

        return NSLocalizedString("Conversation Tones", bundle: bundle, comment: "")
      }

      /// en translation: Copied
      ///
      /// Locales: en, tr
      static func copied(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Copied", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Copied"
        }

        return NSLocalizedString("Copied", bundle: bundle, comment: "")
      }

      /// en translation: Copy
      ///
      /// Locales: en, tr
      static func copy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Copy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Copy"
        }

        return NSLocalizedString("Copy", bundle: bundle, comment: "")
      }

      /// en translation: Copy Link
      ///
      /// Locales: en, tr
      static func copyLink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Copy Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Copy Link"
        }

        return NSLocalizedString("Copy Link", bundle: bundle, comment: "")
      }

      /// en translation: Copy Link to profile
      ///
      /// Locales: en, tr
      static func copyLinkToProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Copy Link to profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Copy Link to profile"
        }

        return NSLocalizedString("Copy Link to profile", bundle: bundle, comment: "")
      }

      /// en translation: Copy Text
      ///
      /// Locales: en, tr
      static func copyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Copy Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Copy Text"
        }

        return NSLocalizedString("Copy Text", bundle: bundle, comment: "")
      }

      /// en translation: Copy to clipboard
      ///
      /// Locales: en, tr
      static func copyToClipboard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Copy to clipboard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Copy to clipboard"
        }

        return NSLocalizedString("Copy to clipboard", bundle: bundle, comment: "")
      }

      /// en translation: Cover
      ///
      /// Locales: en, tr
      static func cover(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cover", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cover"
        }

        return NSLocalizedString("Cover", bundle: bundle, comment: "")
      }

      /// en translation: Create
      ///
      /// Locales: en, tr
      static func create(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Create", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Create"
        }

        return NSLocalizedString("Create", bundle: bundle, comment: "")
      }

      /// en translation: Create Account Sign Up
      ///
      /// Locales: en, tr
      static func createAccountSignUp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Create Account Sign Up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Create Account Sign Up"
        }

        return NSLocalizedString("Create Account Sign Up", bundle: bundle, comment: "")
      }

      /// en translation: Create Event
      ///
      /// Locales: en, tr
      static func createEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Create Event", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Create Event"
        }

        return NSLocalizedString("Create Event", bundle: bundle, comment: "")
      }

      /// en translation: Create Live Video
      ///
      /// Locales: en, tr
      static func createLiveVideo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Create Live Video", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Create Live Video"
        }

        return NSLocalizedString("Create Live Video", bundle: bundle, comment: "")
      }

      /// en translation: Create New Group
      ///
      /// Locales: en, tr
      static func createNewGroup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Create New Group", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Create New Group"
        }

        return NSLocalizedString("Create New Group", bundle: bundle, comment: "")
      }

      /// en translation: Create New Page
      ///
      /// Locales: en, tr
      static func createNewPage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Create New Page", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Create New Page"
        }

        return NSLocalizedString("Create New Page", bundle: bundle, comment: "")
      }

      /// en translation: Create New Product
      ///
      /// Locales: en, tr
      static func createNewProduct(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Create New Product", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Create New Product"
        }

        return NSLocalizedString("Create New Product", bundle: bundle, comment: "")
      }

      /// en translation: Create Playlist
      ///
      /// Locales: en, tr
      static func createPlaylist(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Create Playlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Create Playlist"
        }

        return NSLocalizedString("Create Playlist", bundle: bundle, comment: "")
      }

      /// en translation: Create a Job
      ///
      /// Locales: en, tr
      static func createAJob(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Create a Job", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Create a Job"
        }

        return NSLocalizedString("Create a Job", bundle: bundle, comment: "")
      }

      /// en translation: Currency
      ///
      /// Locales: en, tr
      static func currency(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Currency", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Currency"
        }

        return NSLocalizedString("Currency", bundle: bundle, comment: "")
      }

      /// en translation: Current Balance
      ///
      /// Locales: en, tr
      static func currentBalance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Current Balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Current Balance"
        }

        return NSLocalizedString("Current Balance", bundle: bundle, comment: "")
      }

      /// en translation: Current Password
      ///
      /// Locales: en, tr
      static func currentPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Current Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Current Password"
        }

        return NSLocalizedString("Current Password", bundle: bundle, comment: "")
      }

      /// en translation: DONATE
      ///
      /// Locales: en, tr
      static func donatE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DONATE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DONATE"
        }

        return NSLocalizedString("DONATE", bundle: bundle, comment: "")
      }

      /// en translation: Dark mode
      ///
      /// Locales: en, tr
      static func darkMode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dark mode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Dark mode"
        }

        return NSLocalizedString("Dark mode", bundle: bundle, comment: "")
      }

      /// en translation: Date
      ///
      /// Locales: en, tr
      static func date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Date"
        }

        return NSLocalizedString("Date", bundle: bundle, comment: "")
      }

      /// en translation: Dating Services
      ///
      /// Locales: en, tr
      static func datingServices(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dating Services", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Dating Services"
        }

        return NSLocalizedString("Dating Services", bundle: bundle, comment: "")
      }

      /// en translation: Decline
      ///
      /// Locales: en
      static func decline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Decline", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Decline"
        }

        return NSLocalizedString("Decline", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en, tr
      static func delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete"
        }

        return NSLocalizedString("Delete", bundle: bundle, comment: "")
      }

      /// en translation: Delete Account
      ///
      /// Locales: en, tr
      static func deleteAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete Account"
        }

        return NSLocalizedString("Delete Account", bundle: bundle, comment: "")
      }

      /// en translation: Delete Group
      ///
      /// Locales: en, tr
      static func deleteGroup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete Group", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete Group"
        }

        return NSLocalizedString("Delete Group", bundle: bundle, comment: "")
      }

      /// en translation: Delete Post
      ///
      /// Locales: en, tr
      static func deletePost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete Post"
        }

        return NSLocalizedString("Delete Post", bundle: bundle, comment: "")
      }

      /// en translation: Delete a Page
      ///
      /// Locales: en, tr
      static func deleteAPage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete a Page", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete a Page"
        }

        return NSLocalizedString("Delete a Page", bundle: bundle, comment: "")
      }

      /// en translation: Describe Your Group
      ///
      /// Locales: en, tr
      static func describeYourGroup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Describe Your Group", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Describe Your Group"
        }

        return NSLocalizedString("Describe Your Group", bundle: bundle, comment: "")
      }

      /// en translation: Describe Your Page
      ///
      /// Locales: en, tr
      static func describeYourPage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Describe Your Page", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Describe Your Page"
        }

        return NSLocalizedString("Describe Your Page", bundle: bundle, comment: "")
      }

      /// en translation: Description
      ///
      /// Locales: en, tr
      static func description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Description"
        }

        return NSLocalizedString("Description", bundle: bundle, comment: "")
      }

      /// en translation: Dicover more features with Playtube Pro Package
      ///
      /// Locales: en, tr
      static func dicoverMoreFeaturesWithPlaytubeProPackage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dicover more features with Playtube Pro Package", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Dicover more features with Playtube Pro Package"
        }

        return NSLocalizedString("Dicover more features with Playtube Pro Package", bundle: bundle, comment: "")
      }

      /// en translation: Disable
      ///
      /// Locales: en, tr
      static func disable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Disable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Disable"
        }

        return NSLocalizedString("Disable", bundle: bundle, comment: "")
      }

      /// en translation: Disable Comments
      ///
      /// Locales: en, tr
      static func disableComments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Disable Comments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Disable Comments"
        }

        return NSLocalizedString("Disable Comments", bundle: bundle, comment: "")
      }

      /// en translation: Discount
      ///
      /// Locales: en, tr
      static func discount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Discount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Discount"
        }

        return NSLocalizedString("Discount", bundle: bundle, comment: "")
      }

      /// en translation: Discover
      ///
      /// Locales: en, tr
      static func discover(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Discover", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Discover"
        }

        return NSLocalizedString("Discover", bundle: bundle, comment: "")
      }

      /// en translation: Disliked
      ///
      /// Locales: en, tr
      static func disliked(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Disliked", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Disliked"
        }

        return NSLocalizedString("Disliked", bundle: bundle, comment: "")
      }

      /// en translation: Don't have access to use your microphone.
      ///
      /// Locales: en, tr
      static func donTHaveAccessToUseYourMicrophone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Don't have access to use your microphone.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Don't have access to use your microphone."
        }

        return NSLocalizedString("Don't have access to use your microphone.", bundle: bundle, comment: "")
      }

      /// en translation: Don't worry type your email here and we will recover it for you
      ///
      /// Locales: en, tr
      static func donTWorryTypeYourEmailHereAndWeWillRecoverItForYou(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Don't worry type your email here and we will recover it for you", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Don't worry type your email here and we will recover it for you"
        }

        return NSLocalizedString("Don't worry type your email here and we will recover it for you", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, tr
      static func done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Done"
        }

        return NSLocalizedString("Done", bundle: bundle, comment: "")
      }

      /// en translation: Downloads
      ///
      /// Locales: en, tr
      static func downloads(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Downloads", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Downloads"
        }

        return NSLocalizedString("Downloads", bundle: bundle, comment: "")
      }

      /// en translation: Earn 10 by commenting any post
      ///
      /// Locales: en, tr
      static func earn10ByCommentingAnyPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Earn 10 by commenting any post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Earn 10 by commenting any post"
        }

        return NSLocalizedString("Earn 10 by commenting any post", bundle: bundle, comment: "")
      }

      /// en translation: Earn 15 by creating a new blog
      ///
      /// Locales: en, tr
      static func earn15ByCreatingANewBlog(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Earn 15 by creating a new blog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Earn 15 by creating a new blog"
        }

        return NSLocalizedString("Earn 15 by creating a new blog", bundle: bundle, comment: "")
      }

      /// en translation: Earn 20 by creating new post
      ///
      /// Locales: en, tr
      static func earn20ByCreatingNewPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Earn 20 by creating new post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Earn 20 by creating new post"
        }

        return NSLocalizedString("Earn 20 by creating new post", bundle: bundle, comment: "")
      }

      /// en translation: Earn 5 by reacting on any post
      ///
      /// Locales: en, tr
      static func earn5ByReactingOnAnyPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Earn 5 by reacting on any post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Earn 5 by reacting on any post"
        }

        return NSLocalizedString("Earn 5 by reacting on any post", bundle: bundle, comment: "")
      }

      /// en translation: Earn up to 10$ for each user you refer to us!
      ///
      /// Locales: en, tr
      static func earnUpTo10ForEachUserYouReferToUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Earn up to 10$ for each user you refer to us!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Earn up to 10$ for each user you refer to us!"
        }

        return NSLocalizedString("Earn up to 10$ for each user you refer to us!", bundle: bundle, comment: "")
      }

      /// en translation: Earnings
      ///
      /// Locales: en, tr
      static func earnings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Earnings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Earnings"
        }

        return NSLocalizedString("Earnings", bundle: bundle, comment: "")
      }

      /// en translation: Economics & Trade
      ///
      /// Locales: en, tr
      static func economicsTrade(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Economics & Trade", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Economics & Trade"
        }

        return NSLocalizedString("Economics & Trade", bundle: bundle, comment: "")
      }

      /// en translation: Economics and Trade
      ///
      /// Locales: en, tr
      static func economicsAndTrade(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Economics and Trade", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Economics and Trade"
        }

        return NSLocalizedString("Economics and Trade", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: en, tr
      static func edit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit"
        }

        return NSLocalizedString("Edit", bundle: bundle, comment: "")
      }

      /// en translation: Edit Event
      ///
      /// Locales: en, tr
      static func editEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit Event", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit Event"
        }

        return NSLocalizedString("Edit Event", bundle: bundle, comment: "")
      }

      /// en translation: Edit Post
      ///
      /// Locales: en, tr
      static func editPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit Post"
        }

        return NSLocalizedString("Edit Post", bundle: bundle, comment: "")
      }

      /// en translation: Edit Profile
      ///
      /// Locales: en, tr
      static func editProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit Profile"
        }

        return NSLocalizedString("Edit Profile", bundle: bundle, comment: "")
      }

      /// en translation: Education
      ///
      /// Locales: en, tr
      static func education(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Education", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Education"
        }

        return NSLocalizedString("Education", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, tr
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email"
        }

        return NSLocalizedString("Email", bundle: bundle, comment: "")
      }

      /// en translation: Email or Username
      ///
      /// Locales: en, tr
      static func emailOrUsername(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email or Username", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email or Username"
        }

        return NSLocalizedString("Email or Username", bundle: bundle, comment: "")
      }

      /// en translation: Enable
      ///
      /// Locales: en, tr
      static func enable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enable"
        }

        return NSLocalizedString("Enable", bundle: bundle, comment: "")
      }

      /// en translation: Enable Comments
      ///
      /// Locales: en, tr
      static func enableComments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enable Comments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enable Comments"
        }

        return NSLocalizedString("Enable Comments", bundle: bundle, comment: "")
      }

      /// en translation: Enabled
      ///
      /// Locales: en, tr
      static func enabled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enabled", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enabled"
        }

        return NSLocalizedString("Enabled", bundle: bundle, comment: "")
      }

      /// en translation: End Date
      ///
      /// Locales: en, tr
      static func endDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("End Date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "End Date"
        }

        return NSLocalizedString("End Date", bundle: bundle, comment: "")
      }

      /// en translation: Engaged
      ///
      /// Locales: en, tr
      static func engaged(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Engaged", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Engaged"
        }

        return NSLocalizedString("Engaged", bundle: bundle, comment: "")
      }

      /// en translation: Enter Album-Name
      ///
      /// Locales: en, tr
      static func enterAlbumName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Album-Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Album-Name"
        }

        return NSLocalizedString("Enter Album-Name", bundle: bundle, comment: "")
      }

      /// en translation: Enter Amount
      ///
      /// Locales: en, tr
      static func enterAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Amount"
        }

        return NSLocalizedString("Enter Amount", bundle: bundle, comment: "")
      }

      /// en translation: Enter BusinessName
      ///
      /// Locales: en, tr
      static func enterBusinessName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter BusinessName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter BusinessName"
        }

        return NSLocalizedString("Enter BusinessName", bundle: bundle, comment: "")
      }

      /// en translation: Enter Category
      ///
      /// Locales: en, tr
      static func enterCategory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Category", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Category"
        }

        return NSLocalizedString("Enter Category", bundle: bundle, comment: "")
      }

      /// en translation: Enter Category name
      ///
      /// Locales: en, tr
      static func enterCategoryName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Category name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Category name"
        }

        return NSLocalizedString("Enter Category name", bundle: bundle, comment: "")
      }

      /// en translation: Enter Email
      ///
      /// Locales: en, tr
      static func enterEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Email"
        }

        return NSLocalizedString("Enter Email", bundle: bundle, comment: "")
      }

      /// en translation: Enter Event Description
      ///
      /// Locales: en, tr
      static func enterEventDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Event Description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Event Description"
        }

        return NSLocalizedString("Enter Event Description", bundle: bundle, comment: "")
      }

      /// en translation: Enter Event EndDate
      ///
      /// Locales: en, tr
      static func enterEventEndDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Event EndDate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Event EndDate"
        }

        return NSLocalizedString("Enter Event EndDate", bundle: bundle, comment: "")
      }

      /// en translation: Enter Event EndTime
      ///
      /// Locales: en, tr
      static func enterEventEndTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Event EndTime", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Event EndTime"
        }

        return NSLocalizedString("Enter Event EndTime", bundle: bundle, comment: "")
      }

      /// en translation: Enter Event Location
      ///
      /// Locales: en, tr
      static func enterEventLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Event Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Event Location"
        }

        return NSLocalizedString("Enter Event Location", bundle: bundle, comment: "")
      }

      /// en translation: Enter Event Name
      ///
      /// Locales: en, tr
      static func enterEventName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Event Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Event Name"
        }

        return NSLocalizedString("Enter Event Name", bundle: bundle, comment: "")
      }

      /// en translation: Enter Event StartDate
      ///
      /// Locales: en, tr
      static func enterEventStartDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Event StartDate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Event StartDate"
        }

        return NSLocalizedString("Enter Event StartDate", bundle: bundle, comment: "")
      }

      /// en translation: Enter Event StartTime
      ///
      /// Locales: en, tr
      static func enterEventStartTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Event StartTime", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Event StartTime"
        }

        return NSLocalizedString("Enter Event StartTime", bundle: bundle, comment: "")
      }

      /// en translation: Enter Group About
      ///
      /// Locales: en, tr
      static func enterGroupAbout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Group About", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Group About"
        }

        return NSLocalizedString("Enter Group About", bundle: bundle, comment: "")
      }

      /// en translation: Enter Group Name
      ///
      /// Locales: en, tr
      static func enterGroupName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Group Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Group Name"
        }

        return NSLocalizedString("Enter Group Name", bundle: bundle, comment: "")
      }

      /// en translation: Enter Group Url
      ///
      /// Locales: en, tr
      static func enterGroupUrl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Group Url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Group Url"
        }

        return NSLocalizedString("Enter Group Url", bundle: bundle, comment: "")
      }

      /// en translation: Enter License name
      ///
      /// Locales: en, tr
      static func enterLicenseName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter License name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter License name"
        }

        return NSLocalizedString("Enter License name", bundle: bundle, comment: "")
      }

      /// en translation: Enter Name
      ///
      /// Locales: en, tr
      static func enterName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Name"
        }

        return NSLocalizedString("Enter Name", bundle: bundle, comment: "")
      }

      /// en translation: Enter Page About
      ///
      /// Locales: en, tr
      static func enterPageAbout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Page About", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Page About"
        }

        return NSLocalizedString("Enter Page About", bundle: bundle, comment: "")
      }

      /// en translation: Enter Page Title
      ///
      /// Locales: en, tr
      static func enterPageTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Page Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Page Title"
        }

        return NSLocalizedString("Enter Page Title", bundle: bundle, comment: "")
      }

      /// en translation: Enter Page Url
      ///
      /// Locales: en, tr
      static func enterPageUrl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Page Url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Page Url"
        }

        return NSLocalizedString("Enter Page Url", bundle: bundle, comment: "")
      }

      /// en translation: Enter PhoneNumber
      ///
      /// Locales: en, tr
      static func enterPhoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter PhoneNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter PhoneNumber"
        }

        return NSLocalizedString("Enter PhoneNumber", bundle: bundle, comment: "")
      }

      /// en translation: Enter Price
      ///
      /// Locales: en, tr
      static func enterPrice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Price", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Price"
        }

        return NSLocalizedString("Enter Price", bundle: bundle, comment: "")
      }

      /// en translation: Enter Stream name
      ///
      /// Locales: en, tr
      static func enterStreamName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Stream name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Stream name"
        }

        return NSLocalizedString("Enter Stream name", bundle: bundle, comment: "")
      }

      /// en translation: Enter Tag
      ///
      /// Locales: en, tr
      static func enterTag(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Tag", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Tag"
        }

        return NSLocalizedString("Enter Tag", bundle: bundle, comment: "")
      }

      /// en translation: Enter Title
      ///
      /// Locales: en, tr
      static func enterTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Title"
        }

        return NSLocalizedString("Enter Title", bundle: bundle, comment: "")
      }

      /// en translation: Enter Website
      ///
      /// Locales: en, tr
      static func enterWebsite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Website", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Website"
        }

        return NSLocalizedString("Enter Website", bundle: bundle, comment: "")
      }

      /// en translation: Enter message
      ///
      /// Locales: en, tr
      static func enterMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter message"
        }

        return NSLocalizedString("Enter message", bundle: bundle, comment: "")
      }

      /// en translation: Enter password
      ///
      /// Locales: en, tr
      static func enterPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter password"
        }

        return NSLocalizedString("Enter password", bundle: bundle, comment: "")
      }

      /// en translation: Enter your Email
      ///
      /// Locales: en
      static func enterYourEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter your Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter your Email"
        }

        return NSLocalizedString("Enter your Email", bundle: bundle, comment: "")
      }

      /// en translation: Enter your Password
      ///
      /// Locales: en
      static func enterYourPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter your Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter your Password"
        }

        return NSLocalizedString("Enter your Password", bundle: bundle, comment: "")
      }

      /// en translation: Entertainment
      ///
      /// Locales: en, tr
      static func entertainment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Entertainment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Entertainment"
        }

        return NSLocalizedString("Entertainment", bundle: bundle, comment: "")
      }

      /// en translation: Error, Please select gender
      ///
      /// Locales: en, tr
      static func errorPleaseSelectGender(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error, Please select gender", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error, Please select gender"
        }

        return NSLocalizedString("Error, Please select gender", bundle: bundle, comment: "")
      }

      /// en translation: Error, Required ConfirmPassword
      ///
      /// Locales: en, tr
      static func errorRequiredConfirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error, Required ConfirmPassword", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error, Required ConfirmPassword"
        }

        return NSLocalizedString("Error, Required ConfirmPassword", bundle: bundle, comment: "")
      }

      /// en translation: Error, Required Email
      ///
      /// Locales: en, tr
      static func errorRequiredEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error, Required Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error, Required Email"
        }

        return NSLocalizedString("Error, Required Email", bundle: bundle, comment: "")
      }

      /// en translation: Error, Required FirstName
      ///
      /// Locales: en, tr
      static func errorRequiredFirstName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error, Required FirstName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error, Required FirstName"
        }

        return NSLocalizedString("Error, Required FirstName", bundle: bundle, comment: "")
      }

      /// en translation: Error, Required LastName
      ///
      /// Locales: en, tr
      static func errorRequiredLastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error, Required LastName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error, Required LastName"
        }

        return NSLocalizedString("Error, Required LastName", bundle: bundle, comment: "")
      }

      /// en translation: Error, Required Password
      ///
      /// Locales: en, tr
      static func errorRequiredPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error, Required Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error, Required Password"
        }

        return NSLocalizedString("Error, Required Password", bundle: bundle, comment: "")
      }

      /// en translation: Error, Required Username
      ///
      /// Locales: en, tr
      static func errorRequiredUsername(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error, Required Username", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error, Required Username"
        }

        return NSLocalizedString("Error, Required Username", bundle: bundle, comment: "")
      }

      /// en translation: Event Name
      ///
      /// Locales: en, tr
      static func eventName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Event Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Event Name"
        }

        return NSLocalizedString("Event Name", bundle: bundle, comment: "")
      }

      /// en translation: Events
      ///
      /// Locales: en, tr
      static func events(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Events", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Events"
        }

        return NSLocalizedString("Events", bundle: bundle, comment: "")
      }

      /// en translation: Everyone
      ///
      /// Locales: en, tr
      static func everyone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Everyone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Everyone"
        }

        return NSLocalizedString("Everyone", bundle: bundle, comment: "")
      }

      /// en translation: Exit Group
      ///
      /// Locales: en, tr
      static func exitGroup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Exit Group", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Exit Group"
        }

        return NSLocalizedString("Exit Group", bundle: bundle, comment: "")
      }

      /// en translation: Explore Articles
      ///
      /// Locales: en, tr
      static func exploreArticles(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Explore Articles", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Explore Articles"
        }

        return NSLocalizedString("Explore Articles", bundle: bundle, comment: "")
      }

      /// en translation: Explore Groups
      ///
      /// Locales: en, tr
      static func exploreGroups(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Explore Groups", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Explore Groups"
        }

        return NSLocalizedString("Explore Groups", bundle: bundle, comment: "")
      }

      /// en translation: Explore Pages
      ///
      /// Locales: en, tr
      static func explorePages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Explore Pages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Explore Pages"
        }

        return NSLocalizedString("Explore Pages", bundle: bundle, comment: "")
      }

      /// en translation: FEMALE
      ///
      /// Locales: en, tr
      static func famalE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FAMALE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "FAMALE"
        }

        return NSLocalizedString("FAMALE", bundle: bundle, comment: "")
      }

      /// en translation: Facebook
      ///
      /// Locales: en, tr
      static func facebook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Facebook", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Facebook"
        }

        return NSLocalizedString("Facebook", bundle: bundle, comment: "")
      }

      /// en translation: Farming & Forestry
      ///
      /// Locales: en, tr
      static func farmingForestry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Farming & Forestry", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Farming & Forestry"
        }

        return NSLocalizedString("Farming & Forestry", bundle: bundle, comment: "")
      }

      /// en translation: Fast so we can take you to our space
      ///
      /// Locales: en, tr
      static func fastSoWeCanTakeYouToOurSpace(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Fast so we can take you to our space", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Fast so we can take you to our space"
        }

        return NSLocalizedString("Fast so we can take you to our space", bundle: bundle, comment: "")
      }

      /// en translation: Featured member
      ///
      /// Locales: en, tr
      static func featuredMember(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Featured member", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Featured member"
        }

        return NSLocalizedString("Featured member", bundle: bundle, comment: "")
      }

      /// en translation: Feeling/Activity
      ///
      /// Locales: en, tr
      static func feelingActivity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Feeling/Activity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Feeling/Activity"
        }

        return NSLocalizedString("Feeling/Activity", bundle: bundle, comment: "")
      }

      /// en translation: Female
      ///
      /// Locales: en, tr
      static func female(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Female", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Female"
        }

        return NSLocalizedString("Female", bundle: bundle, comment: "")
      }

      /// en translation: File
      ///
      /// Locales: en, tr
      static func file(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("File", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "File"
        }

        return NSLocalizedString("File", bundle: bundle, comment: "")
      }

      /// en translation: Filter
      ///
      /// Locales: en, tr
      static func filter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Filter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Filter"
        }

        return NSLocalizedString("Filter", bundle: bundle, comment: "")
      }

      /// en translation: Financial Services
      ///
      /// Locales: en, tr
      static func financialServices(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Financial Services", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Financial Services"
        }

        return NSLocalizedString("Financial Services", bundle: bundle, comment: "")
      }

      /// en translation: Find Friends
      ///
      /// Locales: en, tr
      static func findFriends(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Find Friends", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Find Friends"
        }

        return NSLocalizedString("Find Friends", bundle: bundle, comment: "")
      }

      /// en translation: Find a group by browsing top groups
      ///
      /// Locales: en, tr
      static func findAGroupByBrowsingTopGroups(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Find a group by browsing top groups", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Find a group by browsing top groups"
        }

        return NSLocalizedString("Find a group by browsing top groups", bundle: bundle, comment: "")
      }

      /// en translation: Find all invite request
      ///
      /// Locales: en, tr
      static func findAllInviteRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Find all invite request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Find all invite request"
        }

        return NSLocalizedString("Find all invite request", bundle: bundle, comment: "")
      }

      /// en translation: Find new friends and contacts
      ///
      /// Locales: en, tr
      static func findNewFriendsAndContacts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Find new friends and contacts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Find new friends and contacts"
        }

        return NSLocalizedString("Find new friends and contacts", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: en, tr
      static func firstName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("First Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "First Name"
        }

        return NSLocalizedString("First Name", bundle: bundle, comment: "")
      }

      /// en translation: Follow Privacy
      ///
      /// Locales: en, tr
      static func followPrivacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Follow Privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Follow Privacy"
        }

        return NSLocalizedString("Follow Privacy", bundle: bundle, comment: "")
      }

      /// en translation: Follow Request
      ///
      /// Locales: en, tr
      static func followRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Follow Request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Follow Request"
        }

        return NSLocalizedString("Follow Request", bundle: bundle, comment: "")
      }

      /// en translation: Follow Requests
      ///
      /// Locales: en, tr
      static func followRequests(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Follow Requests", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Follow Requests"
        }

        return NSLocalizedString("Follow Requests", bundle: bundle, comment: "")
      }

      /// en translation: Followers
      ///
      /// Locales: en, tr
      static func followers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Followers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Followers"
        }

        return NSLocalizedString("Followers", bundle: bundle, comment: "")
      }

      /// en translation: Forget your Password
      ///
      /// Locales: en, tr
      static func forgetYourPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Forget your Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Forget your Password"
        }

        return NSLocalizedString("Forget your Password", bundle: bundle, comment: "")
      }

      /// en translation: Forgot Password?
      ///
      /// Locales: en
      static func forgotPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Forgot Password?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Forgot Password?"
        }

        return NSLocalizedString("Forgot Password?", bundle: bundle, comment: "")
      }

      /// en translation: Friends Privacy
      ///
      /// Locales: en, tr
      static func friendsPrivacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Friends Privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Friends Privacy"
        }

        return NSLocalizedString("Friends Privacy", bundle: bundle, comment: "")
      }

      /// en translation: From Date
      ///
      /// Locales: en, tr
      static func fromDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("From Date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "From Date"
        }

        return NSLocalizedString("From Date", bundle: bundle, comment: "")
      }

      /// en translation: Funding
      ///
      /// Locales: en, tr
      static func funding(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Funding", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Funding"
        }

        return NSLocalizedString("Funding", bundle: bundle, comment: "")
      }

      /// en translation: Fundings
      ///
      /// Locales: en, tr
      static func fundings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Fundings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Fundings"
        }

        return NSLocalizedString("Fundings", bundle: bundle, comment: "")
      }

      /// en translation: GAMES
      ///
      /// Locales: en, tr
      static func gameS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GAMES", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "GAMES"
        }

        return NSLocalizedString("GAMES", bundle: bundle, comment: "")
      }

      /// en translation: GIF
      ///
      /// Locales: en, tr
      static func giF(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GIF", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "GIF"
        }

        return NSLocalizedString("GIF", bundle: bundle, comment: "")
      }

      /// en translation: GROUPS
      ///
      /// Locales: en, tr
      static func groupS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GROUPS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "GROUPS"
        }

        return NSLocalizedString("GROUPS", bundle: bundle, comment: "")
      }

      /// en translation: Games
      ///
      /// Locales: en, tr
      static func games(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Games", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Games"
        }

        return NSLocalizedString("Games", bundle: bundle, comment: "")
      }

      /// en translation: Gaming
      ///
      /// Locales: en, tr
      static func gaming(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gaming", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Gaming"
        }

        return NSLocalizedString("Gaming", bundle: bundle, comment: "")
      }

      /// en translation: Gender
      ///
      /// Locales: en, tr
      static func gender(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gender", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Gender"
        }

        return NSLocalizedString("Gender", bundle: bundle, comment: "")
      }

      /// en translation: General
      ///
      /// Locales: en, tr
      static func general(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("General", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "General"
        }

        return NSLocalizedString("General", bundle: bundle, comment: "")
      }

      /// en translation: General Account
      ///
      /// Locales: en, tr
      static func generalAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("General Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "General Account"
        }

        return NSLocalizedString("General Account", bundle: bundle, comment: "")
      }

      /// en translation: Get articles by categories
      ///
      /// Locales: en, tr
      static func getArticlesByCategories(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Get articles by categories", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Get articles by categories"
        }

        return NSLocalizedString("Get articles by categories", bundle: bundle, comment: "")
      }

      /// en translation: Get the conversation started by leaving the first comment
      ///
      /// Locales: en, tr
      static func getTheConversationStartedByLeavingTheFirstComment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Get the conversation started by leaving the first comment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Get the conversation started by leaving the first comment"
        }

        return NSLocalizedString("Get the conversation started by leaving the first comment", bundle: bundle, comment: "")
      }

      /// en translation: Gifts & Occasions
      ///
      /// Locales: en, tr
      static func giftsOccasions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gifts & Occasions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Gifts & Occasions"
        }

        return NSLocalizedString("Gifts & Occasions", bundle: bundle, comment: "")
      }

      /// en translation: Go
      ///
      /// Locales: en, tr
      static func go(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Go", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Go"
        }

        return NSLocalizedString("Go", bundle: bundle, comment: "")
      }

      /// en translation: Go Live
      ///
      /// Locales: en, tr
      static func goLive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Go Live", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Go Live"
        }

        return NSLocalizedString("Go Live", bundle: bundle, comment: "")
      }

      /// en translation: Go to Settings
      ///
      /// Locales: en, tr
      static func goToSettings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Go to Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Go to Settings"
        }

        return NSLocalizedString("Go to Settings", bundle: bundle, comment: "")
      }

      /// en translation: GoPro
      ///
      /// Locales: en, tr
      static func goPro(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GoPro", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "GoPro"
        }

        return NSLocalizedString("GoPro", bundle: bundle, comment: "")
      }

      /// en translation: Going
      ///
      /// Locales: en, tr
      static func going(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Going", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Going"
        }

        return NSLocalizedString("Going", bundle: bundle, comment: "")
      }

      /// en translation: Going People
      ///
      /// Locales: en, tr
      static func goingPeople(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Going People", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Going People"
        }

        return NSLocalizedString("Going People", bundle: bundle, comment: "")
      }

      /// en translation: Group Members
      ///
      /// Locales: en, tr
      static func groupMembers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Group Members", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Group Members"
        }

        return NSLocalizedString("Group Members", bundle: bundle, comment: "")
      }

      /// en translation: Group Name
      ///
      /// Locales: en, tr
      static func groupName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Group Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Group Name"
        }

        return NSLocalizedString("Group Name", bundle: bundle, comment: "")
      }

      /// en translation: Group Request
      ///
      /// Locales: en, tr
      static func groupRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Group Request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Group Request"
        }

        return NSLocalizedString("Group Request", bundle: bundle, comment: "")
      }

      /// en translation: Group Title
      ///
      /// Locales: en, tr
      static func groupTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Group Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Group Title"
        }

        return NSLocalizedString("Group Title", bundle: bundle, comment: "")
      }

      /// en translation: Group URL
      ///
      /// Locales: en, tr
      static func groupURL(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Group URL", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Group URL"
        }

        return NSLocalizedString("Group URL", bundle: bundle, comment: "")
      }

      /// en translation: Group Username
      ///
      /// Locales: en, tr
      static func groupUsername(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Group Username", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Group Username"
        }

        return NSLocalizedString("Group Username", bundle: bundle, comment: "")
      }

      /// en translation: Groups
      ///
      /// Locales: en, tr
      static func groups(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Groups", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Groups"
        }

        return NSLocalizedString("Groups", bundle: bundle, comment: "")
      }

      /// en translation: Haha
      ///
      /// Locales: en, tr
      static func haha(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Haha", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Haha"
        }

        return NSLocalizedString("Haha", bundle: bundle, comment: "")
      }

      /// en translation: Hang Up
      ///
      /// Locales: en
      static func hangUp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hang Up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Hang Up"
        }

        return NSLocalizedString("Hang Up", bundle: bundle, comment: "")
      }

      /// en translation: Healthcare
      ///
      /// Locales: en, tr
      static func healthcare(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Healthcare", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Healthcare"
        }

        return NSLocalizedString("Healthcare", bundle: bundle, comment: "")
      }

      /// en translation: Help
      ///
      /// Locales: en, tr
      static func help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Help", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Help"
        }

        return NSLocalizedString("Help", bundle: bundle, comment: "")
      }

      /// en translation: Help & Support
      ///
      /// Locales: en, tr
      static func helpSupport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Help & Support", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Help & Support"
        }

        return NSLocalizedString("Help & Support", bundle: bundle, comment: "")
      }

      /// en translation: Help Center
      ///
      /// Locales: en, tr
      static func helpCenter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Help Center", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Help Center"
        }

        return NSLocalizedString("Help Center", bundle: bundle, comment: "")
      }

      /// en translation: Help and Report Center
      ///
      /// Locales: en, tr
      static func helpAndReportCenter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Help and Report Center", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Help and Report Center"
        }

        return NSLocalizedString("Help and Report Center", bundle: bundle, comment: "")
      }

      /// en translation: Help and Support
      ///
      /// Locales: en, tr
      static func helpAndSupport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Help and Support", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Help and Support"
        }

        return NSLocalizedString("Help and Support", bundle: bundle, comment: "")
      }

      /// en translation: Hi! there i am using WoWonder Messenger
      ///
      /// Locales: en, tr
      static func hiThereIAmUsingWoWonderMessenger(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hi! there i am using WoWonder Messenger", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Hi! there i am using WoWonder Messenger"
        }

        return NSLocalizedString("Hi! there i am using WoWonder Messenger", bundle: bundle, comment: "")
      }

      /// en translation: History and Facts
      ///
      /// Locales: en, tr
      static func historyAndFacts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("History and Facts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "History and Facts"
        }

        return NSLocalizedString("History and Facts", bundle: bundle, comment: "")
      }

      /// en translation: Home & Garden
      ///
      /// Locales: en, tr
      static func homeGarden(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home & Garden", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home & Garden"
        }

        return NSLocalizedString("Home & Garden", bundle: bundle, comment: "")
      }

      /// en translation: I Agree to
      ///
      /// Locales: en, tr
      static func iAgreeTo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("I Agree to", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "I Agree to"
        }

        return NSLocalizedString("I Agree to", bundle: bundle, comment: "")
      }

      /// en translation: If  you forgot your password, you can reset it from here.
      ///
      /// Locales: en, tr
      static func ifYouForgotYourPasswordYouCanResetItFromHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("If  you forgot your password, you can reset it from here.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "If  you forgot your password, you can reset it from here."
        }

        return NSLocalizedString("If  you forgot your password, you can reset it from here.", bundle: bundle, comment: "")
      }

      /// en translation: Image Gallery
      ///
      /// Locales: en, tr
      static func imageGallery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Image Gallery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Image Gallery"
        }

        return NSLocalizedString("Image Gallery", bundle: bundle, comment: "")
      }

      /// en translation: Image Type
      ///
      /// Locales: en, tr
      static func imageType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Image Type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Image Type"
        }

        return NSLocalizedString("Image Type", bundle: bundle, comment: "")
      }

      /// en translation: Import
      ///
      /// Locales: en, tr
      static func `import`(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Import", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Import"
        }

        return NSLocalizedString("Import", bundle: bundle, comment: "")
      }

      /// en translation: Import Video
      ///
      /// Locales: en, tr
      static func importVideo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Import Video", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Import Video"
        }

        return NSLocalizedString("Import Video", bundle: bundle, comment: "")
      }

      /// en translation: In a realtionship
      ///
      /// Locales: en, tr
      static func inARealtionship(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("In a realtionship", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "In a realtionship"
        }

        return NSLocalizedString("In a realtionship", bundle: bundle, comment: "")
      }

      /// en translation: Installation, Maintenance & Repair
      ///
      /// Locales: en, tr
      static func installationMaintenanceRepair(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Installation, Maintenance & Repair", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Installation, Maintenance & Repair"
        }

        return NSLocalizedString("Installation, Maintenance & Repair", bundle: bundle, comment: "")
      }

      /// en translation: InterNetError
      ///
      /// Locales: en, tr
      static func interNetError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("InterNetError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "InterNetError"
        }

        return NSLocalizedString("InterNetError", bundle: bundle, comment: "")
      }

      /// en translation: Internet Connection Failed
      ///
      /// Locales: en, tr
      static func internetConnectionFailed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Internet Connection Failed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Internet Connection Failed"
        }

        return NSLocalizedString("Internet Connection Failed", bundle: bundle, comment: "")
      }

      /// en translation: Intrested
      ///
      /// Locales: en, tr
      static func intrested(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Intrested", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Intrested"
        }

        return NSLocalizedString("Intrested", bundle: bundle, comment: "")
      }

      /// en translation: Intrested People
      ///
      /// Locales: en, tr
      static func intrestedPeople(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Intrested People", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Intrested People"
        }

        return NSLocalizedString("Intrested People", bundle: bundle, comment: "")
      }

      /// en translation: Invitation Links
      ///
      /// Locales: en, tr
      static func invitationLinks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Invitation Links", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Invitation Links"
        }

        return NSLocalizedString("Invitation Links", bundle: bundle, comment: "")
      }

      /// en translation: Invite Friends
      ///
      /// Locales: en, tr
      static func inviteFriends(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Invite Friends", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Invite Friends"
        }

        return NSLocalizedString("Invite Friends", bundle: bundle, comment: "")
      }

      /// en translation: JOIN GROUP
      ///
      /// Locales: en, tr
      static func joingrouP(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JOIN GROUP", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "JOIN GROUP"
        }

        return NSLocalizedString("JOIN GROUP", bundle: bundle, comment: "")
      }

      /// en translation: JOINED
      ///
      /// Locales: en, tr
      static func joineD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JOINED", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "JOINED"
        }

        return NSLocalizedString("JOINED", bundle: bundle, comment: "")
      }

      /// en translation: Job Title
      ///
      /// Locales: en, tr
      static func jobTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Job Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Job Title"
        }

        return NSLocalizedString("Job Title", bundle: bundle, comment: "")
      }

      /// en translation: Job Type
      ///
      /// Locales: en, tr
      static func jobType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Job Type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Job Type"
        }

        return NSLocalizedString("Job Type", bundle: bundle, comment: "")
      }

      /// en translation: Jobs
      ///
      /// Locales: en, tr
      static func jobs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Jobs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Jobs"
        }

        return NSLocalizedString("Jobs", bundle: bundle, comment: "")
      }

      /// en translation: Join
      ///
      /// Locales: en, tr
      static func join(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Join", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Join"
        }

        return NSLocalizedString("Join", bundle: bundle, comment: "")
      }

      /// en translation: Join Group
      ///
      /// Locales: en, tr
      static func joinGroup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Join Group", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Join Group"
        }

        return NSLocalizedString("Join Group", bundle: bundle, comment: "")
      }

      /// en translation: Join or start your Own Group
      ///
      /// Locales: en, tr
      static func joinOrStartYourOwnGroup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Join or start your Own Group", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Join or start your Own Group"
        }

        return NSLocalizedString("Join or start your Own Group", bundle: bundle, comment: "")
      }

      /// en translation: Joined
      ///
      /// Locales: en, tr
      static func joined(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Joined", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Joined"
        }

        return NSLocalizedString("Joined", bundle: bundle, comment: "")
      }

      /// en translation: Joined Group
      ///
      /// Locales: en, tr
      static func joinedGroup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Joined Group", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Joined Group"
        }

        return NSLocalizedString("Joined Group", bundle: bundle, comment: "")
      }

      /// en translation: Keep you conversation going from all devices
      ///
      /// Locales: en, tr
      static func keepYouConversationGoingFromAllDevices(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Keep you conversation going from all devices", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Keep you conversation going from all devices"
        }

        return NSLocalizedString("Keep you conversation going from all devices", bundle: bundle, comment: "")
      }

      /// en translation: Keyword should not be less than 4
      ///
      /// Locales: en, tr
      static func keywordShouldNotBeLessThan4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Keyword should not be less than 4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Keyword should not be less than 4"
        }

        return NSLocalizedString("Keyword should not be less than 4", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en
      static func label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Label"
        }

        return NSLocalizedString("Label", bundle: bundle, comment: "")
      }

      /// en translation: Last Activites
      ///
      /// Locales: en, tr
      static func lastActivites(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Last Activites", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Last Activites"
        }

        return NSLocalizedString("Last Activites", bundle: bundle, comment: "")
      }

      /// en translation: Last Name
      ///
      /// Locales: en, tr
      static func lastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Last Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Last Name"
        }

        return NSLocalizedString("Last Name", bundle: bundle, comment: "")
      }

      /// en translation: Last hour
      ///
      /// Locales: en, tr
      static func lastHour(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Last hour", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Last hour"
        }

        return NSLocalizedString("Last hour", bundle: bundle, comment: "")
      }

      /// en translation: Latest Videos
      ///
      /// Locales: en, tr
      static func latestVideos(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Latest Videos", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Latest Videos"
        }

        return NSLocalizedString("Latest Videos", bundle: bundle, comment: "")
      }

      /// en translation: Learn more
      ///
      /// Locales: en, tr
      static func learnMore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Learn more", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Learn more"
        }

        return NSLocalizedString("Learn more", bundle: bundle, comment: "")
      }

      /// en translation: Legal
      ///
      /// Locales: en, tr
      static func legal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Legal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Legal"
        }

        return NSLocalizedString("Legal", bundle: bundle, comment: "")
      }

      /// en translation: Let's get started!
      ///
      /// Locales: en, tr
      static func letSGetStarted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Let's get started!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Let's get started!"
        }

        return NSLocalizedString("Let's get started!", bundle: bundle, comment: "")
      }

      /// en translation: Library
      ///
      /// Locales: en, tr
      static func library(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Library", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Library"
        }

        return NSLocalizedString("Library", bundle: bundle, comment: "")
      }

      /// en translation: License Type
      ///
      /// Locales: en, tr
      static func licenseType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("License Type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "License Type"
        }

        return NSLocalizedString("License Type", bundle: bundle, comment: "")
      }

      /// en translation: Light mode
      ///
      /// Locales: en, tr
      static func lightMode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Light mode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Light mode"
        }

        return NSLocalizedString("Light mode", bundle: bundle, comment: "")
      }

      /// en translation: Like
      ///
      /// Locales: en, tr
      static func like(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Like", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Like"
        }

        return NSLocalizedString("Like", bundle: bundle, comment: "")
      }

      /// en translation: Liked
      ///
      /// Locales: en, tr
      static func liked(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Liked", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Liked"
        }

        return NSLocalizedString("Liked", bundle: bundle, comment: "")
      }

      /// en translation: Liked Pages
      ///
      /// Locales: en, tr
      static func likedPages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Liked Pages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Liked Pages"
        }

        return NSLocalizedString("Liked Pages", bundle: bundle, comment: "")
      }

      /// en translation: Liked Videos
      ///
      /// Locales: en, tr
      static func likedVideos(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Liked Videos", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Liked Videos"
        }

        return NSLocalizedString("Liked Videos", bundle: bundle, comment: "")
      }

      /// en translation: Likes
      ///
      /// Locales: en, tr
      static func likes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Likes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Likes"
        }

        return NSLocalizedString("Likes", bundle: bundle, comment: "")
      }

      /// en translation: Link copied to clipboard
      ///
      /// Locales: en, tr
      static func linkCopiedToClipboard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Link copied to clipboard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Link copied to clipboard"
        }

        return NSLocalizedString("Link copied to clipboard", bundle: bundle, comment: "")
      }

      /// en translation: Live
      ///
      /// Locales: en, tr
      static func live(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Live", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Live"
        }

        return NSLocalizedString("Live", bundle: bundle, comment: "")
      }

      /// en translation: Live Style
      ///
      /// Locales: en, tr
      static func liveStyle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Live Style", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Live Style"
        }

        return NSLocalizedString("Live Style", bundle: bundle, comment: "")
      }

      /// en translation: Loading
      ///
      /// Locales: en, tr
      static func loading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Loading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Loading"
        }

        return NSLocalizedString("Loading", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: en, tr
      static func location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Location"
        }

        return NSLocalizedString("Location", bundle: bundle, comment: "")
      }

      /// en translation: Location/Places
      ///
      /// Locales: en, tr
      static func locationPlaces(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Location/Places", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Location/Places"
        }

        return NSLocalizedString("Location/Places", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en, tr
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login"
        }

        return NSLocalizedString("Login", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: en, tr
      static func logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Logout"
        }

        return NSLocalizedString("Logout", bundle: bundle, comment: "")
      }

      /// en translation: Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.
      ///
      /// Locales: en
      static func loremIpsumDolorSitErElitLametConsectetaurCilliumAdipisicingPecuSedDoEiusmodTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationUllamcoLaborisNisiUtAliquipExEaCommodoConsequatDuisAuteIrureDolorInReprehenderitInVoluptateVelitEsseCillumDoloreEuFugiatNullaPariaturExcepteurSintOccaecatCupidatatNonProidentSuntInCulpaQuiOfficiaDeseruntMollitAnimIdEstLaborumNamLiberTeConscientToFactorTumPoenLegumOdioqueCiviuda(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda."
        }

        return NSLocalizedString("Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.", bundle: bundle, comment: "")
      }

      /// en translation: Love
      ///
      /// Locales: en, tr
      static func love(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Love", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Love"
        }

        return NSLocalizedString("Love", bundle: bundle, comment: "")
      }

      /// en translation: MALE
      ///
      /// Locales: en, tr
      static func malE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MALE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MALE"
        }

        return NSLocalizedString("MALE", bundle: bundle, comment: "")
      }

      /// en translation: MARKET
      ///
      /// Locales: en, tr
      static func markeT(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MARKET", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MARKET"
        }

        return NSLocalizedString("MARKET", bundle: bundle, comment: "")
      }

      /// en translation: MY BALANCE
      ///
      /// Locales: en, tr
      static func mybalancE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MY BALANCE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MY BALANCE"
        }

        return NSLocalizedString("MY BALANCE", bundle: bundle, comment: "")
      }

      /// en translation: MY EVENTS
      ///
      /// Locales: en, tr
      static func myeventS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MY EVENTS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MY EVENTS"
        }

        return NSLocalizedString("MY EVENTS", bundle: bundle, comment: "")
      }

      /// en translation: MY GAMES
      ///
      /// Locales: en, tr
      static func mygameS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MY GAMES", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MY GAMES"
        }

        return NSLocalizedString("MY GAMES", bundle: bundle, comment: "")
      }

      /// en translation: MY PRODUCTS
      ///
      /// Locales: en, tr
      static func myproductS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MY PRODUCTS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MY PRODUCTS"
        }

        return NSLocalizedString("MY PRODUCTS", bundle: bundle, comment: "")
      }

      /// en translation: Make your own album to save your special moment
      ///
      /// Locales: en, tr
      static func makeYourOwnAlbumToSaveYourSpecialMoment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Make your own album to save your special moment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Make your own album to save your special moment"
        }

        return NSLocalizedString("Make your own album to save your special moment", bundle: bundle, comment: "")
      }

      /// en translation: Male
      ///
      /// Locales: en, tr
      static func male(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Male", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Male"
        }

        return NSLocalizedString("Male", bundle: bundle, comment: "")
      }

      /// en translation: Manage Group
      ///
      /// Locales: en, tr
      static func manageGroup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Manage Group", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Manage Group"
        }

        return NSLocalizedString("Manage Group", bundle: bundle, comment: "")
      }

      /// en translation: Manage Page
      ///
      /// Locales: en, tr
      static func managePage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Manage Page", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Manage Page"
        }

        return NSLocalizedString("Manage Page", bundle: bundle, comment: "")
      }

      /// en translation: Manage Session
      ///
      /// Locales: en, tr
      static func manageSession(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Manage Session", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Manage Session"
        }

        return NSLocalizedString("Manage Session", bundle: bundle, comment: "")
      }

      /// en translation: Manage Sessions
      ///
      /// Locales: en, tr
      static func manageSessions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Manage Sessions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Manage Sessions"
        }

        return NSLocalizedString("Manage Sessions", bundle: bundle, comment: "")
      }

      /// en translation: Management
      ///
      /// Locales: en, tr
      static func management(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Management", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Management"
        }

        return NSLocalizedString("Management", bundle: bundle, comment: "")
      }

      /// en translation: Manufacturing
      ///
      /// Locales: en, tr
      static func manufacturing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Manufacturing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Manufacturing"
        }

        return NSLocalizedString("Manufacturing", bundle: bundle, comment: "")
      }

      /// en translation: MarketPlace
      ///
      /// Locales: en, tr
      static func marketPlace(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MarketPlace", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MarketPlace"
        }

        return NSLocalizedString("MarketPlace", bundle: bundle, comment: "")
      }

      /// en translation: Married
      ///
      /// Locales: en, tr
      static func married(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Married", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Married"
        }

        return NSLocalizedString("Married", bundle: bundle, comment: "")
      }

      /// en translation: Max
      ///
      /// Locales: en, tr
      static func max(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Max", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Max"
        }

        return NSLocalizedString("Max", bundle: bundle, comment: "")
      }

      /// en translation: Maximum
      ///
      /// Locales: en, tr
      static func maximum(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Maximum", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Maximum"
        }

        return NSLocalizedString("Maximum", bundle: bundle, comment: "")
      }

      /// en translation: Media & Communication
      ///
      /// Locales: en, tr
      static func mediaCommunication(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Media & Communication", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Media & Communication"
        }

        return NSLocalizedString("Media & Communication", bundle: bundle, comment: "")
      }

      /// en translation: Members
      ///
      /// Locales: en, tr
      static func members(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Members", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Members"
        }

        return NSLocalizedString("Members", bundle: bundle, comment: "")
      }

      /// en translation: Mention Contact
      ///
      /// Locales: en, tr
      static func mentionContact(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mention Contact", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mention Contact"
        }

        return NSLocalizedString("Mention Contact", bundle: bundle, comment: "")
      }

      /// en translation: Message Privacy
      ///
      /// Locales: en, tr
      static func messagePrivacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Message Privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Message Privacy"
        }

        return NSLocalizedString("Message Privacy", bundle: bundle, comment: "")
      }

      /// en translation: Messages
      ///
      /// Locales: en, tr
      static func messages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Messages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Messages"
        }

        return NSLocalizedString("Messages", bundle: bundle, comment: "")
      }

      /// en translation: Min
      ///
      /// Locales: en, tr
      static func min(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Min", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Min"
        }

        return NSLocalizedString("Min", bundle: bundle, comment: "")
      }

      /// en translation: Minimum
      ///
      /// Locales: en, tr
      static func minimum(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Minimum", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Minimum"
        }

        return NSLocalizedString("Minimum", bundle: bundle, comment: "")
      }

      /// en translation: Mobile
      ///
      /// Locales: en, tr
      static func mobile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mobile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mobile"
        }

        return NSLocalizedString("Mobile", bundle: bundle, comment: "")
      }

      /// en translation: Monitization
      ///
      /// Locales: en, tr
      static func monitization(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Monitization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Monitization"
        }

        return NSLocalizedString("Monitization", bundle: bundle, comment: "")
      }

      /// en translation: More
      ///
      /// Locales: en, tr
      static func more(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("More", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "More"
        }

        return NSLocalizedString("More", bundle: bundle, comment: "")
      }

      /// en translation: More Options
      ///
      /// Locales: en, tr
      static func moreOptions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("More Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "More Options"
        }

        return NSLocalizedString("More Options", bundle: bundle, comment: "")
      }

      /// en translation: Most Active
      ///
      /// Locales: en, tr
      static func mostActive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Most Active", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Most Active"
        }

        return NSLocalizedString("Most Active", bundle: bundle, comment: "")
      }

      /// en translation: Movies
      ///
      /// Locales: en, tr
      static func movies(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Movies", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Movies"
        }

        return NSLocalizedString("Movies", bundle: bundle, comment: "")
      }

      /// en translation: Movies & Animation
      ///
      /// Locales: en, tr
      static func moviesAnimation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Movies & Animation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Movies & Animation"
        }

        return NSLocalizedString("Movies & Animation", bundle: bundle, comment: "")
      }

      /// en translation: Music
      ///
      /// Locales: en, tr
      static func music(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Music", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Music"
        }

        return NSLocalizedString("Music", bundle: bundle, comment: "")
      }

      /// en translation: Mute
      ///
      /// Locales: en
      static func mute(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mute", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mute"
        }

        return NSLocalizedString("Mute", bundle: bundle, comment: "")
      }

      /// en translation: My Account
      ///
      /// Locales: en, tr
      static func myAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Account"
        }

        return NSLocalizedString("My Account", bundle: bundle, comment: "")
      }

      /// en translation: My Affiliates
      ///
      /// Locales: en, tr
      static func myAffiliates(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Affiliates", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Affiliates"
        }

        return NSLocalizedString("My Affiliates", bundle: bundle, comment: "")
      }

      /// en translation: My Balance
      ///
      /// Locales: en, tr
      static func myBalance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Balance"
        }

        return NSLocalizedString("My Balance", bundle: bundle, comment: "")
      }

      /// en translation: My Images
      ///
      /// Locales: en, tr
      static func myImages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Images", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Images"
        }

        return NSLocalizedString("My Images", bundle: bundle, comment: "")
      }

      /// en translation: My Points
      ///
      /// Locales: en, tr
      static func myPoints(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Points", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Points"
        }

        return NSLocalizedString("My Points", bundle: bundle, comment: "")
      }

      /// en translation: My Profile
      ///
      /// Locales: en, tr
      static func myProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Profile"
        }

        return NSLocalizedString("My Profile", bundle: bundle, comment: "")
      }

      /// en translation: My Videos
      ///
      /// Locales: en, tr
      static func myVideos(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Videos", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Videos"
        }

        return NSLocalizedString("My Videos", bundle: bundle, comment: "")
      }

      /// en translation: MyFriend
      ///
      /// Locales: en, tr
      static func myFriend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MyFriend", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MyFriend"
        }

        return NSLocalizedString("MyFriend", bundle: bundle, comment: "")
      }

      /// en translation: NO
      ///
      /// Locales: en, tr
      static func nO(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NO", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NO"
        }

        return NSLocalizedString("NO", bundle: bundle, comment: "")
      }

      /// en translation: Natural
      ///
      /// Locales: en, tr
      static func natural(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Natural", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Natural"
        }

        return NSLocalizedString("Natural", bundle: bundle, comment: "")
      }

      /// en translation: New Features
      ///
      /// Locales: en, tr
      static func newFeatures(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New Features", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New Features"
        }

        return NSLocalizedString("New Features", bundle: bundle, comment: "")
      }

      /// en translation: New Funding
      ///
      /// Locales: en, tr
      static func newFunding(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New Funding", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New Funding"
        }

        return NSLocalizedString("New Funding", bundle: bundle, comment: "")
      }

      /// en translation: New Password
      ///
      /// Locales: en, tr
      static func newPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New Password"
        }

        return NSLocalizedString("New Password", bundle: bundle, comment: "")
      }

      /// en translation: New Version
      ///
      /// Locales: en, tr
      static func newVersion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New Version", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New Version"
        }

        return NSLocalizedString("New Version", bundle: bundle, comment: "")
      }

      /// en translation: News and Politics
      ///
      /// Locales: en, tr
      static func newsAndPolitics(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("News and Politics", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "News and Politics"
        }

        return NSLocalizedString("News and Politics", bundle: bundle, comment: "")
      }

      /// en translation: Next To
      ///
      /// Locales: en, tr
      static func nextTo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Next To", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Next To"
        }

        return NSLocalizedString("Next To", bundle: bundle, comment: "")
      }

      /// en translation: No Comments Yet
      ///
      /// Locales: en, tr
      static func noCommentsYet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Comments Yet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Comments Yet"
        }

        return NSLocalizedString("No Comments Yet", bundle: bundle, comment: "")
      }

      /// en translation: No Comments to be displayed
      ///
      /// Locales: en, tr
      static func noCommentsToBeDisplayed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Comments to be displayed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Comments to be displayed"
        }

        return NSLocalizedString("No Comments to be displayed", bundle: bundle, comment: "")
      }

      /// en translation: No Joined Group Yet
      ///
      /// Locales: en, tr
      static func noJoinedGroupYet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Joined Group Yet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Joined Group Yet"
        }

        return NSLocalizedString("No Joined Group Yet", bundle: bundle, comment: "")
      }

      /// en translation: No Liked Pages
      ///
      /// Locales: en, tr
      static func noLikedPages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Liked Pages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Liked Pages"
        }

        return NSLocalizedString("No Liked Pages", bundle: bundle, comment: "")
      }

      /// en translation: No Notification yet
      ///
      /// Locales: en, tr
      static func noNotificationYet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Notification yet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Notification yet"
        }

        return NSLocalizedString("No Notification yet", bundle: bundle, comment: "")
      }

      /// en translation: No Notification!
      ///
      /// Locales: en, tr
      static func noNotification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Notification!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Notification!"
        }

        return NSLocalizedString("No Notification!", bundle: bundle, comment: "")
      }

      /// en translation: No Photos !!
      ///
      /// Locales: en, tr
      static func noPhotos(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Photos !!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Photos !!"
        }

        return NSLocalizedString("No Photos !!", bundle: bundle, comment: "")
      }

      /// en translation: No PlayList found
      ///
      /// Locales: en, tr
      static func noPlayListFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No PlayList found", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No PlayList found"
        }

        return NSLocalizedString("No PlayList found", bundle: bundle, comment: "")
      }

      /// en translation: No Playlist found for now!
      ///
      /// Locales: en, tr
      static func noPlaylistFoundForNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Playlist found for now!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Playlist found for now!"
        }

        return NSLocalizedString("No Playlist found for now!", bundle: bundle, comment: "")
      }

      /// en translation: No User to show.
      ///
      /// Locales: en, tr
      static func noUserToShow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No User to show.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No User to show."
        }

        return NSLocalizedString("No User to show.", bundle: bundle, comment: "")
      }

      /// en translation: No Video!!
      ///
      /// Locales: en, tr
      static func noVideo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Video!!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Video!!"
        }

        return NSLocalizedString("No Video!!", bundle: bundle, comment: "")
      }

      /// en translation: No activites found for now
      ///
      /// Locales: en, tr
      static func noActivitesFoundForNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No activites found for now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No activites found for now"
        }

        return NSLocalizedString("No activites found for now", bundle: bundle, comment: "")
      }

      /// en translation: No games!!
      ///
      /// Locales: en, tr
      static func noGames(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No games!!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No games!!"
        }

        return NSLocalizedString("No games!!", bundle: bundle, comment: "")
      }

      /// en translation: No more Messages
      ///
      /// Locales: en, tr
      static func noMoreMessages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No more Messages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No more Messages"
        }

        return NSLocalizedString("No more Messages", bundle: bundle, comment: "")
      }

      /// en translation: No paid videos found
      ///
      /// Locales: en, tr
      static func noPaidVideosFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No paid videos found", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No paid videos found"
        }

        return NSLocalizedString("No paid videos found", bundle: bundle, comment: "")
      }

      /// en translation: No videos found for now!
      ///
      /// Locales: en, tr
      static func noVideosFoundForNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No videos found for now!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No videos found for now!"
        }

        return NSLocalizedString("No videos found for now!", bundle: bundle, comment: "")
      }

      /// en translation: Nobody
      ///
      /// Locales: en, tr
      static func nobody(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Nobody", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Nobody"
        }

        return NSLocalizedString("Nobody", bundle: bundle, comment: "")
      }

      /// en translation: None
      ///
      /// Locales: en, tr
      static func none(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("None", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "None"
        }

        return NSLocalizedString("None", bundle: bundle, comment: "")
      }

      /// en translation: Not interested
      ///
      /// Locales: en, tr
      static func notInterested(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Not interested", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Not interested"
        }

        return NSLocalizedString("Not interested", bundle: bundle, comment: "")
      }

      /// en translation: Notification Popup
      ///
      /// Locales: en, tr
      static func notificationPopup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notification Popup", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notification Popup"
        }

        return NSLocalizedString("Notification Popup", bundle: bundle, comment: "")
      }

      /// en translation: Notifications
      ///
      /// Locales: en, tr
      static func notifications(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notifications", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notifications"
        }

        return NSLocalizedString("Notifications", bundle: bundle, comment: "")
      }

      /// en translation: OFFLINE
      ///
      /// Locales: en, tr
      static func offlinE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OFFLINE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OFFLINE"
        }

        return NSLocalizedString("OFFLINE", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, tr
      static func oK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OK"
        }

        return NSLocalizedString("OK", bundle: bundle, comment: "")
      }

      /// en translation: ONLINE
      ///
      /// Locales: en, tr
      static func onlinE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ONLINE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ONLINE"
        }

        return NSLocalizedString("ONLINE", bundle: bundle, comment: "")
      }

      /// en translation: Offer a Job
      ///
      /// Locales: en, tr
      static func offerAJob(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Offer a Job", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Offer a Job"
        }

        return NSLocalizedString("Offer a Job", bundle: bundle, comment: "")
      }

      /// en translation: Offers
      ///
      /// Locales: en, tr
      static func offers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Offers"
        }

        return NSLocalizedString("Offers", bundle: bundle, comment: "")
      }

      /// en translation: Offline
      ///
      /// Locales: en, tr
      static func offline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Offline", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Offline"
        }

        return NSLocalizedString("Offline", bundle: bundle, comment: "")
      }

      /// en translation: Offline Download
      ///
      /// Locales: en, tr
      static func offlineDownload(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Offline Download", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Offline Download"
        }

        return NSLocalizedString("Offline Download", bundle: bundle, comment: "")
      }

      /// en translation: Okay
      ///
      /// Locales: en
      static func okay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Okay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Okay"
        }

        return NSLocalizedString("Okay", bundle: bundle, comment: "")
      }

      /// en translation: Online
      ///
      /// Locales: en, tr
      static func online(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Online", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Online"
        }

        return NSLocalizedString("Online", bundle: bundle, comment: "")
      }

      /// en translation: Other
      ///
      /// Locales: en, tr
      static func other(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Other", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Other"
        }

        return NSLocalizedString("Other", bundle: bundle, comment: "")
      }

      /// en translation: Others
      ///
      /// Locales: en, tr
      static func others(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Others", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Others"
        }

        return NSLocalizedString("Others", bundle: bundle, comment: "")
      }

      /// en translation: PAGES
      ///
      /// Locales: en, tr
      static func pageS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PAGES", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PAGES"
        }

        return NSLocalizedString("PAGES", bundle: bundle, comment: "")
      }

      /// en translation: PLAYLISTS
      ///
      /// Locales: en, tr
      static func playlistS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PLAYLISTS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PLAYLISTS"
        }

        return NSLocalizedString("PLAYLISTS", bundle: bundle, comment: "")
      }

      /// en translation: Page Information
      ///
      /// Locales: en, tr
      static func pageInformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Page Information", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Page Information"
        }

        return NSLocalizedString("Page Information", bundle: bundle, comment: "")
      }

      /// en translation: Page Url
      ///
      /// Locales: en, tr
      static func pageUrl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Page Url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Page Url"
        }

        return NSLocalizedString("Page Url", bundle: bundle, comment: "")
      }

      /// en translation: Page Username
      ///
      /// Locales: en, tr
      static func pageUsername(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Page Username", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Page Username"
        }

        return NSLocalizedString("Page Username", bundle: bundle, comment: "")
      }

      /// en translation: Page name
      ///
      /// Locales: en, tr
      static func pageName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Page name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Page name"
        }

        return NSLocalizedString("Page name", bundle: bundle, comment: "")
      }

      /// en translation: Page title
      ///
      /// Locales: en, tr
      static func pageTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Page title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Page title"
        }

        return NSLocalizedString("Page title", bundle: bundle, comment: "")
      }

      /// en translation: Pages
      ///
      /// Locales: en, tr
      static func pages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pages"
        }

        return NSLocalizedString("Pages", bundle: bundle, comment: "")
      }

      /// en translation: Pages promotions
      ///
      /// Locales: en, tr
      static func pagesPromotions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pages promotions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pages promotions"
        }

        return NSLocalizedString("Pages promotions", bundle: bundle, comment: "")
      }

      /// en translation: Paid
      ///
      /// Locales: en, tr
      static func paid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Paid", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Paid"
        }

        return NSLocalizedString("Paid", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, tr
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password"
        }

        return NSLocalizedString("Password", bundle: bundle, comment: "")
      }

      /// en translation: PayNow
      ///
      /// Locales: en, tr
      static func payNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PayNow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PayNow"
        }

        return NSLocalizedString("PayNow", bundle: bundle, comment: "")
      }

      /// en translation: Paystack
      ///
      /// Locales: en, tr
      static func paystack(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Paystack", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Paystack"
        }

        return NSLocalizedString("Paystack", bundle: bundle, comment: "")
      }

      /// en translation: People Follow me
      ///
      /// Locales: en, tr
      static func peopleFollowMe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("People Follow me", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "People Follow me"
        }

        return NSLocalizedString("People Follow me", bundle: bundle, comment: "")
      }

      /// en translation: People and Nations
      ///
      /// Locales: en, tr
      static func peopleAndNations(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("People and Nations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "People and Nations"
        }

        return NSLocalizedString("People and Nations", bundle: bundle, comment: "")
      }

      /// en translation: People i Follow
      ///
      /// Locales: en, tr
      static func peopleIFollow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("People i Follow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "People i Follow"
        }

        return NSLocalizedString("People i Follow", bundle: bundle, comment: "")
      }

      /// en translation: Per Month
      ///
      /// Locales: en, tr
      static func perMonth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Per Month", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Per Month"
        }

        return NSLocalizedString("Per Month", bundle: bundle, comment: "")
      }

      /// en translation: Per Week
      ///
      /// Locales: en, tr
      static func perWeek(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Per Week", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Per Week"
        }

        return NSLocalizedString("Per Week", bundle: bundle, comment: "")
      }

      /// en translation: Per Year
      ///
      /// Locales: en, tr
      static func perYear(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Per Year", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Per Year"
        }

        return NSLocalizedString("Per Year", bundle: bundle, comment: "")
      }

      /// en translation: Personal Care
      ///
      /// Locales: en, tr
      static func personalCare(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Personal Care", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Personal Care"
        }

        return NSLocalizedString("Personal Care", bundle: bundle, comment: "")
      }

      /// en translation: Pets & Animals
      ///
      /// Locales: en, tr
      static func petsAnimals(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pets & Animals", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pets & Animals"
        }

        return NSLocalizedString("Pets & Animals", bundle: bundle, comment: "")
      }

      /// en translation: Phone
      ///
      /// Locales: en, tr
      static func phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Phone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Phone"
        }

        return NSLocalizedString("Phone", bundle: bundle, comment: "")
      }

      /// en translation: Photo Album
      ///
      /// Locales: en, tr
      static func photoAlbum(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Photo Album", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Photo Album"
        }

        return NSLocalizedString("Photo Album", bundle: bundle, comment: "")
      }

      /// en translation: Photos
      ///
      /// Locales: en, tr
      static func photos(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Photos", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Photos"
        }

        return NSLocalizedString("Photos", bundle: bundle, comment: "")
      }

      /// en translation: Pick Your Plan
      ///
      /// Locales: en, tr
      static func pickYourPlan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pick Your Plan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pick Your Plan"
        }

        return NSLocalizedString("Pick Your Plan", bundle: bundle, comment: "")
      }

      /// en translation: Places & Regions
      ///
      /// Locales: en, tr
      static func placesRegions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Places & Regions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Places & Regions"
        }

        return NSLocalizedString("Places & Regions", bundle: bundle, comment: "")
      }

      /// en translation: Play sounds for incoming and outgoing messages
      ///
      /// Locales: en, tr
      static func playSoundsForIncomingAndOutgoingMessages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Play sounds for incoming and outgoing messages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Play sounds for incoming and outgoing messages"
        }

        return NSLocalizedString("Play sounds for incoming and outgoing messages", bundle: bundle, comment: "")
      }

      /// en translation: Playlist
      ///
      /// Locales: en, tr
      static func playlist(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Playlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Playlist"
        }

        return NSLocalizedString("Playlist", bundle: bundle, comment: "")
      }

      /// en translation: Playlists
      ///
      /// Locales: en, tr
      static func playlists(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Playlists", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Playlists"
        }

        return NSLocalizedString("Playlists", bundle: bundle, comment: "")
      }

      /// en translation: Please Enter Email
      ///
      /// Locales: en, tr
      static func pleaseEnterEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please Enter Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please Enter Email"
        }

        return NSLocalizedString("Please Enter Email", bundle: bundle, comment: "")
      }

      /// en translation: Please Enter Paypal Email
      ///
      /// Locales: en, tr
      static func pleaseEnterPaypalEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please Enter Paypal Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please Enter Paypal Email"
        }

        return NSLocalizedString("Please Enter Paypal Email", bundle: bundle, comment: "")
      }

      /// en translation: Please Enter Valid Email Address
      ///
      /// Locales: en, tr
      static func pleaseEnterValidEmailAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please Enter Valid Email Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please Enter Valid Email Address"
        }

        return NSLocalizedString("Please Enter Valid Email Address", bundle: bundle, comment: "")
      }

      /// en translation: Please Enter Your Email
      ///
      /// Locales: en
      static func pleaseEnterYourEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please Enter Your Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please Enter Your Email"
        }

        return NSLocalizedString("Please Enter Your Email", bundle: bundle, comment: "")
      }

      /// en translation: Please Write your Full email address
      ///
      /// Locales: en
      static func pleaseWriteYourFullEmailAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please Write your Full email address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please Write your Full email address"
        }

        return NSLocalizedString("Please Write your Full email address", bundle: bundle, comment: "")
      }

      /// en translation: Please add Photo image
      ///
      /// Locales: en, tr
      static func pleaseAddPhotoImage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please add Photo image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please add Photo image"
        }

        return NSLocalizedString("Please add Photo image", bundle: bundle, comment: "")
      }

      /// en translation: Please add passport image
      ///
      /// Locales: en, tr
      static func pleaseAddPassportImage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please add passport image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please add passport image"
        }

        return NSLocalizedString("Please add passport image", bundle: bundle, comment: "")
      }

      /// en translation: Please enter Code
      ///
      /// Locales: en, tr
      static func pleaseEnterCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter Code"
        }

        return NSLocalizedString("Please enter Code", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a message.
      ///
      /// Locales: en, tr
      static func pleaseEnterAMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter a message.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter a message."
        }

        return NSLocalizedString("Please enter a message.", bundle: bundle, comment: "")
      }

      /// en translation: Please enter comment text
      ///
      /// Locales: en, tr
      static func pleaseEnterCommentText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter comment text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter comment text"
        }

        return NSLocalizedString("Please enter comment text", bundle: bundle, comment: "")
      }

      /// en translation: Please enter first name.
      ///
      /// Locales: en, tr
      static func pleaseEnterFirstName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter first name.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter first name."
        }

        return NSLocalizedString("Please enter first name.", bundle: bundle, comment: "")
      }

      /// en translation: Please enter last name.
      ///
      /// Locales: en, tr
      static func pleaseEnterLastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter last name.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter last name."
        }

        return NSLocalizedString("Please enter last name.", bundle: bundle, comment: "")
      }

      /// en translation: Please enter playlist description
      ///
      /// Locales: en, tr
      static func pleaseEnterPlaylistDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter playlist description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter playlist description"
        }

        return NSLocalizedString("Please enter playlist description", bundle: bundle, comment: "")
      }

      /// en translation: Please enter playlist name
      ///
      /// Locales: en, tr
      static func pleaseEnterPlaylistName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter playlist name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter playlist name"
        }

        return NSLocalizedString("Please enter playlist name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter text
      ///
      /// Locales: en, tr
      static func pleaseEnterText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter text"
        }

        return NSLocalizedString("Please enter text", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your confirmation code
      ///
      /// Locales: en, tr
      static func pleaseEnterYourConfirmationCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter your confirmation code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter your confirmation code"
        }

        return NSLocalizedString("Please enter your confirmation code", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your email address. You will receive a link to create  a new password.
      ///
      /// Locales: en
      static func pleaseEnterYourEmailAddressYouWillReceiveALinkToCreateANewPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter your email address. You will receive a link to create  a new password.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter your email address. You will receive a link to create  a new password."
        }

        return NSLocalizedString("Please enter your email address. You will receive a link to create  a new password.", bundle: bundle, comment: "")
      }

      /// en translation: Please read terms of services
      ///
      /// Locales: en, tr
      static func pleaseReadTermsOfServices(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please read terms of services", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please read terms of services"
        }

        return NSLocalizedString("Please read terms of services", bundle: bundle, comment: "")
      }

      /// en translation: Please select Sort By
      ///
      /// Locales: en, tr
      static func pleaseSelectSortBy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select Sort By", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select Sort By"
        }

        return NSLocalizedString("Please select Sort By", bundle: bundle, comment: "")
      }

      /// en translation: Please select Time By
      ///
      /// Locales: en, tr
      static func pleaseSelectTimeBy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select Time By", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select Time By"
        }

        return NSLocalizedString("Please select Time By", bundle: bundle, comment: "")
      }

      /// en translation: Please select atleast one media.
      ///
      /// Locales: en, tr
      static func pleaseSelectAtleastOneMedia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select atleast one media.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select atleast one media."
        }

        return NSLocalizedString("Please select atleast one media.", bundle: bundle, comment: "")
      }

      /// en translation: Please select recent picutre of your passport or id.
      ///
      /// Locales: en, tr
      static func pleaseSelectRecentPicutreOfYourPassportOrId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select recent picutre of your passport or id.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select recent picutre of your passport or id."
        }

        return NSLocalizedString("Please select recent picutre of your passport or id.", bundle: bundle, comment: "")
      }

      /// en translation: Please select the Terms & Conditions.
      ///
      /// Locales: en, tr
      static func pleaseSelectTheTermsConditions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select the Terms & Conditions.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select the Terms & Conditions."
        }

        return NSLocalizedString("Please select the Terms & Conditions.", bundle: bundle, comment: "")
      }

      /// en translation: Please type Comment
      ///
      /// Locales: en, tr
      static func pleaseTypeComment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please type Comment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please type Comment"
        }

        return NSLocalizedString("Please type Comment", bundle: bundle, comment: "")
      }

      /// en translation: Please write your email
      ///
      /// Locales: en, tr
      static func pleaseWriteYourEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please write your email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please write your email"
        }

        return NSLocalizedString("Please write your email", bundle: bundle, comment: "")
      }

      /// en translation: Please, enter stream name
      ///
      /// Locales: en, tr
      static func pleaseEnterStreamName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please, enter stream name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please, enter stream name"
        }

        return NSLocalizedString("Please, enter stream name", bundle: bundle, comment: "")
      }

      /// en translation: Points
      ///
      /// Locales: en, tr
      static func points(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Points", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Points"
        }

        return NSLocalizedString("Points", bundle: bundle, comment: "")
      }

      /// en translation: Poke Back
      ///
      /// Locales: en, tr
      static func pokeBack(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Poke Back", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Poke Back"
        }

        return NSLocalizedString("Poke Back", bundle: bundle, comment: "")
      }

      /// en translation: Pokes
      ///
      /// Locales: en, tr
      static func pokes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pokes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pokes"
        }

        return NSLocalizedString("Pokes", bundle: bundle, comment: "")
      }

      /// en translation: Popular Channel
      ///
      /// Locales: en, tr
      static func popularChannel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Popular Channel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Popular Channel"
        }

        return NSLocalizedString("Popular Channel", bundle: bundle, comment: "")
      }

      /// en translation: Popular Channels
      ///
      /// Locales: en, tr
      static func popularChannels(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Popular Channels", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Popular Channels"
        }

        return NSLocalizedString("Popular Channels", bundle: bundle, comment: "")
      }

      /// en translation: Popular Posts
      ///
      /// Locales: en, tr
      static func popularPosts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Popular Posts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Popular Posts"
        }

        return NSLocalizedString("Popular Posts", bundle: bundle, comment: "")
      }

      /// en translation: Position
      ///
      /// Locales: en, tr
      static func position(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Position", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Position"
        }

        return NSLocalizedString("Position", bundle: bundle, comment: "")
      }

      /// en translation: Post
      ///
      /// Locales: en, tr
      static func post(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Post"
        }

        return NSLocalizedString("Post", bundle: bundle, comment: "")
      }

      /// en translation: Post UnSaved
      ///
      /// Locales: en, tr
      static func postUnSaved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Post UnSaved", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Post UnSaved"
        }

        return NSLocalizedString("Post UnSaved", bundle: bundle, comment: "")
      }

      /// en translation: Posts promotion
      ///
      /// Locales: en, tr
      static func postsPromotion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Posts promotion", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Posts promotion"
        }

        return NSLocalizedString("Posts promotion", bundle: bundle, comment: "")
      }

      /// en translation: Price
      ///
      /// Locales: en, tr
      static func price(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Price", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Price"
        }

        return NSLocalizedString("Price", bundle: bundle, comment: "")
      }

      /// en translation: Price Max
      ///
      /// Locales: en, tr
      static func priceMax(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Price Max", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Price Max"
        }

        return NSLocalizedString("Price Max", bundle: bundle, comment: "")
      }

      /// en translation: Price Min
      ///
      /// Locales: en, tr
      static func priceMin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Price Min", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Price Min"
        }

        return NSLocalizedString("Price Min", bundle: bundle, comment: "")
      }

      /// en translation: Privacy
      ///
      /// Locales: en, tr
      static func privacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Privacy"
        }

        return NSLocalizedString("Privacy", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en, tr
      static func privacyPolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Privacy Policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Privacy Policy"
        }

        return NSLocalizedString("Privacy Policy", bundle: bundle, comment: "")
      }

      /// en translation: Pro Features give you Complete control over your Profile
      ///
      /// Locales: en, tr
      static func proFeaturesGiveYouCompleteControlOverYourProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pro Features give you Complete control over your Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pro Features give you Complete control over your Profile"
        }

        return NSLocalizedString("Pro Features give you Complete control over your Profile", bundle: bundle, comment: "")
      }

      /// en translation: Pro Users
      ///
      /// Locales: en, tr
      static func proUsers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pro Users", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pro Users"
        }

        return NSLocalizedString("Pro Users", bundle: bundle, comment: "")
      }

      /// en translation: Product Description
      ///
      /// Locales: en, tr
      static func productDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Product Description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Product Description"
        }

        return NSLocalizedString("Product Description", bundle: bundle, comment: "")
      }

      /// en translation: Product name
      ///
      /// Locales: en, tr
      static func productName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Product name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Product name"
        }

        return NSLocalizedString("Product name", bundle: bundle, comment: "")
      }

      /// en translation: Product price
      ///
      /// Locales: en, tr
      static func productPrice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Product price", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Product price"
        }

        return NSLocalizedString("Product price", bundle: bundle, comment: "")
      }

      /// en translation: Profile Picture
      ///
      /// Locales: en, tr
      static func profilePicture(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile Picture", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile Picture"
        }

        return NSLocalizedString("Profile Picture", bundle: bundle, comment: "")
      }

      /// en translation: Protective Services
      ///
      /// Locales: en, tr
      static func protectiveServices(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Protective Services", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Protective Services"
        }

        return NSLocalizedString("Protective Services", bundle: bundle, comment: "")
      }

      /// en translation: RESET
      ///
      /// Locales: en, tr
      static func reseT(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RESET", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "RESET"
        }

        return NSLocalizedString("RESET", bundle: bundle, comment: "")
      }

      /// en translation: Ready to stop live Streaming?
      ///
      /// Locales: en, tr
      static func readyToStopLiveStreaming(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ready to stop live Streaming?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Ready to stop live Streaming?"
        }

        return NSLocalizedString("Ready to stop live Streaming?", bundle: bundle, comment: "")
      }

      /// en translation: Ready to stop watching?
      ///
      /// Locales: en, tr
      static func readyToStopWatching(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ready to stop watching?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Ready to stop watching?"
        }

        return NSLocalizedString("Ready to stop watching?", bundle: bundle, comment: "")
      }

      /// en translation: Recently Watched
      ///
      /// Locales: en, tr
      static func recentlyWatched(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Recently Watched", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Recently Watched"
        }

        return NSLocalizedString("Recently Watched", bundle: bundle, comment: "")
      }

      /// en translation: Register
      ///
      /// Locales: en, tr
      static func register(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Register"
        }

        return NSLocalizedString("Register", bundle: bundle, comment: "")
      }

      /// en translation: Relationship
      ///
      /// Locales: en, tr
      static func relationship(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Relationship", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Relationship"
        }

        return NSLocalizedString("Relationship", bundle: bundle, comment: "")
      }

      /// en translation: Remove Location
      ///
      /// Locales: en, tr
      static func removeLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Remove Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Remove Location"
        }

        return NSLocalizedString("Remove Location", bundle: bundle, comment: "")
      }

      /// en translation: Repeat Password
      ///
      /// Locales: en, tr
      static func repeatPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repeat Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repeat Password"
        }

        return NSLocalizedString("Repeat Password", bundle: bundle, comment: "")
      }

      /// en translation: Replenish my balance
      ///
      /// Locales: en, tr
      static func replenishMyBalance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Replenish my balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Replenish my balance"
        }

        return NSLocalizedString("Replenish my balance", bundle: bundle, comment: "")
      }

      /// en translation: Report Post
      ///
      /// Locales: en, tr
      static func reportPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Report Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Report Post"
        }

        return NSLocalizedString("Report Post", bundle: bundle, comment: "")
      }

      /// en translation: Report a Problem
      ///
      /// Locales: en, tr
      static func reportAProblem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Report a Problem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Report a Problem"
        }

        return NSLocalizedString("Report a Problem", bundle: bundle, comment: "")
      }

      /// en translation: Request Withdrawal
      ///
      /// Locales: en, tr
      static func requestWithdrawal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Request Withdrawal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Request Withdrawal"
        }

        return NSLocalizedString("Request Withdrawal", bundle: bundle, comment: "")
      }

      /// en translation: Requested
      ///
      /// Locales: en, tr
      static func requested(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Requested", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Requested"
        }

        return NSLocalizedString("Requested", bundle: bundle, comment: "")
      }

      /// en translation: Reset filter
      ///
      /// Locales: en, tr
      static func resetFilter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Reset filter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Reset filter"
        }

        return NSLocalizedString("Reset filter", bundle: bundle, comment: "")
      }

      /// en translation: Restaurant & Hospitality
      ///
      /// Locales: en, tr
      static func restaurantHospitality(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Restaurant & Hospitality", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Restaurant & Hospitality"
        }

        return NSLocalizedString("Restaurant & Hospitality", bundle: bundle, comment: "")
      }

      /// en translation: Retail & Sales
      ///
      /// Locales: en, tr
      static func retailSales(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Retail & Sales", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Retail & Sales"
        }

        return NSLocalizedString("Retail & Sales", bundle: bundle, comment: "")
      }

      /// en translation: SAVE
      ///
      /// Locales: en, tr
      static func savE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SAVE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SAVE"
        }

        return NSLocalizedString("SAVE", bundle: bundle, comment: "")
      }

      /// en translation: SHARE
      ///
      /// Locales: en, tr
      static func sharE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SHARE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SHARE"
        }

        return NSLocalizedString("SHARE", bundle: bundle, comment: "")
      }

      /// en translation: SHOW APPLIES
      ///
      /// Locales: en, tr
      static func showapplieS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SHOW APPLIES", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SHOW APPLIES"
        }

        return NSLocalizedString("SHOW APPLIES", bundle: bundle, comment: "")
      }

      /// en translation: STAR
      ///
      /// Locales: en, tr
      static func staR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("STAR", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "STAR"
        }

        return NSLocalizedString("STAR", bundle: bundle, comment: "")
      }

      /// en translation: SUBSCRIBE
      ///
      /// Locales: en, tr
      static func subscribE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SUBSCRIBE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SUBSCRIBE"
        }

        return NSLocalizedString("SUBSCRIBE", bundle: bundle, comment: "")
      }

      /// en translation: SUBSCRIBED
      ///
      /// Locales: en, tr
      static func subscribeD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SUBSCRIBED", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SUBSCRIBED"
        }

        return NSLocalizedString("SUBSCRIBED", bundle: bundle, comment: "")
      }

      /// en translation: Sad
      ///
      /// Locales: en, tr
      static func sad(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sad", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sad"
        }

        return NSLocalizedString("Sad", bundle: bundle, comment: "")
      }

      /// en translation: Sad no result!
      ///
      /// Locales: en, tr
      static func sadNoResult(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sad no result!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sad no result!"
        }

        return NSLocalizedString("Sad no result!", bundle: bundle, comment: "")
      }

      /// en translation: Salary Date
      ///
      /// Locales: en, tr
      static func salaryDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Salary Date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Salary Date"
        }

        return NSLocalizedString("Salary Date", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en, tr
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Save"
        }

        return NSLocalizedString("Save", bundle: bundle, comment: "")
      }

      /// en translation: Save Post
      ///
      /// Locales: en, tr
      static func savePost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Save Post"
        }

        return NSLocalizedString("Save Post", bundle: bundle, comment: "")
      }

      /// en translation: Saved Post
      ///
      /// Locales: en, tr
      static func savedPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Saved Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Saved Post"
        }

        return NSLocalizedString("Saved Post", bundle: bundle, comment: "")
      }

      /// en translation: Saved Posts
      ///
      /// Locales: en, tr
      static func savedPosts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Saved Posts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Saved Posts"
        }

        return NSLocalizedString("Saved Posts", bundle: bundle, comment: "")
      }

      /// en translation: School
      ///
      /// Locales: en, tr
      static func school(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("School", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "School"
        }

        return NSLocalizedString("School", bundle: bundle, comment: "")
      }

      /// en translation: Science & Engineering
      ///
      /// Locales: en, tr
      static func scienceEngineering(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Science & Engineering", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Science & Engineering"
        }

        return NSLocalizedString("Science & Engineering", bundle: bundle, comment: "")
      }

      /// en translation: Science and Technology
      ///
      /// Locales: en, tr
      static func scienceAndTechnology(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Science and Technology", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Science and Technology"
        }

        return NSLocalizedString("Science and Technology", bundle: bundle, comment: "")
      }

      /// en translation: Search Globally
      ///
      /// Locales: en, tr
      static func searchGlobally(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search Globally", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search Globally"
        }

        return NSLocalizedString("Search Globally", bundle: bundle, comment: "")
      }

      /// en translation: Search Random
      ///
      /// Locales: en, tr
      static func searchRandom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search Random", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search Random"
        }

        return NSLocalizedString("Search Random", bundle: bundle, comment: "")
      }

      /// en translation: Security
      ///
      /// Locales: en, tr
      static func security(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Security", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Security"
        }

        return NSLocalizedString("Security", bundle: bundle, comment: "")
      }

      /// en translation: See All
      ///
      /// Locales: en, tr
      static func seeAll(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("See All", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "See All"
        }

        return NSLocalizedString("See All", bundle: bundle, comment: "")
      }

      /// en translation: See profile visitors
      ///
      /// Locales: en, tr
      static func seeProfileVisitors(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("See profile visitors", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "See profile visitors"
        }

        return NSLocalizedString("See profile visitors", bundle: bundle, comment: "")
      }

      /// en translation: Select
      ///
      /// Locales: en, tr
      static func select(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select"
        }

        return NSLocalizedString("Select", bundle: bundle, comment: "")
      }

      /// en translation: Select A Category
      ///
      /// Locales: en, tr
      static func selectACategory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select A Category", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select A Category"
        }

        return NSLocalizedString("Select A Category", bundle: bundle, comment: "")
      }

      /// en translation: Select Currency
      ///
      /// Locales: en, tr
      static func selectCurrency(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Currency", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Currency"
        }

        return NSLocalizedString("Select Currency", bundle: bundle, comment: "")
      }

      /// en translation: Select Gender
      ///
      /// Locales: en, tr
      static func selectGender(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Gender", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Gender"
        }

        return NSLocalizedString("Select Gender", bundle: bundle, comment: "")
      }

      /// en translation: Select Image
      ///
      /// Locales: en, tr
      static func selectImage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Image"
        }

        return NSLocalizedString("Select Image", bundle: bundle, comment: "")
      }

      /// en translation: Select Pictures
      ///
      /// Locales: en, tr
      static func selectPictures(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Pictures", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Pictures"
        }

        return NSLocalizedString("Select Pictures", bundle: bundle, comment: "")
      }

      /// en translation: Select Source
      ///
      /// Locales: en, tr
      static func selectSource(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Source", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Source"
        }

        return NSLocalizedString("Select Source", bundle: bundle, comment: "")
      }

      /// en translation: Select from your contact list
      ///
      /// Locales: en, tr
      static func selectFromYourContactList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select from your contact list", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select from your contact list"
        }

        return NSLocalizedString("Select from your contact list", bundle: bundle, comment: "")
      }

      /// en translation: Select what you want
      ///
      /// Locales: en
      static func selectWhatYouWant(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select what you want", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select what you want"
        }

        return NSLocalizedString("Select what you want", bundle: bundle, comment: "")
      }

      /// en translation: Selecte a Category
      ///
      /// Locales: en, tr
      static func selecteACategory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Selecte a Category", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Selecte a Category"
        }

        return NSLocalizedString("Selecte a Category", bundle: bundle, comment: "")
      }

      /// en translation: Sell New Product
      ///
      /// Locales: en, tr
      static func sellNewProduct(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sell New Product", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sell New Product"
        }

        return NSLocalizedString("Sell New Product", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en, tr
      static func send(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Send", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Send"
        }

        return NSLocalizedString("Send", bundle: bundle, comment: "")
      }

      /// en translation: Send & Recieve all kind of messages
      ///
      /// Locales: en, tr
      static func sendRecieveAllKindOfMessages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Send & Recieve all kind of messages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Send & Recieve all kind of messages"
        }

        return NSLocalizedString("Send & Recieve all kind of messages", bundle: bundle, comment: "")
      }

      /// en translation: Send Gift
      ///
      /// Locales: en, tr
      static func sendGift(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Send Gift", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Send Gift"
        }

        return NSLocalizedString("Send Gift", bundle: bundle, comment: "")
      }

      /// en translation: Send Money
      ///
      /// Locales: en, tr
      static func sendMoney(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Send Money", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Send Money"
        }

        return NSLocalizedString("Send Money", bundle: bundle, comment: "")
      }

      /// en translation: Send money to friends
      ///
      /// Locales: en, tr
      static func sendMoneyToFriends(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Send money to friends", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Send money to friends"
        }

        return NSLocalizedString("Send money to friends", bundle: bundle, comment: "")
      }

      /// en translation: Setting
      ///
      /// Locales: en, tr
      static func setting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Setting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Setting"
        }

        return NSLocalizedString("Setting", bundle: bundle, comment: "")
      }

      /// en translation: Setting Account
      ///
      /// Locales: en, tr
      static func settingAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Setting Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Setting Account"
        }

        return NSLocalizedString("Setting Account", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, tr
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings"
        }

        return NSLocalizedString("Settings", bundle: bundle, comment: "")
      }

      /// en translation: Share
      ///
      /// Locales: en, tr
      static func share(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share"
        }

        return NSLocalizedString("Share", bundle: bundle, comment: "")
      }

      /// en translation: Share Post
      ///
      /// Locales: en, tr
      static func sharePost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share Post"
        }

        return NSLocalizedString("Share Post", bundle: bundle, comment: "")
      }

      /// en translation: Share my location with public
      ///
      /// Locales: en, tr
      static func shareMyLocationWithPublic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share my location with public", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share my location with public"
        }

        return NSLocalizedString("Share my location with public", bundle: bundle, comment: "")
      }

      /// en translation: Share to
      ///
      /// Locales: en, tr
      static func shareTo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share to", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share to"
        }

        return NSLocalizedString("Share to", bundle: bundle, comment: "")
      }

      /// en translation: Share to a Group
      ///
      /// Locales: en, tr
      static func shareToAGroup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share to a Group", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share to a Group"
        }

        return NSLocalizedString("Share to a Group", bundle: bundle, comment: "")
      }

      /// en translation: Share to a Page
      ///
      /// Locales: en, tr
      static func shareToAPage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share to a Page", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share to a Page"
        }

        return NSLocalizedString("Share to a Page", bundle: bundle, comment: "")
      }

      /// en translation: Share to my Timeline
      ///
      /// Locales: en, tr
      static func shareToMyTimeline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share to my Timeline", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share to my Timeline"
        }

        return NSLocalizedString("Share to my Timeline", bundle: bundle, comment: "")
      }

      /// en translation: Shared
      ///
      /// Locales: en, tr
      static func shared(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Shared", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Shared"
        }

        return NSLocalizedString("Shared", bundle: bundle, comment: "")
      }

      /// en translation: Show / Hide last seen
      ///
      /// Locales: en, tr
      static func showHideLastSeen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Show / Hide last seen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Show / Hide last seen"
        }

        return NSLocalizedString("Show / Hide last seen", bundle: bundle, comment: "")
      }

      /// en translation: Show Activities
      ///
      /// Locales: en, tr
      static func showActivities(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Show Activities", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Show Activities"
        }

        return NSLocalizedString("Show Activities", bundle: bundle, comment: "")
      }

      /// en translation: Sign in
      ///
      /// Locales: en, tr
      static func signIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign in", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign in"
        }

        return NSLocalizedString("Sign in", bundle: bundle, comment: "")
      }

      /// en translation: Single
      ///
      /// Locales: en, tr
      static func single(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Single", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Single"
        }

        return NSLocalizedString("Single", bundle: bundle, comment: "")
      }

      /// en translation: Social Link
      ///
      /// Locales: en, tr
      static func socialLink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Social Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Social Link"
        }

        return NSLocalizedString("Social Link", bundle: bundle, comment: "")
      }

      /// en translation: Social Links
      ///
      /// Locales: en, tr
      static func socialLinks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Social Links", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Social Links"
        }

        return NSLocalizedString("Social Links", bundle: bundle, comment: "")
      }

      /// en translation: Sort By
      ///
      /// Locales: en, tr
      static func sortBy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sort By", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sort By"
        }

        return NSLocalizedString("Sort By", bundle: bundle, comment: "")
      }

      /// en translation: Sports
      ///
      /// Locales: en, tr
      static func sports(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sports", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sports"
        }

        return NSLocalizedString("Sports", bundle: bundle, comment: "")
      }

      /// en translation: Sports & Entertainment
      ///
      /// Locales: en, tr
      static func sportsEntertainment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sports & Entertainment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sports & Entertainment"
        }

        return NSLocalizedString("Sports & Entertainment", bundle: bundle, comment: "")
      }

      /// en translation: Start
      ///
      /// Locales: en, tr
      static func start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Start"
        }

        return NSLocalizedString("Start", bundle: bundle, comment: "")
      }

      /// en translation: Start Date
      ///
      /// Locales: en, tr
      static func startDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Start Date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Start Date"
        }

        return NSLocalizedString("Start Date", bundle: bundle, comment: "")
      }

      /// en translation: Start Viewing or create your own age
      ///
      /// Locales: en, tr
      static func startViewingOrCreateYourOwnAge(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Start Viewing or create your own age", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Start Viewing or create your own age"
        }

        return NSLocalizedString("Start Viewing or create your own age", bundle: bundle, comment: "")
      }

      /// en translation: Start uploding your own photos
      ///
      /// Locales: en, tr
      static func startUplodingYourOwnPhotos(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Start uploding your own photos", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Start uploding your own photos"
        }

        return NSLocalizedString("Start uploding your own photos", bundle: bundle, comment: "")
      }

      /// en translation: Start uploding your own video
      ///
      /// Locales: en, tr
      static func startUplodingYourOwnVideo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Start uploding your own video", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Start uploding your own video"
        }

        return NSLocalizedString("Start uploding your own video", bundle: bundle, comment: "")
      }

      /// en translation: Status
      ///
      /// Locales: en, tr
      static func status(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Status", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Status"
        }

        return NSLocalizedString("Status", bundle: bundle, comment: "")
      }

      /// en translation: Stay Sync
      ///
      /// Locales: en, tr
      static func staySync(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Stay Sync", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Stay Sync"
        }

        return NSLocalizedString("Stay Sync", bundle: bundle, comment: "")
      }

      /// en translation: Stay login to your account to be
      ///
      /// Locales: en
      static func stayLoginToYourAccountToBe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Stay login to your account to be", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Stay login to your account to be"
        }

        return NSLocalizedString("Stay login to your account to be", bundle: bundle, comment: "")
      }

      /// en translation: Stay tuned notifications about your activity will show up here
      ///
      /// Locales: en, tr
      static func stayTunedNotificationsAboutYourActivityWillShowUpHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Stay tuned notifications about your activity will show up here", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Stay tuned notifications about your activity will show up here"
        }

        return NSLocalizedString("Stay tuned notifications about your activity will show up here", bundle: bundle, comment: "")
      }

      /// en translation: Stream Name
      ///
      /// Locales: en, tr
      static func streamName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Stream Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Stream Name"
        }

        return NSLocalizedString("Stream Name", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: en, tr
      static func submit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Submit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Submit"
        }

        return NSLocalizedString("Submit", bundle: bundle, comment: "")
      }

      /// en translation: Submit Request
      ///
      /// Locales: en
      static func submitRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Submit Request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Submit Request"
        }

        return NSLocalizedString("Submit Request", bundle: bundle, comment: "")
      }

      /// en translation: Subscribe
      ///
      /// Locales: en, tr
      static func subscribe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Subscribe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Subscribe"
        }

        return NSLocalizedString("Subscribe", bundle: bundle, comment: "")
      }

      /// en translation: Subscribed
      ///
      /// Locales: en, tr
      static func subscribed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Subscribed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Subscribed"
        }

        return NSLocalizedString("Subscribed", bundle: bundle, comment: "")
      }

      /// en translation: Subscribed Successfully
      ///
      /// Locales: en, tr
      static func subscribedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Subscribed Successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Subscribed Successfully"
        }

        return NSLocalizedString("Subscribed Successfully", bundle: bundle, comment: "")
      }

      /// en translation: Subscriber
      ///
      /// Locales: en, tr
      static func subscriber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Subscriber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Subscriber"
        }

        return NSLocalizedString("Subscriber", bundle: bundle, comment: "")
      }

      /// en translation: Subscriptions
      ///
      /// Locales: en, tr
      static func subscriptions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Subscriptions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Subscriptions"
        }

        return NSLocalizedString("Subscriptions", bundle: bundle, comment: "")
      }

      /// en translation: Suggested Groups
      ///
      /// Locales: en, tr
      static func suggestedGroups(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Suggested Groups", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Suggested Groups"
        }

        return NSLocalizedString("Suggested Groups", bundle: bundle, comment: "")
      }

      /// en translation: Suggested User
      ///
      /// Locales: en, tr
      static func suggestedUser(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Suggested User", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Suggested User"
        }

        return NSLocalizedString("Suggested User", bundle: bundle, comment: "")
      }

      /// en translation: Switch Camera
      ///
      /// Locales: en
      static func switchCamera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Switch Camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Switch Camera"
        }

        return NSLocalizedString("Switch Camera", bundle: bundle, comment: "")
      }

      /// en translation: Tags
      ///
      /// Locales: en, tr
      static func tags(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tags", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tags"
        }

        return NSLocalizedString("Tags", bundle: bundle, comment: "")
      }

      /// en translation: Tap 'Yes' to end your stream or 'No' to continue
      ///
      /// Locales: en, tr
      static func tapYesToEndYourStreamOrNoToContinue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tap 'Yes' to end your stream or 'No' to continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tap 'Yes' to end your stream or 'No' to continue"
        }

        return NSLocalizedString("Tap 'Yes' to end your stream or 'No' to continue", bundle: bundle, comment: "")
      }

      /// en translation: Tap 'Yes' to exist live stream or 'No' to keep watching
      ///
      /// Locales: en, tr
      static func tapYesToExistLiveStreamOrNoToKeepWatching(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tap 'Yes' to exist live stream or 'No' to keep watching", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tap 'Yes' to exist live stream or 'No' to keep watching"
        }

        return NSLocalizedString("Tap 'Yes' to exist live stream or 'No' to keep watching", bundle: bundle, comment: "")
      }

      /// en translation: Tell a Friends
      ///
      /// Locales: en, tr
      static func tellAFriends(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tell a Friends", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tell a Friends"
        }

        return NSLocalizedString("Tell a Friends", bundle: bundle, comment: "")
      }

      /// en translation: Tell pontentials members what your groups about to help them know whether its relevant to them
      ///
      /// Locales: en, tr
      static func tellPontentialsMembersWhatYourGroupsAboutToHelpThemKnowWhetherItsRelevantToThem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tell pontentials members what your groups about to help them know whether its relevant to them", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tell pontentials members what your groups about to help them know whether its relevant to them"
        }

        return NSLocalizedString("Tell pontentials members what your groups about to help them know whether its relevant to them", bundle: bundle, comment: "")
      }

      /// en translation: Tell pontentials members what your pages about to help them know whether its relevant to them
      ///
      /// Locales: en, tr
      static func tellPontentialsMembersWhatYourPagesAboutToHelpThemKnowWhetherItsRelevantToThem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tell pontentials members what your pages about to help them know whether its relevant to them", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tell pontentials members what your pages about to help them know whether its relevant to them"
        }

        return NSLocalizedString("Tell pontentials members what your pages about to help them know whether its relevant to them", bundle: bundle, comment: "")
      }

      /// en translation: Term Of service
      ///
      /// Locales: en, tr
      static func termOfService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Term Of service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Term Of service"
        }

        return NSLocalizedString("Term Of service", bundle: bundle, comment: "")
      }

      /// en translation: Terms of Service
      ///
      /// Locales: en, tr
      static func termsOfService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Terms of Service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Terms of Service"
        }

        return NSLocalizedString("Terms of Service", bundle: bundle, comment: "")
      }

      /// en translation: Text copied to clipboard
      ///
      /// Locales: en, tr
      static func textCopiedToClipboard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Text copied to clipboard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Text copied to clipboard"
        }

        return NSLocalizedString("Text copied to clipboard", bundle: bundle, comment: "")
      }

      /// en translation: The post successfully saved
      ///
      /// Locales: en, tr
      static func thePostSuccessfullySaved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("The post successfully saved", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "The post successfully saved"
        }

        return NSLocalizedString("The post successfully saved", bundle: bundle, comment: "")
      }

      /// en translation: There are no blocked users
      ///
      /// Locales: en, tr
      static func thereAreNoBlockedUsers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("There are no blocked users", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "There are no blocked users"
        }

        return NSLocalizedString("There are no blocked users", bundle: bundle, comment: "")
      }

      /// en translation: There is no Group request
      ///
      /// Locales: en, tr
      static func thereIsNoGroupRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("There is no Group request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "There is no Group request"
        }

        return NSLocalizedString("There is no Group request", bundle: bundle, comment: "")
      }

      /// en translation: There is no chat available. start chatting with friends.;
      ///
      /// Locales: en, tr
      static func thereIsNoChatAvailableStartChattingWithFriends(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("There is no chat available. start chatting with friends.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "There is no chat available. start chatting with friends."
        }

        return NSLocalizedString("There is no chat available. start chatting with friends.", bundle: bundle, comment: "")
      }

      /// en translation: This Month
      ///
      /// Locales: en, tr
      static func thisMonth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This Month", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This Month"
        }

        return NSLocalizedString("This Month", bundle: bundle, comment: "")
      }

      /// en translation: This Week
      ///
      /// Locales: en, tr
      static func thisWeek(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This Week", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This Week"
        }

        return NSLocalizedString("This Week", bundle: bundle, comment: "")
      }

      /// en translation: This Year
      ///
      /// Locales: en, tr
      static func thisYear(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This Year", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This Year"
        }

        return NSLocalizedString("This Year", bundle: bundle, comment: "")
      }

      /// en translation: Time By
      ///
      /// Locales: en, tr
      static func timeBy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Time By", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Time By"
        }

        return NSLocalizedString("Time By", bundle: bundle, comment: "")
      }

      /// en translation: Timeline Privacy
      ///
      /// Locales: en, tr
      static func timelinePrivacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Timeline Privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Timeline Privacy"
        }

        return NSLocalizedString("Timeline Privacy", bundle: bundle, comment: "")
      }

      /// en translation: Title
      ///
      /// Locales: en, tr
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Title"
        }

        return NSLocalizedString("Title", bundle: bundle, comment: "")
      }

      /// en translation: To Date
      ///
      /// Locales: en, tr
      static func toDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("To Date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "To Date"
        }

        return NSLocalizedString("To Date", bundle: bundle, comment: "")
      }

      /// en translation: To log in, you need to verify  your identity.
      ///
      /// Locales: en, tr
      static func toLogInYouNeedToVerifyYourIdentity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("To log in, you need to verify  your identity.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "To log in, you need to verify  your identity."
        }

        return NSLocalizedString("To log in, you need to verify  your identity.", bundle: bundle, comment: "")
      }

      /// en translation: Today
      ///
      /// Locales: en, tr
      static func today(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Today", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Today"
        }

        return NSLocalizedString("Today", bundle: bundle, comment: "")
      }

      /// en translation: Transportation
      ///
      /// Locales: en, tr
      static func transportation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Transportation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Transportation"
        }

        return NSLocalizedString("Transportation", bundle: bundle, comment: "")
      }

      /// en translation: Traval and Events
      ///
      /// Locales: en, tr
      static func travalAndEvents(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Traval and Events", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Traval and Events"
        }

        return NSLocalizedString("Traval and Events", bundle: bundle, comment: "")
      }

      /// en translation: Turn on 2 step login level-up your account's security. Once turned on. you'll use both your password and a 6-digit security code sent to your phone or email to log in.
      ///
      /// Locales: en, tr
      static func turnOn2StepLoginLevelUpYourAccountSSecurityOnceTurnedOnYouLlUseBothYourPasswordAndA6DigitSecurityCodeSentToYourPhoneOrEmailToLogIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Turn on 2 step login level-up your account's security. Once turned on. you'll use both your password and a 6-digit security code sent to your phone or email to log in.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Turn on 2 step login level-up your account's security. Once turned on. you'll use both your password and a 6-digit security code sent to your phone or email to log in."
        }

        return NSLocalizedString("Turn on 2 step login level-up your account's security. Once turned on. you'll use both your password and a 6-digit security code sent to your phone or email to log in.", bundle: bundle, comment: "")
      }

      /// en translation: Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.
      ///
      /// Locales: en, tr
      static func turnOn2StepLoginToLevelUpYourAccountSecurityOnceTurnedOnYouLlUseBothYourPasswordAndA6DigitSecurityCodeSendToYourPhoneOrEmailToLogIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in."
        }

        return NSLocalizedString("Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.", bundle: bundle, comment: "")
      }

      /// en translation: UPDATE
      ///
      /// Locales: en, tr
      static func updatE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UPDATE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "UPDATE"
        }

        return NSLocalizedString("UPDATE", bundle: bundle, comment: "")
      }

      /// en translation: USERS
      ///
      /// Locales: en, tr
      static func userS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("USERS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "USERS"
        }

        return NSLocalizedString("USERS", bundle: bundle, comment: "")
      }

      /// en translation: UnVerified
      ///
      /// Locales: en, tr
      static func unVerified(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UnVerified", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "UnVerified"
        }

        return NSLocalizedString("UnVerified", bundle: bundle, comment: "")
      }

      /// en translation: Unblock
      ///
      /// Locales: en, tr
      static func unblock(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unblock", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Unblock"
        }

        return NSLocalizedString("Unblock", bundle: bundle, comment: "")
      }

      /// en translation: Unblocked
      ///
      /// Locales: en, tr
      static func unblocked(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unblocked", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Unblocked"
        }

        return NSLocalizedString("Unblocked", bundle: bundle, comment: "")
      }

      /// en translation: Unlike
      ///
      /// Locales: en, tr
      static func unlike(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unlike", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Unlike"
        }

        return NSLocalizedString("Unlike", bundle: bundle, comment: "")
      }

      /// en translation: Unsave Post
      ///
      /// Locales: en, tr
      static func unsavePost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unsave Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Unsave Post"
        }

        return NSLocalizedString("Unsave Post", bundle: bundle, comment: "")
      }

      /// en translation: Update Data Page
      ///
      /// Locales: en, tr
      static func updateDataPage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Update Data Page", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Update Data Page"
        }

        return NSLocalizedString("Update Data Page", bundle: bundle, comment: "")
      }

      /// en translation: Update Group
      ///
      /// Locales: en
      static func updateGroup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Update Group", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Update Group"
        }

        return NSLocalizedString("Update Group", bundle: bundle, comment: "")
      }

      /// en translation: Update Job
      ///
      /// Locales: en, tr
      static func updateJob(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Update Job", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Update Job"
        }

        return NSLocalizedString("Update Job", bundle: bundle, comment: "")
      }

      /// en translation: Update Page Data
      ///
      /// Locales: en, tr
      static func updatePageData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Update Page Data", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Update Page Data"
        }

        return NSLocalizedString("Update Page Data", bundle: bundle, comment: "")
      }

      /// en translation: Upgrade Now
      ///
      /// Locales: en, tr
      static func upgradeNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Upgrade Now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Upgrade Now"
        }

        return NSLocalizedString("Upgrade Now", bundle: bundle, comment: "")
      }

      /// en translation: Upload Video
      ///
      /// Locales: en, tr
      static func uploadVideo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Upload Video", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Upload Video"
        }

        return NSLocalizedString("Upload Video", bundle: bundle, comment: "")
      }

      /// en translation: Used
      ///
      /// Locales: en, tr
      static func used(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Used", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Used"
        }

        return NSLocalizedString("Used", bundle: bundle, comment: "")
      }

      /// en translation: User Info
      ///
      /// Locales: en
      static func userInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User Info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User Info"
        }

        return NSLocalizedString("User Info", bundle: bundle, comment: "")
      }

      /// en translation: User has been blocked!
      ///
      /// Locales: en, tr
      static func userHasBeenBlocked(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User has been blocked!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User has been blocked!"
        }

        return NSLocalizedString("User has been blocked!", bundle: bundle, comment: "")
      }

      /// en translation: VERIFY
      ///
      /// Locales: en, tr
      static func verifY(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VERIFY", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "VERIFY"
        }

        return NSLocalizedString("VERIFY", bundle: bundle, comment: "")
      }

      /// en translation: VIDEOS
      ///
      /// Locales: en, tr
      static func videoS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VIDEOS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "VIDEOS"
        }

        return NSLocalizedString("VIDEOS", bundle: bundle, comment: "")
      }

      /// en translation: Verified
      ///
      /// Locales: en, tr
      static func verified(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Verified", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Verified"
        }

        return NSLocalizedString("Verified", bundle: bundle, comment: "")
      }

      /// en translation: Verified badge
      ///
      /// Locales: en, tr
      static func verifiedBadge(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Verified badge", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Verified badge"
        }

        return NSLocalizedString("Verified badge", bundle: bundle, comment: "")
      }

      /// en translation: Video Gallery
      ///
      /// Locales: en, tr
      static func videoGallery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Video Gallery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Video Gallery"
        }

        return NSLocalizedString("Video Gallery", bundle: bundle, comment: "")
      }

      /// en translation: Video Mute
      ///
      /// Locales: en
      static func videoMute(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Video Mute", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Video Mute"
        }

        return NSLocalizedString("Video Mute", bundle: bundle, comment: "")
      }

      /// en translation: Video Reported successfully!!
      ///
      /// Locales: en, tr
      static func videoReportedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Video Reported successfully!!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Video Reported successfully!!"
        }

        return NSLocalizedString("Video Reported successfully!!", bundle: bundle, comment: "")
      }

      /// en translation: Video removed from the list
      ///
      /// Locales: en, tr
      static func videoRemovedFromTheList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Video removed from the list", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Video removed from the list"
        }

        return NSLocalizedString("Video removed from the list", bundle: bundle, comment: "")
      }

      /// en translation: Videos
      ///
      /// Locales: en, tr
      static func videos(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Videos", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Videos"
        }

        return NSLocalizedString("Videos", bundle: bundle, comment: "")
      }

      /// en translation: View
      ///
      /// Locales: en, tr
      static func view(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("View", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "View"
        }

        return NSLocalizedString("View", bundle: bundle, comment: "")
      }

      /// en translation: View Privacy Shortcut
      ///
      /// Locales: en, tr
      static func viewPrivacyShortcut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("View Privacy Shortcut", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "View Privacy Shortcut"
        }

        return NSLocalizedString("View Privacy Shortcut", bundle: bundle, comment: "")
      }

      /// en translation: View all Follow Request
      ///
      /// Locales: en, tr
      static func viewAllFollowRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("View all Follow Request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "View all Follow Request"
        }

        return NSLocalizedString("View all Follow Request", bundle: bundle, comment: "")
      }

      /// en translation: Views
      ///
      /// Locales: en, tr
      static func views(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Views", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Views"
        }

        return NSLocalizedString("Views", bundle: bundle, comment: "")
      }

      /// en translation: Wallet & Credits
      ///
      /// Locales: en, tr
      static func walletCredits(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wallet & Credits", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wallet & Credits"
        }

        return NSLocalizedString("Wallet & Credits", bundle: bundle, comment: "")
      }

      /// en translation: Warning
      ///
      /// Locales: en, tr
      static func warning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Warning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Warning"
        }

        return NSLocalizedString("Warning", bundle: bundle, comment: "")
      }

      /// en translation: Watch Later
      ///
      /// Locales: en, tr
      static func watchLater(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Watch Later", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Watch Later"
        }

        return NSLocalizedString("Watch Later", bundle: bundle, comment: "")
      }

      /// en translation: Watch offline
      ///
      /// Locales: en, tr
      static func watchOffline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Watch offline", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Watch offline"
        }

        return NSLocalizedString("Watch offline", bundle: bundle, comment: "")
      }

      /// en translation: We cannot find the keyword  you are searching from maybe a little spelling mistake ?
      ///
      /// Locales: en, tr
      static func weCannotFindTheKeywordYouAreSearchingFromMaybeALittleSpellingMistake(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("We cannot find the keyword  you are searching from maybe a little spelling mistake ?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "We cannot find the keyword  you are searching from maybe a little spelling mistake ?"
        }

        return NSLocalizedString("We cannot find the keyword  you are searching from maybe a little spelling mistake ?", bundle: bundle, comment: "")
      }

      /// en translation: We have sent you the confirmation code to your email address.
      ///
      /// Locales: en, tr
      static func weHaveSentYouTheConfirmationCodeToYourEmailAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("We have sent you the confirmation code to your email address.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "We have sent you the confirmation code to your email address."
        }

        return NSLocalizedString("We have sent you the confirmation code to your email address.", bundle: bundle, comment: "")
      }

      /// en translation: Website
      ///
      /// Locales: en, tr
      static func website(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Website", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Website"
        }

        return NSLocalizedString("Website", bundle: bundle, comment: "")
      }

      /// en translation: Welcome,you are the first user here!
      ///
      /// Locales: en, tr
      static func welcomeYouAreTheFirstUserHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Welcome,you are the first user here!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Welcome,you are the first user here!"
        }

        return NSLocalizedString("Welcome,you are the first user here!", bundle: bundle, comment: "")
      }

      /// en translation: What's going on?#Hashtag..@Mention
      ///
      /// Locales: en, tr
      static func whatSGoingOnHashtagMention(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("What's going on?#Hashtag..@Mention", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "What's going on?#Hashtag..@Mention"
        }

        return NSLocalizedString("What's going on?#Hashtag..@Mention", bundle: bundle, comment: "")
      }

      /// en translation: When someone follow me
      ///
      /// Locales: en, tr
      static func whenSomeoneFollowMe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("When someone follow me", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "When someone follow me"
        }

        return NSLocalizedString("When someone follow me", bundle: bundle, comment: "")
      }

      /// en translation: Who can follow me?
      ///
      /// Locales: en, tr
      static func whoCanFollowMe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Who can follow me?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Who can follow me?"
        }

        return NSLocalizedString("Who can follow me?", bundle: bundle, comment: "")
      }

      /// en translation: Who can message me?
      ///
      /// Locales: en, tr
      static func whoCanMessageMe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Who can message me?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Who can message me?"
        }

        return NSLocalizedString("Who can message me?", bundle: bundle, comment: "")
      }

      /// en translation: Who can post on my timeline?
      ///
      /// Locales: en, tr
      static func whoCanPostOnMyTimeline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Who can post on my timeline?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Who can post on my timeline?"
        }

        return NSLocalizedString("Who can post on my timeline?", bundle: bundle, comment: "")
      }

      /// en translation: Who can see my birthday?
      ///
      /// Locales: en, tr
      static func whoCanSeeMyBirthday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Who can see my birthday?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Who can see my birthday?"
        }

        return NSLocalizedString("Who can see my birthday?", bundle: bundle, comment: "")
      }

      /// en translation: Who can see my friends?
      ///
      /// Locales: en, tr
      static func whoCanSeeMyFriends(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Who can see my friends?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Who can see my friends?"
        }

        return NSLocalizedString("Who can see my friends?", bundle: bundle, comment: "")
      }

      /// en translation: WorkPlace
      ///
      /// Locales: en, tr
      static func workPlace(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WorkPlace", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WorkPlace"
        }

        return NSLocalizedString("WorkPlace", bundle: bundle, comment: "")
      }

      /// en translation: Workspace
      ///
      /// Locales: en, tr
      static func workspace(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Workspace", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Workspace"
        }

        return NSLocalizedString("Workspace", bundle: bundle, comment: "")
      }

      /// en translation: Wow
      ///
      /// Locales: en, tr
      static func wow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wow"
        }

        return NSLocalizedString("Wow", bundle: bundle, comment: "")
      }

      /// en translation: YES
      ///
      /// Locales: en, tr
      static func yeS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YES", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "YES"
        }

        return NSLocalizedString("YES", bundle: bundle, comment: "")
      }

      /// en translation: You can list product for sale from the Add a Product tool.
      ///
      /// Locales: en, tr
      static func youCanListProductForSaleFromTheAddAProductTool(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You can list product for sale from the Add a Product tool.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You can list product for sale from the Add a Product tool."
        }

        return NSLocalizedString("You can list product for sale from the Add a Product tool.", bundle: bundle, comment: "")
      }

      /// en translation: You cannot block this user because it is administrator
      ///
      /// Locales: en
      static func youCannotBlockThisUserBecauseItIsAdministrator(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You cannot block this user because it is administrator", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You cannot block this user because it is administrator"
        }

        return NSLocalizedString("You cannot block this user because it is administrator", bundle: bundle, comment: "")
      }

      /// en translation: You don't have camera
      ///
      /// Locales: en, tr
      static func youDonTHaveCamera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You don't have camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You don't have camera"
        }

        return NSLocalizedString("You don't have camera", bundle: bundle, comment: "")
      }

      /// en translation: You erarned points will automatically go to
      ///
      /// Locales: en, tr
      static func youErarnedPointsWillAutomaticallyGoTo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You erarned points will automatically go to", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You erarned points will automatically go to"
        }

        return NSLocalizedString("You erarned points will automatically go to", bundle: bundle, comment: "")
      }

      /// en translation: Your Message here...
      ///
      /// Locales: en, tr
      static func yourMessageHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your Message here...", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your Message here..."
        }

        return NSLocalizedString("Your Message here...", bundle: bundle, comment: "")
      }

      /// en translation: Your report has been sent
      ///
      /// Locales: en, tr
      static func yourReportHasBeenSent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your report has been sent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your report has been sent"
        }

        return NSLocalizedString("Your report has been sent", bundle: bundle, comment: "")
      }

      /// en translation: birthday Privacy
      ///
      /// Locales: en, tr
      static func birthdayPrivacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("birthday Privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "birthday Privacy"
        }

        return NSLocalizedString("birthday Privacy", bundle: bundle, comment: "")
      }

      /// en translation: changed cover picture
      ///
      /// Locales: en, tr
      static func changedCoverPicture(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("changed cover picture", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "changed cover picture"
        }

        return NSLocalizedString("changed cover picture", bundle: bundle, comment: "")
      }

      /// en translation: changed profile picture
      ///
      /// Locales: en, tr
      static func changedProfilePicture(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("changed profile picture", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "changed profile picture"
        }

        return NSLocalizedString("changed profile picture", bundle: bundle, comment: "")
      }

      /// en translation: count
      ///
      /// Locales: en
      static func count(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("count", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "count"
        }

        return NSLocalizedString("count", bundle: bundle, comment: "")
      }

      /// en translation: follow
      ///
      /// Locales: en
      static func follow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("follow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "follow"
        }

        return NSLocalizedString("follow", bundle: bundle, comment: "")
      }

      /// en translation: get notifications when you receive messages
      ///
      /// Locales: en, tr
      static func getNotificationsWhenYouReceiveMessages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get notifications when you receive messages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "get notifications when you receive messages"
        }

        return NSLocalizedString("get notifications when you receive messages", bundle: bundle, comment: "")
      }

      /// en translation: is live now
      ///
      /// Locales: en, tr
      static func isLiveNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("is live now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "is live now"
        }

        return NSLocalizedString("is live now", bundle: bundle, comment: "")
      }

      /// en translation: life time
      ///
      /// Locales: en, tr
      static func lifeTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("life time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "life time"
        }

        return NSLocalizedString("life time", bundle: bundle, comment: "")
      }

      /// en translation: select Group Privacy
      ///
      /// Locales: en, tr
      static func selectGroupPrivacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select Group Privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select Group Privacy"
        }

        return NSLocalizedString("select Group Privacy", bundle: bundle, comment: "")
      }

      /// en translation: sells
      ///
      /// Locales: en, tr
      static func sells(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sells", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sells"
        }

        return NSLocalizedString("sells", bundle: bundle, comment: "")
      }

      /// en translation: someone is calling you
      ///
      /// Locales: en
      static func someoneIsCallingYou(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("someone is calling you", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "someone is calling you"
        }

        return NSLocalizedString("someone is calling you", bundle: bundle, comment: "")
      }

      /// en translation: source
      ///
      /// Locales: en, tr
      static func source(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("source", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "source"
        }

        return NSLocalizedString("source", bundle: bundle, comment: "")
      }

      /// en translation: started broadcasting live.
      ///
      /// Locales: en, tr
      static func startedBroadcastingLive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("started broadcasting live.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "started broadcasting live."
        }

        return NSLocalizedString("started broadcasting live.", bundle: bundle, comment: "")
      }

      /// en translation: stream has ended.
      ///
      /// Locales: en, tr
      static func streamHasEnded(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("stream has ended.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "stream has ended."
        }

        return NSLocalizedString("stream has ended.", bundle: bundle, comment: "")
      }

      /// en translation: unsubscribed
      ///
      /// Locales: en, tr
      static func unsubscribed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unsubscribed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unsubscribed"
        }

        return NSLocalizedString("unsubscribed", bundle: bundle, comment: "")
      }

      /// en translation: update Playlist
      ///
      /// Locales: en, tr
      static func updatePlaylist(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("update Playlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "update Playlist"
        }

        return NSLocalizedString("update Playlist", bundle: bundle, comment: "")
      }

      /// en translation: upload
      ///
      /// Locales: en, tr
      static func upload(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("upload", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "upload"
        }

        return NSLocalizedString("upload", bundle: bundle, comment: "")
      }

      /// en translation: was live
      ///
      /// Locales: en, tr
      static func wasLive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("was live", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "was live"
        }

        return NSLocalizedString("was live", bundle: bundle, comment: "")
      }

      /// en translation: you can send money to your friends, acquaintances or anyone
      ///
      /// Locales: en, tr
      static func youCanSendMoneyToYourFriendsAcquaintancesOrAnyone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("you can send money to your friends, acquaintances or anyone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "you can send money to your friends, acquaintances or anyone"
        }

        return NSLocalizedString("you can send money to your friends, acquaintances or anyone", bundle: bundle, comment: "")
      }

      /// tr translation: Kullanıcı adı
      ///
      /// Locales: tr
      static func userName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User Name"
        }

        return NSLocalizedString("User Name", bundle: bundle, comment: "")
      }

      /// tr translation: Kullanıcı adı
      ///
      /// Locales: tr
      static func username(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Username", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Username"
        }

        return NSLocalizedString("Username", bundle: bundle, comment: "")
      }

      /// tr translation: Takip etme
      ///
      /// Locales: tr
      static func following(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Following", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Following"
        }

        return NSLocalizedString("Following", bundle: bundle, comment: "")
      }

      /// tr translation: Şifreyi unut ?
      ///
      /// Locales: tr
      static func forgetPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Forget Password ?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Forget Password ?"
        }

        return NSLocalizedString("Forget Password ?", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 108 localization keys.
    struct main {
      /// tr translation:  
      ///
      /// Locales: tr
      static let fwIuVfsNormalTitle = Rswift.StringResource(key: "1FW-Iu-vfs.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:  
      ///
      /// Locales: tr
      static let zHfUE6cANormalTitle = Rswift.StringResource(key: "ZHf-UE-6cA.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:        Help & Support
      ///
      /// Locales: tr
      static let pimCsN0ONormalTitle = Rswift.StringResource(key: "PIM-cs-N0O.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:       Funding
      ///
      /// Locales: tr
      static let cKuUkPclNormalTitle = Rswift.StringResource(key: "CKu-Uk-pcl.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:      Events
      ///
      /// Locales: tr
      static let kLb01SzANormalTitle = Rswift.StringResource(key: "KLb-01-SzA.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:      Logout
      ///
      /// Locales: tr
      static let qcnRvCNfNormalTitle = Rswift.StringResource(key: "qcn-Rv-CNf.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:      MarketPlace
      ///
      /// Locales: tr
      static let ghtS62UgNormalTitle = Rswift.StringResource(key: "ght-S6-2Ug.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:      Notifications
      ///
      /// Locales: tr
      static let nMGgZDsNormalTitle = Rswift.StringResource(key: "0nM-gg-ZDs.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:      Offers
      ///
      /// Locales: tr
      static let vcCGa6o7NormalTitle = Rswift.StringResource(key: "VcC-ga-6o7.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:      Pages
      ///
      /// Locales: tr
      static let ztiDWC4NNormalTitle = Rswift.StringResource(key: "Zti-DW-C4N.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:      Popular Posts
      ///
      /// Locales: tr
      static let fesC3G5KNormalTitle = Rswift.StringResource(key: "fes-C3-g5K.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:     Blogs
      ///
      /// Locales: tr
      static let eGoB1XaeNormalTitle = Rswift.StringResource(key: "EGo-B1-Xae.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:     Saved Posts
      ///
      /// Locales: tr
      static let gr2UWLW7NormalTitle = Rswift.StringResource(key: "Gr2-UW-lW7.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:    Albums
      ///
      /// Locales: tr
      static let ggnlwYgUNormalTitle = Rswift.StringResource(key: "GGN-LW-YgU.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:    Comment
      ///
      /// Locales: tr
      static let c6VPpTpTNormalTitle = Rswift.StringResource(key: "C6V-Pp-TpT.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:    Comment
      ///
      /// Locales: tr
      static let hchOcVgaNormalTitle = Rswift.StringResource(key: "Hch-Oc-vga.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:    Following
      ///
      /// Locales: tr
      static let iiSOLEWNNormalTitle = Rswift.StringResource(key: "IiS-OL-eWN.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:    General Account
      ///
      /// Locales: tr
      static let hppFuVllNormalTitle = Rswift.StringResource(key: "hpp-fu-Vll.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:    Groups
      ///
      /// Locales: tr
      static let vyoRhRNormalTitle = Rswift.StringResource(key: "28V-yO-rhR.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:    Message
      ///
      /// Locales: tr
      static let v0JMMXgiNormalTitle = Rswift.StringResource(key: "v0J-MM-xgi.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:    More Options
      ///
      /// Locales: tr
      static let vHl3p6GFNormalTitle = Rswift.StringResource(key: "vHl-3p-6GF.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:    My Images
      ///
      /// Locales: tr
      static let mAcTLQ0bNormalTitle = Rswift.StringResource(key: "mAc-tL-Q0b.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:    My Profile
      ///
      /// Locales: tr
      static let h60NMHQVNormalTitle = Rswift.StringResource(key: "H60-NM-hQV.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:    My Videos
      ///
      /// Locales: tr
      static let rjzdx6VKNormalTitle = Rswift.StringResource(key: "RJZ-dX-6VK.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:    Pokes
      ///
      /// Locales: tr
      static let gGhGVLEpNormalTitle = Rswift.StringResource(key: "gGh-GV-lEp.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:    Privacy
      ///
      /// Locales: tr
      static let yukFkDkZNormalTitle = Rswift.StringResource(key: "yuk-fk-DkZ.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:    Share
      ///
      /// Locales: tr
      static let grffe2ANormalTitle = Rswift.StringResource(key: "0GR-fF-e2A.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:    Share
      ///
      /// Locales: tr
      static let urUE8paNormalTitle = Rswift.StringResource(key: "4ur-UE-8pa.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:    Share to a Group
      ///
      /// Locales: tr
      static let ow85WhENormalTitle = Rswift.StringResource(key: "4ow-85-WhE.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:    Share to a Page
      ///
      /// Locales: tr
      static let mItSPEuKNormalTitle = Rswift.StringResource(key: "MIt-SP-euK.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:    Share to my Timeline
      ///
      /// Locales: tr
      static let qyh7f62wNormalTitle = Rswift.StringResource(key: "Qyh-7f-62w.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:    Tell a Friends
      ///
      /// Locales: tr
      static let zarHd22jNormalTitle = Rswift.StringResource(key: "ZAR-Hd-22j.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:   Like
      ///
      /// Locales: tr
      static let q1HUHL4hNormalTitle = Rswift.StringResource(key: "Q1H-uH-l4h.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:   Like
      ///
      /// Locales: tr
      static let vt6ULSAyNormalTitle = Rswift.StringResource(key: "Vt6-UL-sAy.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: $3
      ///
      /// Locales: tr
      static let odcF0LxVText = Rswift.StringResource(key: "Odc-f0-LxV.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: 0
      ///
      /// Locales: tr
      static let gklABJa7Text = Rswift.StringResource(key: "gkl-AB-Ja7.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: 0
      ///
      /// Locales: tr
      static let vd8BI4GText = Rswift.StringResource(key: "1VD-8B-i4G.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: 12.52
      ///
      /// Locales: tr
      static let gubOfYGuText = Rswift.StringResource(key: "Gub-Of-yGu.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: 12.52
      ///
      /// Locales: tr
      static let inJI2Gf8Text = Rswift.StringResource(key: "inJ-I2-Gf8.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Activities
      ///
      /// Locales: tr
      static let cGARLDUITitle = Rswift.StringResource(key: "cGA-RL-DUI.title", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Add Funds
      ///
      /// Locales: tr
      static let h4ByA9FNormalTitle = Rswift.StringResource(key: "4h4-by-A9F.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Add a comment here
      ///
      /// Locales: tr
      static let bKgCbRR6Text = Rswift.StringResource(key: "BKg-Cb-rR6.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Add a comment here
      ///
      /// Locales: tr
      static let e7rFkLjUText = Rswift.StringResource(key: "e7r-fk-ljU.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Amount
      ///
      /// Locales: tr
      static let d2vB3FCtPlaceholder = Rswift.StringResource(key: "d2v-B3-fCt.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Amount
      ///
      /// Locales: tr
      static let fPb1z6UePlaceholder = Rswift.StringResource(key: "FPb-1z-6Ue.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Block
      ///
      /// Locales: tr
      static let pIhHJGwoNormalTitle = Rswift.StringResource(key: "PIh-hJ-Gwo.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Button
      ///
      /// Locales: tr
      static let bfqUdZ7GNormalTitle = Rswift.StringResource(key: "bfq-ud-z7G.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Button
      ///
      /// Locales: tr
      static let jvQ046ANormalTitle = Rswift.StringResource(key: "4jv-q0-46A.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: CONTINUE
      ///
      /// Locales: tr
      static let acmAwJsCNormalTitle = Rswift.StringResource(key: "acm-aw-jsC.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: CONTINUE
      ///
      /// Locales: tr
      static let wImDyGWcNormalTitle = Rswift.StringResource(key: "wIm-Dy-GWc.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Cancel
      ///
      /// Locales: tr
      static let lLpBF44fNormalTitle = Rswift.StringResource(key: "LLp-BF-44f.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Cancel
      ///
      /// Locales: tr
      static let oRzBV1wqNormalTitle = Rswift.StringResource(key: "ORz-BV-1wq.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Close
      ///
      /// Locales: tr
      static let rH0RwJJ9NormalTitle = Rswift.StringResource(key: "rH0-rw-jJ9.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Copy Link
      ///
      /// Locales: tr
      static let pjT2ENormalTitle = Rswift.StringResource(key: "998-pj-T2E.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Current Balance
      ///
      /// Locales: tr
      static let ch4Dl5E3Text = Rswift.StringResource(key: "Ch4-dl-5E3.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Current Balance
      ///
      /// Locales: tr
      static let o94HiUihText = Rswift.StringResource(key: "O94-hi-Uih.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Discount
      ///
      /// Locales: tr
      static let baqmueQdText = Rswift.StringResource(key: "BAQ-MU-eQd.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Email OR UserName
      ///
      /// Locales: tr
      static let bayqg3LyPlaceholder = Rswift.StringResource(key: "BAY-qG-3Ly.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Feature member
      ///
      /// Locales: tr
      static let tuA2H1DText = Rswift.StringResource(key: "9tu-a2-h1D.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Featured member
      ///
      /// Locales: tr
      static let aZ36yO7NText = Rswift.StringResource(key: "aZ3-6y-O7N.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Following
      ///
      /// Locales: tr
      static let nnGuYCaText = Rswift.StringResource(key: "8Nn-Gu-yCa.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: GoPro
      ///
      /// Locales: tr
      static let y4JZZO8nText = Rswift.StringResource(key: "y4J-ZZ-o8n.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Groups
      ///
      /// Locales: tr
      static let kc5yPAHText = Rswift.StringResource(key: "2KC-5y-pAH.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Last seen 15 h ago
      ///
      /// Locales: tr
      static let juWX7TUbText = Rswift.StringResource(key: "JuW-x7-TUb.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Menu
      ///
      /// Locales: tr
      static let zEN8PQ1VTitle = Rswift.StringResource(key: "zEN-8P-Q1V.title", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: More
      ///
      /// Locales: tr
      static let g7nZKOHRText = Rswift.StringResource(key: "g7n-ZK-OHR.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: More
      ///
      /// Locales: tr
      static let r6iSNN64Title = Rswift.StringResource(key: "r6i-SN-n64.title", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: More
      ///
      /// Locales: tr
      static let rSQ26YcText = Rswift.StringResource(key: "3rS-q2-6Yc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: NO
      ///
      /// Locales: tr
      static let trPyEowNormalTitle = Rswift.StringResource(key: "1tr-py-eow.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: No Comments to be displayed
      ///
      /// Locales: tr
      static let a75EsRc2Text = Rswift.StringResource(key: "a75-Es-Rc2.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Notifications
      ///
      /// Locales: tr
      static let iy3W7YOBTitle = Rswift.StringResource(key: "iy3-W7-yOB.title", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Pages
      ///
      /// Locales: tr
      static let mmmPpOEcText = Rswift.StringResource(key: "MMM-Pp-OEc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Pages promotion
      ///
      /// Locales: tr
      static let hPzLJHknText = Rswift.StringResource(key: "hPz-LJ-hkn.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Pages promotions
      ///
      /// Locales: tr
      static let vhtJ5VcqText = Rswift.StringResource(key: "vht-J5-Vcq.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Per Week
      ///
      /// Locales: tr
      static let wHYErZTWText = Rswift.StringResource(key: "wHY-er-ZTW.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Photos
      ///
      /// Locales: tr
      static let gJPKeKlvText = Rswift.StringResource(key: "gJP-ke-klv.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Pick Your Plan
      ///
      /// Locales: tr
      static let ifemvTiZText = Rswift.StringResource(key: "IFE-MV-TiZ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Poke
      ///
      /// Locales: tr
      static let pQO35Gx5NormalTitle = Rswift.StringResource(key: "pQO-35-gx5.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Post Reaction
      ///
      /// Locales: tr
      static let rchebkText = Rswift.StringResource(key: "59R-cH-EBK.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Posts promotion
      ///
      /// Locales: tr
      static let kYhNYKezText = Rswift.StringResource(key: "KYh-nY-kez.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Posts promotion
      ///
      /// Locales: tr
      static let oSG59pRText = Rswift.StringResource(key: "7oS-g5-9pR.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Pro Features give you Complete control over your Profile
      ///
      /// Locales: tr
      static let v8V7DLw3Text = Rswift.StringResource(key: "v8V-7D-lw3.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Profile Picture
      ///
      /// Locales: tr
      static let epqGe6q6Text = Rswift.StringResource(key: "Epq-Ge-6q6.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Replenish my balance
      ///
      /// Locales: tr
      static let xtl2xZ4kText = Rswift.StringResource(key: "XTL-2x-z4k.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: STAR
      ///
      /// Locales: tr
      static let dzeBeCdzText = Rswift.StringResource(key: "dze-be-cdz.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Search...
      ///
      /// Locales: tr
      static let vJbAZVo2Placeholder = Rswift.StringResource(key: "VJb-aZ-Vo2.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: See Profile visitor
      ///
      /// Locales: tr
      static let csIMdHhDText = Rswift.StringResource(key: "csI-Md-hhD.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: See profile visitors
      ///
      /// Locales: tr
      static let wqOOmAibText = Rswift.StringResource(key: "wqO-Om-aib.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Select Friend
      ///
      /// Locales: tr
      static let jdYYO0AkText = Rswift.StringResource(key: "JdY-YO-0Ak.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Send Gift
      ///
      /// Locales: tr
      static let gVbEWCUcNormalTitle = Rswift.StringResource(key: "gVb-eW-cUc.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Send money to Friends
      ///
      /// Locales: tr
      static let yxcChOGlText = Rswift.StringResource(key: "YXC-ch-oGl.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Share
      ///
      /// Locales: tr
      static let cn7L8ZVZNormalTitle = Rswift.StringResource(key: "Cn7-L8-ZVZ.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Share
      ///
      /// Locales: tr
      static let ogGvDg1Text = Rswift.StringResource(key: "8OG-gv-dg1.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Share
      ///
      /// Locales: tr
      static let t1AhASyNormalTitle = Rswift.StringResource(key: "4t1-ah-aSy.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Share Post
      ///
      /// Locales: tr
      static let qbEhIUqText = Rswift.StringResource(key: "3Qb-Eh-iUq.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Share to my Timeline
      ///
      /// Locales: tr
      static let kXlKNCO2Text = Rswift.StringResource(key: "kXl-kN-cO2.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Show / Hide last seen
      ///
      /// Locales: tr
      static let b0UE78fPText = Rswift.StringResource(key: "B0U-E7-8fP.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Show / Hide last seen
      ///
      /// Locales: tr
      static let rL66KtText = Rswift.StringResource(key: "26r-L6-6Kt.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Upgrade Now
      ///
      /// Locales: tr
      static let hSBZfDliNormalTitle = Rswift.StringResource(key: "hSB-zf-Dli.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Verified badge
      ///
      /// Locales: tr
      static let fIeVZJUPText = Rswift.StringResource(key: "fIe-VZ-jUP.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Verified badge
      ///
      /// Locales: tr
      static let g76FVGUjText = Rswift.StringResource(key: "g76-FV-GUj.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: View Liked Pages By User
      ///
      /// Locales: tr
      static let jUWQKBcJText = Rswift.StringResource(key: "jUW-qK-bcJ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: What's going on ? #Hashtag.. @Mention.
      ///
      /// Locales: tr
      static let vmSZ7D0rText = Rswift.StringResource(key: "VmS-z7-D0r.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: What's going on?#Hashtag..@Mention
      ///
      /// Locales: tr
      static let wllBoSbXText = Rswift.StringResource(key: "wll-Bo-SbX.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: YES
      ///
      /// Locales: tr
      static let yevR6E2JNormalTitle = Rswift.StringResource(key: "Yev-R6-E2J.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Your Story
      ///
      /// Locales: tr
      static let yjC2pTXdText = Rswift.StringResource(key: "YjC-2p-TXd.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: ubaid Javaid
      ///
      /// Locales: tr
      static let ygbwiihText = Rswift.StringResource(key: "4YG-BW-iIH.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: you can send money to your Firend acquaintances or anyone
      ///
      /// Locales: tr
      static let zoEQTJjiText = Rswift.StringResource(key: "zoE-qT-Jji.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)

      /// tr translation:  
      ///
      /// Locales: tr
      static func fwIuVfsNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1FW-Iu-vfs.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "1FW-Iu-vfs.normalTitle"
        }

        return NSLocalizedString("1FW-Iu-vfs.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:  
      ///
      /// Locales: tr
      static func zHfUE6cANormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZHf-UE-6cA.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ZHf-UE-6cA.normalTitle"
        }

        return NSLocalizedString("ZHf-UE-6cA.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:        Help & Support
      ///
      /// Locales: tr
      static func pimCsN0ONormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PIM-cs-N0O.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "PIM-cs-N0O.normalTitle"
        }

        return NSLocalizedString("PIM-cs-N0O.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:       Funding
      ///
      /// Locales: tr
      static func cKuUkPclNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CKu-Uk-pcl.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "CKu-Uk-pcl.normalTitle"
        }

        return NSLocalizedString("CKu-Uk-pcl.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:      Events
      ///
      /// Locales: tr
      static func kLb01SzANormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KLb-01-SzA.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "KLb-01-SzA.normalTitle"
        }

        return NSLocalizedString("KLb-01-SzA.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:      Logout
      ///
      /// Locales: tr
      static func qcnRvCNfNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qcn-Rv-CNf.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qcn-Rv-CNf.normalTitle"
        }

        return NSLocalizedString("qcn-Rv-CNf.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:      MarketPlace
      ///
      /// Locales: tr
      static func ghtS62UgNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ght-S6-2Ug.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ght-S6-2Ug.normalTitle"
        }

        return NSLocalizedString("ght-S6-2Ug.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:      Notifications
      ///
      /// Locales: tr
      static func nMGgZDsNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0nM-gg-ZDs.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "0nM-gg-ZDs.normalTitle"
        }

        return NSLocalizedString("0nM-gg-ZDs.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:      Offers
      ///
      /// Locales: tr
      static func vcCGa6o7NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VcC-ga-6o7.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "VcC-ga-6o7.normalTitle"
        }

        return NSLocalizedString("VcC-ga-6o7.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:      Pages
      ///
      /// Locales: tr
      static func ztiDWC4NNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Zti-DW-C4N.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Zti-DW-C4N.normalTitle"
        }

        return NSLocalizedString("Zti-DW-C4N.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:      Popular Posts
      ///
      /// Locales: tr
      static func fesC3G5KNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fes-C3-g5K.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "fes-C3-g5K.normalTitle"
        }

        return NSLocalizedString("fes-C3-g5K.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:     Blogs
      ///
      /// Locales: tr
      static func eGoB1XaeNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EGo-B1-Xae.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "EGo-B1-Xae.normalTitle"
        }

        return NSLocalizedString("EGo-B1-Xae.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:     Saved Posts
      ///
      /// Locales: tr
      static func gr2UWLW7NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gr2-UW-lW7.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Gr2-UW-lW7.normalTitle"
        }

        return NSLocalizedString("Gr2-UW-lW7.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:    Albums
      ///
      /// Locales: tr
      static func ggnlwYgUNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GGN-LW-YgU.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "GGN-LW-YgU.normalTitle"
        }

        return NSLocalizedString("GGN-LW-YgU.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:    Comment
      ///
      /// Locales: tr
      static func c6VPpTpTNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("C6V-Pp-TpT.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "C6V-Pp-TpT.normalTitle"
        }

        return NSLocalizedString("C6V-Pp-TpT.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:    Comment
      ///
      /// Locales: tr
      static func hchOcVgaNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hch-Oc-vga.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Hch-Oc-vga.normalTitle"
        }

        return NSLocalizedString("Hch-Oc-vga.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:    Following
      ///
      /// Locales: tr
      static func iiSOLEWNNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IiS-OL-eWN.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "IiS-OL-eWN.normalTitle"
        }

        return NSLocalizedString("IiS-OL-eWN.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:    General Account
      ///
      /// Locales: tr
      static func hppFuVllNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hpp-fu-Vll.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hpp-fu-Vll.normalTitle"
        }

        return NSLocalizedString("hpp-fu-Vll.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:    Groups
      ///
      /// Locales: tr
      static func vyoRhRNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("28V-yO-rhR.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "28V-yO-rhR.normalTitle"
        }

        return NSLocalizedString("28V-yO-rhR.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:    Message
      ///
      /// Locales: tr
      static func v0JMMXgiNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("v0J-MM-xgi.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "v0J-MM-xgi.normalTitle"
        }

        return NSLocalizedString("v0J-MM-xgi.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:    More Options
      ///
      /// Locales: tr
      static func vHl3p6GFNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vHl-3p-6GF.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "vHl-3p-6GF.normalTitle"
        }

        return NSLocalizedString("vHl-3p-6GF.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:    My Images
      ///
      /// Locales: tr
      static func mAcTLQ0bNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mAc-tL-Q0b.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "mAc-tL-Q0b.normalTitle"
        }

        return NSLocalizedString("mAc-tL-Q0b.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:    My Profile
      ///
      /// Locales: tr
      static func h60NMHQVNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("H60-NM-hQV.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "H60-NM-hQV.normalTitle"
        }

        return NSLocalizedString("H60-NM-hQV.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:    My Videos
      ///
      /// Locales: tr
      static func rjzdx6VKNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RJZ-dX-6VK.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "RJZ-dX-6VK.normalTitle"
        }

        return NSLocalizedString("RJZ-dX-6VK.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:    Pokes
      ///
      /// Locales: tr
      static func gGhGVLEpNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gGh-GV-lEp.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gGh-GV-lEp.normalTitle"
        }

        return NSLocalizedString("gGh-GV-lEp.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:    Privacy
      ///
      /// Locales: tr
      static func yukFkDkZNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yuk-fk-DkZ.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yuk-fk-DkZ.normalTitle"
        }

        return NSLocalizedString("yuk-fk-DkZ.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:    Share
      ///
      /// Locales: tr
      static func grffe2ANormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0GR-fF-e2A.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "0GR-fF-e2A.normalTitle"
        }

        return NSLocalizedString("0GR-fF-e2A.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:    Share
      ///
      /// Locales: tr
      static func urUE8paNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4ur-UE-8pa.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4ur-UE-8pa.normalTitle"
        }

        return NSLocalizedString("4ur-UE-8pa.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:    Share to a Group
      ///
      /// Locales: tr
      static func ow85WhENormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4ow-85-WhE.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4ow-85-WhE.normalTitle"
        }

        return NSLocalizedString("4ow-85-WhE.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:    Share to a Page
      ///
      /// Locales: tr
      static func mItSPEuKNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MIt-SP-euK.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "MIt-SP-euK.normalTitle"
        }

        return NSLocalizedString("MIt-SP-euK.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:    Share to my Timeline
      ///
      /// Locales: tr
      static func qyh7f62wNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Qyh-7f-62w.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Qyh-7f-62w.normalTitle"
        }

        return NSLocalizedString("Qyh-7f-62w.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:    Tell a Friends
      ///
      /// Locales: tr
      static func zarHd22jNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZAR-Hd-22j.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ZAR-Hd-22j.normalTitle"
        }

        return NSLocalizedString("ZAR-Hd-22j.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:   Like
      ///
      /// Locales: tr
      static func q1HUHL4hNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Q1H-uH-l4h.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Q1H-uH-l4h.normalTitle"
        }

        return NSLocalizedString("Q1H-uH-l4h.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:   Like
      ///
      /// Locales: tr
      static func vt6ULSAyNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Vt6-UL-sAy.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Vt6-UL-sAy.normalTitle"
        }

        return NSLocalizedString("Vt6-UL-sAy.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: $3
      ///
      /// Locales: tr
      static func odcF0LxVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Odc-f0-LxV.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Odc-f0-LxV.text"
        }

        return NSLocalizedString("Odc-f0-LxV.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: 0
      ///
      /// Locales: tr
      static func gklABJa7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gkl-AB-Ja7.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gkl-AB-Ja7.text"
        }

        return NSLocalizedString("gkl-AB-Ja7.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: 0
      ///
      /// Locales: tr
      static func vd8BI4GText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1VD-8B-i4G.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "1VD-8B-i4G.text"
        }

        return NSLocalizedString("1VD-8B-i4G.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: 12.52
      ///
      /// Locales: tr
      static func gubOfYGuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gub-Of-yGu.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Gub-Of-yGu.text"
        }

        return NSLocalizedString("Gub-Of-yGu.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: 12.52
      ///
      /// Locales: tr
      static func inJI2Gf8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("inJ-I2-Gf8.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "inJ-I2-Gf8.text"
        }

        return NSLocalizedString("inJ-I2-Gf8.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Activities
      ///
      /// Locales: tr
      static func cGARLDUITitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cGA-RL-DUI.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "cGA-RL-DUI.title"
        }

        return NSLocalizedString("cGA-RL-DUI.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Add Funds
      ///
      /// Locales: tr
      static func h4ByA9FNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4h4-by-A9F.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4h4-by-A9F.normalTitle"
        }

        return NSLocalizedString("4h4-by-A9F.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Add a comment here
      ///
      /// Locales: tr
      static func bKgCbRR6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BKg-Cb-rR6.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "BKg-Cb-rR6.text"
        }

        return NSLocalizedString("BKg-Cb-rR6.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Add a comment here
      ///
      /// Locales: tr
      static func e7rFkLjUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("e7r-fk-ljU.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "e7r-fk-ljU.text"
        }

        return NSLocalizedString("e7r-fk-ljU.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Amount
      ///
      /// Locales: tr
      static func d2vB3FCtPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("d2v-B3-fCt.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "d2v-B3-fCt.placeholder"
        }

        return NSLocalizedString("d2v-B3-fCt.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Amount
      ///
      /// Locales: tr
      static func fPb1z6UePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FPb-1z-6Ue.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "FPb-1z-6Ue.placeholder"
        }

        return NSLocalizedString("FPb-1z-6Ue.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Block
      ///
      /// Locales: tr
      static func pIhHJGwoNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PIh-hJ-Gwo.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "PIh-hJ-Gwo.normalTitle"
        }

        return NSLocalizedString("PIh-hJ-Gwo.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Button
      ///
      /// Locales: tr
      static func bfqUdZ7GNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bfq-ud-z7G.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "bfq-ud-z7G.normalTitle"
        }

        return NSLocalizedString("bfq-ud-z7G.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Button
      ///
      /// Locales: tr
      static func jvQ046ANormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4jv-q0-46A.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4jv-q0-46A.normalTitle"
        }

        return NSLocalizedString("4jv-q0-46A.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: CONTINUE
      ///
      /// Locales: tr
      static func acmAwJsCNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("acm-aw-jsC.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "acm-aw-jsC.normalTitle"
        }

        return NSLocalizedString("acm-aw-jsC.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: CONTINUE
      ///
      /// Locales: tr
      static func wImDyGWcNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wIm-Dy-GWc.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wIm-Dy-GWc.normalTitle"
        }

        return NSLocalizedString("wIm-Dy-GWc.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Cancel
      ///
      /// Locales: tr
      static func lLpBF44fNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LLp-BF-44f.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "LLp-BF-44f.normalTitle"
        }

        return NSLocalizedString("LLp-BF-44f.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Cancel
      ///
      /// Locales: tr
      static func oRzBV1wqNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ORz-BV-1wq.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ORz-BV-1wq.normalTitle"
        }

        return NSLocalizedString("ORz-BV-1wq.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Close
      ///
      /// Locales: tr
      static func rH0RwJJ9NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rH0-rw-jJ9.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rH0-rw-jJ9.normalTitle"
        }

        return NSLocalizedString("rH0-rw-jJ9.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Copy Link
      ///
      /// Locales: tr
      static func pjT2ENormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("998-pj-T2E.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "998-pj-T2E.normalTitle"
        }

        return NSLocalizedString("998-pj-T2E.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Current Balance
      ///
      /// Locales: tr
      static func ch4Dl5E3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ch4-dl-5E3.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Ch4-dl-5E3.text"
        }

        return NSLocalizedString("Ch4-dl-5E3.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Current Balance
      ///
      /// Locales: tr
      static func o94HiUihText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("O94-hi-Uih.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "O94-hi-Uih.text"
        }

        return NSLocalizedString("O94-hi-Uih.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Discount
      ///
      /// Locales: tr
      static func baqmueQdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BAQ-MU-eQd.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "BAQ-MU-eQd.text"
        }

        return NSLocalizedString("BAQ-MU-eQd.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Email OR UserName
      ///
      /// Locales: tr
      static func bayqg3LyPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BAY-qG-3Ly.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "BAY-qG-3Ly.placeholder"
        }

        return NSLocalizedString("BAY-qG-3Ly.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Feature member
      ///
      /// Locales: tr
      static func tuA2H1DText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9tu-a2-h1D.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "9tu-a2-h1D.text"
        }

        return NSLocalizedString("9tu-a2-h1D.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Featured member
      ///
      /// Locales: tr
      static func aZ36yO7NText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aZ3-6y-O7N.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aZ3-6y-O7N.text"
        }

        return NSLocalizedString("aZ3-6y-O7N.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Following
      ///
      /// Locales: tr
      static func nnGuYCaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8Nn-Gu-yCa.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "8Nn-Gu-yCa.text"
        }

        return NSLocalizedString("8Nn-Gu-yCa.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: GoPro
      ///
      /// Locales: tr
      static func y4JZZO8nText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("y4J-ZZ-o8n.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "y4J-ZZ-o8n.text"
        }

        return NSLocalizedString("y4J-ZZ-o8n.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Groups
      ///
      /// Locales: tr
      static func kc5yPAHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2KC-5y-pAH.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "2KC-5y-pAH.text"
        }

        return NSLocalizedString("2KC-5y-pAH.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Last seen 15 h ago
      ///
      /// Locales: tr
      static func juWX7TUbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JuW-x7-TUb.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "JuW-x7-TUb.text"
        }

        return NSLocalizedString("JuW-x7-TUb.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Menu
      ///
      /// Locales: tr
      static func zEN8PQ1VTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zEN-8P-Q1V.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "zEN-8P-Q1V.title"
        }

        return NSLocalizedString("zEN-8P-Q1V.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: More
      ///
      /// Locales: tr
      static func g7nZKOHRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("g7n-ZK-OHR.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "g7n-ZK-OHR.text"
        }

        return NSLocalizedString("g7n-ZK-OHR.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: More
      ///
      /// Locales: tr
      static func r6iSNN64Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("r6i-SN-n64.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "r6i-SN-n64.title"
        }

        return NSLocalizedString("r6i-SN-n64.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: More
      ///
      /// Locales: tr
      static func rSQ26YcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3rS-q2-6Yc.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "3rS-q2-6Yc.text"
        }

        return NSLocalizedString("3rS-q2-6Yc.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: NO
      ///
      /// Locales: tr
      static func trPyEowNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1tr-py-eow.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "1tr-py-eow.normalTitle"
        }

        return NSLocalizedString("1tr-py-eow.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: No Comments to be displayed
      ///
      /// Locales: tr
      static func a75EsRc2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a75-Es-Rc2.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "a75-Es-Rc2.text"
        }

        return NSLocalizedString("a75-Es-Rc2.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Notifications
      ///
      /// Locales: tr
      static func iy3W7YOBTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iy3-W7-yOB.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "iy3-W7-yOB.title"
        }

        return NSLocalizedString("iy3-W7-yOB.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Pages
      ///
      /// Locales: tr
      static func mmmPpOEcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MMM-Pp-OEc.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "MMM-Pp-OEc.text"
        }

        return NSLocalizedString("MMM-Pp-OEc.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Pages promotion
      ///
      /// Locales: tr
      static func hPzLJHknText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hPz-LJ-hkn.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hPz-LJ-hkn.text"
        }

        return NSLocalizedString("hPz-LJ-hkn.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Pages promotions
      ///
      /// Locales: tr
      static func vhtJ5VcqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vht-J5-Vcq.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "vht-J5-Vcq.text"
        }

        return NSLocalizedString("vht-J5-Vcq.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Per Week
      ///
      /// Locales: tr
      static func wHYErZTWText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wHY-er-ZTW.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wHY-er-ZTW.text"
        }

        return NSLocalizedString("wHY-er-ZTW.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Photos
      ///
      /// Locales: tr
      static func gJPKeKlvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gJP-ke-klv.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gJP-ke-klv.text"
        }

        return NSLocalizedString("gJP-ke-klv.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Pick Your Plan
      ///
      /// Locales: tr
      static func ifemvTiZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IFE-MV-TiZ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "IFE-MV-TiZ.text"
        }

        return NSLocalizedString("IFE-MV-TiZ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Poke
      ///
      /// Locales: tr
      static func pQO35Gx5NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pQO-35-gx5.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "pQO-35-gx5.normalTitle"
        }

        return NSLocalizedString("pQO-35-gx5.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Post Reaction
      ///
      /// Locales: tr
      static func rchebkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("59R-cH-EBK.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "59R-cH-EBK.text"
        }

        return NSLocalizedString("59R-cH-EBK.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Posts promotion
      ///
      /// Locales: tr
      static func kYhNYKezText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KYh-nY-kez.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "KYh-nY-kez.text"
        }

        return NSLocalizedString("KYh-nY-kez.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Posts promotion
      ///
      /// Locales: tr
      static func oSG59pRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7oS-g5-9pR.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "7oS-g5-9pR.text"
        }

        return NSLocalizedString("7oS-g5-9pR.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Pro Features give you Complete control over your Profile
      ///
      /// Locales: tr
      static func v8V7DLw3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("v8V-7D-lw3.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "v8V-7D-lw3.text"
        }

        return NSLocalizedString("v8V-7D-lw3.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Profile Picture
      ///
      /// Locales: tr
      static func epqGe6q6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Epq-Ge-6q6.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Epq-Ge-6q6.text"
        }

        return NSLocalizedString("Epq-Ge-6q6.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Replenish my balance
      ///
      /// Locales: tr
      static func xtl2xZ4kText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XTL-2x-z4k.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "XTL-2x-z4k.text"
        }

        return NSLocalizedString("XTL-2x-z4k.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: STAR
      ///
      /// Locales: tr
      static func dzeBeCdzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dze-be-cdz.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "dze-be-cdz.text"
        }

        return NSLocalizedString("dze-be-cdz.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Search...
      ///
      /// Locales: tr
      static func vJbAZVo2Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VJb-aZ-Vo2.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "VJb-aZ-Vo2.placeholder"
        }

        return NSLocalizedString("VJb-aZ-Vo2.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: See Profile visitor
      ///
      /// Locales: tr
      static func csIMdHhDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("csI-Md-hhD.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "csI-Md-hhD.text"
        }

        return NSLocalizedString("csI-Md-hhD.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: See profile visitors
      ///
      /// Locales: tr
      static func wqOOmAibText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wqO-Om-aib.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wqO-Om-aib.text"
        }

        return NSLocalizedString("wqO-Om-aib.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Select Friend
      ///
      /// Locales: tr
      static func jdYYO0AkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JdY-YO-0Ak.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "JdY-YO-0Ak.text"
        }

        return NSLocalizedString("JdY-YO-0Ak.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Send Gift
      ///
      /// Locales: tr
      static func gVbEWCUcNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gVb-eW-cUc.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gVb-eW-cUc.normalTitle"
        }

        return NSLocalizedString("gVb-eW-cUc.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Send money to Friends
      ///
      /// Locales: tr
      static func yxcChOGlText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YXC-ch-oGl.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "YXC-ch-oGl.text"
        }

        return NSLocalizedString("YXC-ch-oGl.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Share
      ///
      /// Locales: tr
      static func cn7L8ZVZNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cn7-L8-ZVZ.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Cn7-L8-ZVZ.normalTitle"
        }

        return NSLocalizedString("Cn7-L8-ZVZ.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Share
      ///
      /// Locales: tr
      static func ogGvDg1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8OG-gv-dg1.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "8OG-gv-dg1.text"
        }

        return NSLocalizedString("8OG-gv-dg1.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Share
      ///
      /// Locales: tr
      static func t1AhASyNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4t1-ah-aSy.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4t1-ah-aSy.normalTitle"
        }

        return NSLocalizedString("4t1-ah-aSy.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Share Post
      ///
      /// Locales: tr
      static func qbEhIUqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3Qb-Eh-iUq.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "3Qb-Eh-iUq.text"
        }

        return NSLocalizedString("3Qb-Eh-iUq.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Share to my Timeline
      ///
      /// Locales: tr
      static func kXlKNCO2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kXl-kN-cO2.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "kXl-kN-cO2.text"
        }

        return NSLocalizedString("kXl-kN-cO2.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Show / Hide last seen
      ///
      /// Locales: tr
      static func b0UE78fPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("B0U-E7-8fP.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "B0U-E7-8fP.text"
        }

        return NSLocalizedString("B0U-E7-8fP.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Show / Hide last seen
      ///
      /// Locales: tr
      static func rL66KtText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("26r-L6-6Kt.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "26r-L6-6Kt.text"
        }

        return NSLocalizedString("26r-L6-6Kt.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Upgrade Now
      ///
      /// Locales: tr
      static func hSBZfDliNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hSB-zf-Dli.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hSB-zf-Dli.normalTitle"
        }

        return NSLocalizedString("hSB-zf-Dli.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Verified badge
      ///
      /// Locales: tr
      static func fIeVZJUPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fIe-VZ-jUP.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "fIe-VZ-jUP.text"
        }

        return NSLocalizedString("fIe-VZ-jUP.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Verified badge
      ///
      /// Locales: tr
      static func g76FVGUjText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("g76-FV-GUj.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "g76-FV-GUj.text"
        }

        return NSLocalizedString("g76-FV-GUj.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: View Liked Pages By User
      ///
      /// Locales: tr
      static func jUWQKBcJText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jUW-qK-bcJ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "jUW-qK-bcJ.text"
        }

        return NSLocalizedString("jUW-qK-bcJ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: What's going on ? #Hashtag.. @Mention.
      ///
      /// Locales: tr
      static func vmSZ7D0rText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VmS-z7-D0r.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "VmS-z7-D0r.text"
        }

        return NSLocalizedString("VmS-z7-D0r.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: What's going on?#Hashtag..@Mention
      ///
      /// Locales: tr
      static func wllBoSbXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wll-Bo-SbX.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wll-Bo-SbX.text"
        }

        return NSLocalizedString("wll-Bo-SbX.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: YES
      ///
      /// Locales: tr
      static func yevR6E2JNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yev-R6-E2J.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Yev-R6-E2J.normalTitle"
        }

        return NSLocalizedString("Yev-R6-E2J.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Your Story
      ///
      /// Locales: tr
      static func yjC2pTXdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YjC-2p-TXd.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "YjC-2p-TXd.text"
        }

        return NSLocalizedString("YjC-2p-TXd.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: ubaid Javaid
      ///
      /// Locales: tr
      static func ygbwiihText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4YG-BW-iIH.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4YG-BW-iIH.text"
        }

        return NSLocalizedString("4YG-BW-iIH.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: you can send money to your Firend acquaintances or anyone
      ///
      /// Locales: tr
      static func zoEQTJjiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zoE-qT-Jji.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "zoE-qT-Jji.text"
        }

        return NSLocalizedString("zoE-qT-Jji.text", tableName: "Main", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AboutTableItem.validate()
      try _ActivitiesCollectionItem.validate()
      try _ActivitiesSectionTwoTableItem.validate()
      try _AddCommentCell.validate()
      try _AddPostCell.validate()
      try _AddPostSectionOneTableItem.validate()
      try _AddPostSectionThreeCollectionItem.validate()
      try _BlockedUsersTableItem.validate()
      try _BlogCell.validate()
      try _CommentCellTableViewCell.validate()
      try _CoverView.validate()
      try _DetailOfferTableItem.validate()
      try _DonationPostCell.validate()
      try _EventCell.validate()
      try _EventCollectionCell.validate()
      try _FollowRequestCell.validate()
      try _ForgetPasswordTableItem.validate()
      try _FriendRequestCell.validate()
      try _FundingDetailsSectionOneTableItem.validate()
      try _GIFCollectionItem.validate()
      try _GetFundingTableItem.validate()
      try _GetOffersTableItem.validate()
      try _GifImageCell.validate()
      try _GroupCategoryCollectionCell.validate()
      try _GroupCell.validate()
      try _GroupCoverCell.validate()
      try _HomeAddPostCell.validate()
      try _IntroImageSlider.validate()
      try _InvitationLinkCell.validate()
      try _JobAppliesCell.validate()
      try _LikeAndCommentCell.validate()
      try _LikePagesCell.validate()
      try _LiveCommentCell.validate()
      try _LoginTableItem.validate()
      try _ManageSessionTableItem.validate()
      try _MentionUserTableItem.validate()
      try _MoreItemCell.validate()
      try _MoviesTableItem.validate()
      try _MultiImage2.validate()
      try _MultiImage3.validate()
      try _MusicCell.validate()
      try _MyFollowingCell.validate()
      try _MyPointSecionOneTableItem.validate()
      try _MyProfileCell.validate()
      try _NewsFeedCell.validate()
      try _NormalPostCell.validate()
      try _NotificationsTableItem.validate()
      try _PageCoverCell.validate()
      try _PageReviewCell.validate()
      try _PhotoAlbum2.validate()
      try _PhotoAlbum3.validate()
      try _PhotoAlbumCell.validate()
      try _PostJobCell.validate()
      try _PostLiveCell.validate()
      try _PostOptionCell.validate()
      try _PostPDFCell.validate()
      try _PostShareCell.validate()
      try _PostWithLinkCell.validate()
      try _PostYoutubeCell.validate()
      try _PostwithBg_imageCell.validate()
      try _ProductCell.validate()
      try _ProductDetailCell.validate()
      try _RegisterStartTableItem.validate()
      try _RegisterTableItem.validate()
      try _SearchPostCell.validate()
      try _SelectUserTableItem.validate()
      try _StoryCells.validate()
      try _SuggestedGroupCollectionCell.validate()
      try _SuggestedGroupTableCell.validate()
      try _SuggestedUserCollectionCell.validate()
      try _SuggestedUserTableCell.validate()
      try _TrendingCell.validate()
      try _UserCell.validate()
      try _UserCoverView.validate()
      try _UserDonationCell.validate()
      try _UserInfoCell.validate()
      try _VideoCell.validate()
      try _VoiceCommentCell.validate()
    }

    struct _AboutTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AboutTableItem

      let bundle = R.hostingBundle
      let identifier = "AboutTableItem"
      let name = "AboutTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AboutTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AboutTableItem
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "eye.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'eye.fill' is used in nib 'AboutTableItem', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "medal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'medal' is used in nib 'AboutTableItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus' is used in nib 'AboutTableItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shareTemp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shareTemp' is used in nib 'AboutTableItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ActivitiesCollectionItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ActivitiesCollectionItem

      let bundle = R.hostingBundle
      let identifier = "ActivitiesCollectionItem"
      let name = "ActivitiesCollectionItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActivitiesCollectionItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActivitiesCollectionItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "rocket-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rocket-1' is used in nib 'ActivitiesCollectionItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'ActivitiesCollectionItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ActivitiesSectionOneTableitem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ActivitiesSectionOneTableitem

      let bundle = R.hostingBundle
      let identifier = "ActivitiesSectionOneTableitem"
      let name = "ActivitiesSectionOneTableitem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActivitiesSectionOneTableitem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActivitiesSectionOneTableitem
      }

      fileprivate init() {}
    }

    struct _ActivitiesSectionTwoTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ActivitiesSectionTwoTableItem

      let bundle = R.hostingBundle
      let identifier = "ActivitiesSectionTwoTableItem"
      let name = "ActivitiesSectionTwoTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActivitiesSectionTwoTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActivitiesSectionTwoTableItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'ActivitiesSectionTwoTableItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'ActivitiesSectionTwoTableItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ActivitiesThreeTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ActivitiesThreeTableItem

      let bundle = R.hostingBundle
      let identifier = "ActivitiesThreeTableItem"
      let name = "ActivitiesThreeTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActivitiesThreeTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActivitiesThreeTableItem
      }

      fileprivate init() {}
    }

    struct _AddCommentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AddCommentCell

      let bundle = R.hostingBundle
      let identifier = "AddBlogComment"
      let name = "AddCommentCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddCommentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddCommentCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "right-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'right-arrow' is used in nib 'AddCommentCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AddPostCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AddPostCell

      let bundle = R.hostingBundle
      let identifier = "AddPostCells"
      let name = "AddPostCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddPostCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddPostCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "moress", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'moress' is used in nib 'AddPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "photo-camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photo-camera' is used in nib 'AddPostCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AddPostSectionFourTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AddPostSectionFourTableItem

      let bundle = R.hostingBundle
      let identifier = "AddPostSectionFourTableItem"
      let name = "AddPostSectionFourTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddPostSectionFourTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddPostSectionFourTableItem
      }

      fileprivate init() {}
    }

    struct _AddPostSectionOneTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AddPostSectionOneTableItem

      let bundle = R.hostingBundle
      let identifier = "AddPostSectionOneTableItem"
      let name = "AddPostSectionOneTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddPostSectionOneTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddPostSectionOneTableItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'AddPostSectionOneTableItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AddPostSectionThreeCollectionItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AddPostSectionThreeCollectionItem

      let bundle = R.hostingBundle
      let identifier = "AddPostSectionThreeCollectionItem"
      let name = "AddPostSectionThreeCollectionItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddPostSectionThreeCollectionItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddPostSectionThreeCollectionItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_remove_item", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_remove_item' is used in nib 'AddPostSectionThreeCollectionItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_item_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_item_placeholder' is used in nib 'AddPostSectionThreeCollectionItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AddPostSectionThreeTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AddPostSectionThreeTableItem

      let bundle = R.hostingBundle
      let identifier = "AddPostSectionThreeTableItem"
      let name = "AddPostSectionThreeTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddPostSectionThreeTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddPostSectionThreeTableItem
      }

      fileprivate init() {}
    }

    struct _AddPostSectionTwoCollectionItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AddPostSectionTwoCollectionItem

      let bundle = R.hostingBundle
      let identifier = "AddPostSectionTwoCollectionItem"
      let name = "AddPostSectionTwoCollectionItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddPostSectionTwoCollectionItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddPostSectionTwoCollectionItem
      }

      fileprivate init() {}
    }

    struct _AddPostSectionTwoTableItem: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddPostSectionTwoTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddPostSectionTwoTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddPostSectionTwoTableItem
      }

      fileprivate init() {}
    }

    struct _ArticleDetailCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ArticleDetailCell

      let bundle = R.hostingBundle
      let identifier = "ArticleDetails"
      let name = "ArticleDetailCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleDetailCell
      }

      fileprivate init() {}
    }

    struct _BlockedUsersTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BlockedUsersTableItem

      let bundle = R.hostingBundle
      let identifier = "BlockedUsersTableItem"
      let name = "BlockedUsersTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlockedUsersTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlockedUsersTableItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'BlockedUsersTableItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _BlogCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BlogCell

      let bundle = R.hostingBundle
      let identifier = "BlogCell"
      let name = "BlogCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "NewsFeed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NewsFeed' is used in nib 'BlogCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'BlogCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "d-cover", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'd-cover' is used in nib 'BlogCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comments_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comments_small' is used in nib 'BlogCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_small' is used in nib 'BlogCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'BlogCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'BlogCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'BlogCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'BlogCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CommentCellTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CommentCellTableViewCell

      let bundle = R.hostingBundle
      let identifier = "CommentsCell"
      let name = "CommentCellTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentCellTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentCellTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "noContent", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'noContent' is used in nib 'CommentCellTableViewCell', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "play.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'play.fill' is used in nib 'CommentCellTableViewCell', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'CommentCellTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CoverView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CoverView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoverView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoverView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_play' is used in nib 'CoverView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CreateJobCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CreateJobCell

      let bundle = R.hostingBundle
      let identifier = "CreateJob"
      let name = "CreateJobCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CreateJobCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CreateJobCell
      }

      fileprivate init() {}
    }

    struct _CustomFooterView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CustomFooterView

      let bundle = R.hostingBundle
      let identifier = "RefreshFooterView"
      let name = "CustomFooterView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomFooterView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomFooterView
      }

      fileprivate init() {}
    }

    struct _DetailOfferTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = DetailOfferTableItem

      let bundle = R.hostingBundle
      let identifier = "DetailOfferTableItem"
      let name = "DetailOfferTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailOfferTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailOfferTableItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "d-cover", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'd-cover' is used in nib 'DetailOfferTableItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "left-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left-arrow' is used in nib 'DetailOfferTableItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'DetailOfferTableItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DonationPostCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = DonationPostCell

      let bundle = R.hostingBundle
      let identifier = "DonationPost"
      let name = "DonationPostCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DonationPostCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DonationPostCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "clockBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clockBlack' is used in nib 'DonationPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'DonationPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "d-cover", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'd-cover' is used in nib 'DonationPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comments_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comments_small' is used in nib 'DonationPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_small' is used in nib 'DonationPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'DonationPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'DonationPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'DonationPostCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EventCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EventCell

      let bundle = R.hostingBundle
      let identifier = "EventCell"
      let name = "EventCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'EventCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "d-cover", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'd-cover' is used in nib 'EventCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comments_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comments_small' is used in nib 'EventCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_location_place", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_location_place' is used in nib 'EventCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_small' is used in nib 'EventCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'EventCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'EventCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'EventCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'EventCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EventCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EventCollectionCell

      let bundle = R.hostingBundle
      let identifier = "EventCollectionCells"
      let name = "EventCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "d-cover", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'd-cover' is used in nib 'EventCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_location_place", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_location_place' is used in nib 'EventCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FollowRequestCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FollowRequestCell

      let bundle = R.hostingBundle
      let identifier = "RequestCell"
      let name = "FollowRequestCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FollowRequestCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FollowRequestCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Cover_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Cover_image' is used in nib 'FollowRequestCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in nib 'FollowRequestCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tick", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tick' is used in nib 'FollowRequestCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ForgetPasswordTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ForgetPasswordTableItem

      let bundle = R.hostingBundle
      let identifier = "ForgetPasswordTableItem"
      let name = "ForgetPasswordTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ForgetPasswordTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ForgetPasswordTableItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "left-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left-arrow' is used in nib 'ForgetPasswordTableItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "loginImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'loginImage' is used in nib 'ForgetPasswordTableItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FriendRequestCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FriendRequestCell

      let bundle = R.hostingBundle
      let identifier = "FriendRequestcell"
      let name = "FriendRequestCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FriendRequestCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FriendRequestCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Cover_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Cover_image' is used in nib 'FriendRequestCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "d-cover", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'd-cover' is used in nib 'FriendRequestCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FundingDetailsSectionOneTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FundingDetailsSectionOneTableItem

      let bundle = R.hostingBundle
      let identifier = "FundingDetailsSectionOneTableItem"
      let name = "FundingDetailsSectionOneTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FundingDetailsSectionOneTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FundingDetailsSectionOneTableItem
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "clock") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'clock' is used in nib 'FundingDetailsSectionOneTableItem', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "left-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left-arrow' is used in nib 'FundingDetailsSectionOneTableItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'FundingDetailsSectionOneTableItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GIFCollectionItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = GIFCollectionItem

      let bundle = R.hostingBundle
      let identifier = "GIFCollectionItem"
      let name = "GIFCollectionItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GIFCollectionItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GIFCollectionItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "imageView:Na2-LH-qME:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:Na2-LH-qME:image' is used in nib 'GIFCollectionItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GetFundingTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = GetFundingTableItem

      let bundle = R.hostingBundle
      let identifier = "GetFundingTableItem"
      let name = "GetFundingTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GetFundingTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GetFundingTableItem
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "clock") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'clock' is used in nib 'GetFundingTableItem', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GetOffersTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = GetOffersTableItem

      let bundle = R.hostingBundle
      let identifier = "GetOffersTableItem"
      let name = "GetOffersTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GetOffersTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GetOffersTableItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Cover_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Cover_image' is used in nib 'GetOffersTableItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "commerce", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commerce' is used in nib 'GetOffersTableItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GifImageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = GifImageCell

      let bundle = R.hostingBundle
      let identifier = "GifCell"
      let name = "GifImageCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GifImageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GifImageCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'GifImageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comments_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comments_small' is used in nib 'GifImageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_small' is used in nib 'GifImageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'GifImageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'GifImageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'GifImageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'GifImageCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GroupCategoryCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = GroupCategoryCollectionCell

      let bundle = R.hostingBundle
      let identifier = "GroupCateCollectionCell"
      let name = "GroupCategoryCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GroupCategoryCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GroupCategoryCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "CategoriesIMg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CategoriesIMg' is used in nib 'GroupCategoryCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GroupCategoryTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = GroupCategoryTableCell

      let bundle = R.hostingBundle
      let identifier = "GroupCateTableCell"
      let name = "GroupCategoryTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GroupCategoryTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GroupCategoryTableCell
      }

      fileprivate init() {}
    }

    struct _GroupCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = GroupCell

      let bundle = R.hostingBundle
      let identifier = "GroupCell"
      let name = "GroupCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GroupCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GroupCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'GroupCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comments_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comments_small' is used in nib 'GroupCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_small' is used in nib 'GroupCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'GroupCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'GroupCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'GroupCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GroupCoverCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = GroupCoverCell

      let bundle = R.hostingBundle
      let identifier = "GroupCover"
      let name = "GroupCoverCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GroupCoverCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GroupCoverCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group' is used in nib 'GroupCoverCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Shape-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Shape-1' is used in nib 'GroupCoverCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Shape-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Shape-2' is used in nib 'GroupCoverCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "addusers", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'addusers' is used in nib 'GroupCoverCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "d-cover", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'd-cover' is used in nib 'GroupCoverCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "friends", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'friends' is used in nib 'GroupCoverCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "left-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left-arrow' is used in nib 'GroupCoverCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pencil-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pencil-black' is used in nib 'GroupCoverCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HelpSupportTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HelpSupportTableItem

      let bundle = R.hostingBundle
      let identifier = "HelpSupportTableItem"
      let name = "HelpSupportTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HelpSupportTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HelpSupportTableItem
      }

      fileprivate init() {}
    }

    struct _HomeAddPostCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeAddPostCell

      let bundle = R.hostingBundle
      let identifier = "HomeAddPostCell"
      let name = "HomeAddPostCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeAddPostCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeAddPostCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "friends-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'friends-1' is used in nib 'HomeAddPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "photo-library", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photo-library' is used in nib 'HomeAddPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "video-camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'video-camera' is used in nib 'HomeAddPostCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HomeGreetings: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeGreetings

      let bundle = R.hostingBundle
      let identifier = "HomeGreetings"
      let name = "HomeGreetings"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeGreetings? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeGreetings
      }

      fileprivate init() {}
    }

    struct _HomeStroyCells: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeStroyCells

      let bundle = R.hostingBundle
      let identifier = "HomeStroyCells"
      let name = "HomeStroyCells"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeStroyCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeStroyCells
      }

      fileprivate init() {}
    }

    struct _IntroImageSlider: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "IntroImageSlider"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IntroImageSlider? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IntroImageSlider
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_rocket", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_rocket' is used in nib 'IntroImageSlider', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _InvitationLinkCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = InvitationLinkCell

      let bundle = R.hostingBundle
      let identifier = "invitationCell"
      let name = "InvitationLinkCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InvitationLinkCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvitationLinkCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "copyes", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'copyes' is used in nib 'InvitationLinkCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _JobAppliesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = JobAppliesCell

      let bundle = R.hostingBundle
      let identifier = "AppliesCell"
      let name = "JobAppliesCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobAppliesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobAppliesCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "clock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clock' is used in nib 'JobAppliesCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "copy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'copy' is used in nib 'JobAppliesCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mail' is used in nib 'JobAppliesCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pins(red)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pins(red)' is used in nib 'JobAppliesCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LikeAndCommentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LikeAndCommentCell

      let bundle = R.hostingBundle
      let identifier = "LikeCommentCell"
      let name = "LikeAndCommentCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LikeAndCommentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LikeAndCommentCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'LikeAndCommentCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'LikeAndCommentCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LikePagesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LikePagesCell

      let bundle = R.hostingBundle
      let identifier = "LikePage"
      let name = "LikePagesCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LikePagesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LikePagesCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "calendars", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'calendars' is used in nib 'LikePagesCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'LikePagesCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LiveCommentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LiveCommentCell

      let bundle = R.hostingBundle
      let identifier = "liveCommentsCell"
      let name = "LiveCommentCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LiveCommentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LiveCommentCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "d-cover", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'd-cover' is used in nib 'LiveCommentCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LoginTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LoginTableItem

      let bundle = R.hostingBundle
      let identifier = "LoginTableItem"
      let name = "LoginTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoginTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoginTableItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "facebookLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebookLogo' is used in nib 'LoginTableItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "googleLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'googleLogo' is used in nib 'LoginTableItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "loginImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'loginImage' is used in nib 'LoginTableItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in nib 'LoginTableItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "show", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'show' is used in nib 'LoginTableItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ManageSessionTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ManageSessionTableItem

      let bundle = R.hostingBundle
      let identifier = "ManageSessionTableItem"
      let name = "ManageSessionTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ManageSessionTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ManageSessionTableItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in nib 'ManageSessionTableItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MentionUserTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MentionUserTableItem

      let bundle = R.hostingBundle
      let identifier = "MentionUserTableItem"
      let name = "MentionUserTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MentionUserTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MentionUserTableItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'MentionUserTableItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MoreItemCell2: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MoreItemCell2

      let bundle = R.hostingBundle
      let identifier = "MoreImageCells2"
      let name = "MoreItemCell2"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MoreItemCell2? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MoreItemCell2
      }

      fileprivate init() {}
    }

    struct _MoreItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MoreItemCell

      let bundle = R.hostingBundle
      let identifier = "MoreItemCells"
      let name = "MoreItemCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MoreItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MoreItemCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "albums", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'albums' is used in nib 'MoreItemCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MoviesTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MoviesTableItem

      let bundle = R.hostingBundle
      let identifier = "MoviesTableItem"
      let name = "MoviesTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MoviesTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MoviesTableItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'MoviesTableItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'MoviesTableItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MultiImage2: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MultiImage2

      let bundle = R.hostingBundle
      let identifier = "MultiImage2"
      let name = "MultiImage2"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MultiImage2? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MultiImage2
      }

      static func validate() throws {
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'MultiImage2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comments_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comments_small' is used in nib 'MultiImage2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_small' is used in nib 'MultiImage2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'MultiImage2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'MultiImage2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'MultiImage2', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MultiImage3: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MultiImage3

      let bundle = R.hostingBundle
      let identifier = "MultiImage3"
      let name = "MultiImage3"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MultiImage3? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MultiImage3
      }

      static func validate() throws {
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'MultiImage3', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comments_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comments_small' is used in nib 'MultiImage3', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_small' is used in nib 'MultiImage3', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'MultiImage3', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'MultiImage3', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'MultiImage3', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'MultiImage3', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MusicCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MusicCell

      let bundle = R.hostingBundle
      let identifier = "musicCell"
      let name = "MusicCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MusicCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MusicCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Plays", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Plays' is used in nib 'MusicCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'MusicCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comments_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comments_small' is used in nib 'MusicCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_small' is used in nib 'MusicCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'MusicCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'MusicCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'MusicCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'MusicCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MyFollowingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MyFollowing_MyFollowerCell

      let bundle = R.hostingBundle
      let identifier = "MyFollower&FollowingCell"
      let name = "MyFollowingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyFollowing_MyFollowerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyFollowing_MyFollowerCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'MyFollowingCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MyPointSecionOneTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MyPointSecionOneTableItem

      let bundle = R.hostingBundle
      let identifier = "MyPointSecionOneTableItem"
      let name = "MyPointSecionOneTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPointSecionOneTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPointSecionOneTableItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'MyPointSecionOneTableItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MyPointSectionThreeTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MyPointSectionThreeTableItem

      let bundle = R.hostingBundle
      let identifier = "MyPointSectionThreeTableItem"
      let name = "MyPointSectionThreeTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPointSectionThreeTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPointSectionThreeTableItem
      }

      fileprivate init() {}
    }

    struct _MyPointSectionTwoTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MyPointSectionTwoTableItem

      let bundle = R.hostingBundle
      let identifier = "MyPointSectionTwoTableItem"
      let name = "MyPointSectionTwoTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPointSectionTwoTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPointSectionTwoTableItem
      }

      fileprivate init() {}
    }

    struct _MyProfileCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MyProfileCell

      let bundle = R.hostingBundle
      let identifier = "MyProfile"
      let name = "MyProfileCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyProfileCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyProfileCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "EditImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'EditImage' is used in nib 'MyProfileCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "coin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'coin' is used in nib 'MyProfileCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "d-cover", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'd-cover' is used in nib 'MyProfileCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "left-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left-arrow' is used in nib 'MyProfileCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu' is used in nib 'MyProfileCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pencil", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pencil' is used in nib 'MyProfileCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _NewsFeedCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NewsFeedCell

      let bundle = R.hostingBundle
      let identifier = "NewsFeedCell"
      let name = "NewsFeedCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewsFeedCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewsFeedCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'NewsFeedCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comments_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comments_small' is used in nib 'NewsFeedCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_small' is used in nib 'NewsFeedCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'NewsFeedCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'NewsFeedCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'NewsFeedCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'NewsFeedCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _NormalPostCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NormalPostCell

      let bundle = R.hostingBundle
      let identifier = "NormalPostCell"
      let name = "NormalPostCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NormalPostCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NormalPostCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'NormalPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comments_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comments_small' is used in nib 'NormalPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_small' is used in nib 'NormalPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'NormalPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'NormalPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'NormalPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'NormalPostCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _NotificationOneTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NotificationOneTableItem

      let bundle = R.hostingBundle
      let identifier = "NotificationOneTableItem"
      let name = "NotificationOneTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationOneTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationOneTableItem
      }

      fileprivate init() {}
    }

    struct _NotificationTwoTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NotificationTwoTableItem

      let bundle = R.hostingBundle
      let identifier = "NotificationTwoTableItem"
      let name = "NotificationTwoTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationTwoTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTwoTableItem
      }

      fileprivate init() {}
    }

    struct _NotificationsTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NotificationsTableItem

      let bundle = R.hostingBundle
      let identifier = "NotificationsTableItem"
      let name = "NotificationsTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationsTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationsTableItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "notification", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'notification' is used in nib 'NotificationsTableItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PageCoverCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PageCoverCell

      let bundle = R.hostingBundle
      let identifier = "PageCover"
      let name = "PageCoverCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PageCoverCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PageCoverCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group' is used in nib 'PageCoverCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "addusers", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'addusers' is used in nib 'PageCoverCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "d-cover", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'd-cover' is used in nib 'PageCoverCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "d-page", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'd-page' is used in nib 'PageCoverCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "label", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'label' is used in nib 'PageCoverCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "left-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left-arrow' is used in nib 'PageCoverCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "messageIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'messageIcon' is used in nib 'PageCoverCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pencil-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pencil-black' is used in nib 'PageCoverCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "thumbs-up-hand-symbol", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'thumbs-up-hand-symbol' is used in nib 'PageCoverCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PageReviewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PageReviewCell

      let bundle = R.hostingBundle
      let identifier = "ReviewCell"
      let name = "PageReviewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PageReviewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PageReviewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Rating", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Rating' is used in nib 'PageReviewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'PageReviewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PhotoAlbum2: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PhotoAlbum2

      let bundle = R.hostingBundle
      let identifier = "PhotoAlbum2"
      let name = "PhotoAlbum2"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PhotoAlbum2? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotoAlbum2
      }

      static func validate() throws {
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'PhotoAlbum2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comments_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comments_small' is used in nib 'PhotoAlbum2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_small' is used in nib 'PhotoAlbum2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'PhotoAlbum2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'PhotoAlbum2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'PhotoAlbum2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'PhotoAlbum2', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PhotoAlbum3: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PhotoAlbum3

      let bundle = R.hostingBundle
      let identifier = "PhotoAlbum3"
      let name = "PhotoAlbum3"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PhotoAlbum3? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotoAlbum3
      }

      static func validate() throws {
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'PhotoAlbum3', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'PhotoAlbum3', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'PhotoAlbum3', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'PhotoAlbum3', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'PhotoAlbum3', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PhotoAlbumCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PhotoAlbumCell

      let bundle = R.hostingBundle
      let identifier = "PhotoAlbumCell"
      let name = "PhotoAlbumCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PhotoAlbumCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotoAlbumCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'PhotoAlbumCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comments_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comments_small' is used in nib 'PhotoAlbumCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_small' is used in nib 'PhotoAlbumCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'PhotoAlbumCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'PhotoAlbumCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'PhotoAlbumCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'PhotoAlbumCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PostJobCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PostJobCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostJobCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostJobCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'PostJobCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PostLiveCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PostLiveCell

      let bundle = R.hostingBundle
      let identifier = "LiveCell"
      let name = "PostLiveCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostLiveCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostLiveCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'PostLiveCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'PostLiveCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'PostLiveCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'PostLiveCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'PostLiveCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PostOptionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PostOptionCell

      let bundle = R.hostingBundle
      let identifier = "PostOptions"
      let name = "PostOptionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostOptionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostOptionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'PostOptionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comments_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comments_small' is used in nib 'PostOptionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'PostOptionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'PostOptionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'PostOptionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'PostOptionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PostPDFCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PostPDFCell

      let bundle = R.hostingBundle
      let identifier = "PostPDFCell"
      let name = "PostPDFCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostPDFCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostPDFCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'PostPDFCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_download", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_download' is used in nib 'PostPDFCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comments_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comments_small' is used in nib 'PostPDFCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_small' is used in nib 'PostPDFCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'PostPDFCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'PostPDFCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'PostPDFCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'PostPDFCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PostShareCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PostShareCell

      let bundle = R.hostingBundle
      let identifier = "PostShare"
      let name = "PostShareCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostShareCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostShareCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'PostShareCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comments_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comments_small' is used in nib 'PostShareCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'PostShareCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'PostShareCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'PostShareCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PostWithLinkCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PostWithLinkCell

      let bundle = R.hostingBundle
      let identifier = "PostLinkCell"
      let name = "PostWithLinkCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostWithLinkCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostWithLinkCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'PostWithLinkCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "d-cover", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'd-cover' is used in nib 'PostWithLinkCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comments_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comments_small' is used in nib 'PostWithLinkCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_small' is used in nib 'PostWithLinkCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'PostWithLinkCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'PostWithLinkCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'PostWithLinkCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'PostWithLinkCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PostYoutubeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PostYoutubeCell

      let bundle = R.hostingBundle
      let identifier = "PostYoutube"
      let name = "PostYoutubeCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostYoutubeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostYoutubeCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'PostYoutubeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comments_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comments_small' is used in nib 'PostYoutubeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_small' is used in nib 'PostYoutubeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'PostYoutubeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'PostYoutubeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'PostYoutubeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'PostYoutubeCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PostwithBg_imageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PostwithBg_imageCell

      let bundle = R.hostingBundle
      let identifier = "postWithBg_image"
      let name = "PostwithBg_imageCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostwithBg_imageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostwithBg_imageCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bg7", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg7' is used in nib 'PostwithBg_imageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'PostwithBg_imageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comments_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comments_small' is used in nib 'PostwithBg_imageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_small' is used in nib 'PostwithBg_imageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'PostwithBg_imageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'PostwithBg_imageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'PostwithBg_imageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'PostwithBg_imageCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProductCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProductCell

      let bundle = R.hostingBundle
      let identifier = "ProductCell"
      let name = "ProductCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "box", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'box' is used in nib 'ProductCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'ProductCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "credit-cards", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'credit-cards' is used in nib 'ProductCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comments_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comments_small' is used in nib 'ProductCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_location_place", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_location_place' is used in nib 'ProductCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_small' is used in nib 'ProductCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'ProductCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'ProductCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'ProductCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "price-tag", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'price-tag' is used in nib 'ProductCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'ProductCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProductDetailCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProductDetailCell

      let bundle = R.hostingBundle
      let identifier = "productDetailCell"
      let name = "ProductDetailCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductDetailCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'ProductDetailCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _RegisterStartTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RegisterStartTableItem

      let bundle = R.hostingBundle
      let identifier = "RegisterStartTableItem"
      let name = "RegisterStartTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RegisterStartTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RegisterStartTableItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "RegisterEmail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RegisterEmail' is used in nib 'RegisterStartTableItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebookLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebookLogo' is used in nib 'RegisterStartTableItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "googleLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'googleLogo' is used in nib 'RegisterStartTableItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "loginImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'loginImage' is used in nib 'RegisterStartTableItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in nib 'RegisterStartTableItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _RegisterTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RegisterTableItem

      let bundle = R.hostingBundle
      let identifier = "RegisterTableItem"
      let name = "RegisterTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RegisterTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RegisterTableItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "left-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left-arrow' is used in nib 'RegisterTableItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "loginImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'loginImage' is used in nib 'RegisterTableItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "show", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'show' is used in nib 'RegisterTableItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SearchPostCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SearchPostCell

      let bundle = R.hostingBundle
      let identifier = "SearchCell"
      let name = "SearchPostCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchPostCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchPostCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "think", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'think' is used in nib 'SearchPostCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SelectAmountTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SelectAmountTableItem

      let bundle = R.hostingBundle
      let identifier = "SelectAmountTableItem"
      let name = "SelectAmountTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectAmountTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectAmountTableItem
      }

      fileprivate init() {}
    }

    struct _SelectFeelingTypeCollectionItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SelectFeelingTypeCollectionItem

      let bundle = R.hostingBundle
      let identifier = "SelectFeelingTypeCollectionItem"
      let name = "SelectFeelingTypeCollectionItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectFeelingTypeCollectionItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectFeelingTypeCollectionItem
      }

      fileprivate init() {}
    }

    struct _SelectPostTypeTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SelectPostTypeTableItem

      let bundle = R.hostingBundle
      let identifier = "SelectPostTypeTableItem"
      let name = "SelectPostTypeTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectPostTypeTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectPostTypeTableItem
      }

      fileprivate init() {}
    }

    struct _SelectUserTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SelectUserTableItem

      let bundle = R.hostingBundle
      let identifier = "SelectUserTableItem"
      let name = "SelectUserTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectUserTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectUserTableItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'SelectUserTableItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SettingsTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SettingsTableItem

      let bundle = R.hostingBundle
      let identifier = "SettingsTableItem"
      let name = "SettingsTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsTableItem
      }

      fileprivate init() {}
    }

    struct _SocialLinksTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SocialLinksTableItem

      let bundle = R.hostingBundle
      let identifier = "SocialLinksTableItem"
      let name = "SocialLinksTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SocialLinksTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SocialLinksTableItem
      }

      fileprivate init() {}
    }

    struct _SortFilterCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SortFilterCell

      let bundle = R.hostingBundle
      let identifier = "SortCell"
      let name = "SortFilterCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SortFilterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SortFilterCell
      }

      fileprivate init() {}
    }

    struct _StoryCells: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "StoryCells"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StoryCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StoryCells
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'plus' is used in nib 'StoryCells', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SuggestedGroupCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SuggestedGroupCollectionCell

      let bundle = R.hostingBundle
      let identifier = "suggestedCollectionCell"
      let name = "SuggestedGroupCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SuggestedGroupCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SuggestedGroupCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "d-cover", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'd-cover' is used in nib 'SuggestedGroupCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SuggestedGroupTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SuggestedGroupTableCell

      let bundle = R.hostingBundle
      let identifier = "suggestedTableCell"
      let name = "SuggestedGroupTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SuggestedGroupTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SuggestedGroupTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_arrow_right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_right' is used in nib 'SuggestedGroupTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SuggestedUserCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SuggestedUserCollectionCell

      let bundle = R.hostingBundle
      let identifier = "suggestedUserCollectionCell"
      let name = "SuggestedUserCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SuggestedUserCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SuggestedUserCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'SuggestedUserCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SuggestedUserTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SuggestedUserTableCell

      let bundle = R.hostingBundle
      let identifier = "suggestedUserTableCell"
      let name = "SuggestedUserTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SuggestedUserTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SuggestedUserTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_arrow_right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_right' is used in nib 'SuggestedUserTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TellFriendTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TellFriendTableItem

      let bundle = R.hostingBundle
      let identifier = "TellFriendTableItem"
      let name = "TellFriendTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TellFriendTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TellFriendTableItem
      }

      fileprivate init() {}
    }

    struct _TrendingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TrendingCell

      let bundle = R.hostingBundle
      let identifier = "trendingCell"
      let name = "TrendingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TrendingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TrendingCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "trending", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'trending' is used in nib 'TrendingCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _UserCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "UserCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'UserCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _UserCoverView: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UserCoverView

      let bundle = R.hostingBundle
      let identifier = "Cover"
      let name = "UserCoverView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserCoverView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserCoverView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Shape", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Shape' is used in nib 'UserCoverView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "d-cover", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'd-cover' is used in nib 'UserCoverView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "left-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left-arrow' is used in nib 'UserCoverView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu' is used in nib 'UserCoverView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "messageIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'messageIcon' is used in nib 'UserCoverView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _UserDonationCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UserDonationCell

      let bundle = R.hostingBundle
      let identifier = "UserDonationCells"
      let name = "UserDonationCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserDonationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserDonationCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'UserDonationCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _UserInfoCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UserInfoCell

      let bundle = R.hostingBundle
      let identifier = "USerInfoCells"
      let name = "UserInfoCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserInfoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserInfoCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "portfolioess", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'portfolioess' is used in nib 'UserInfoCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _VideoCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = VideoCell

      let bundle = R.hostingBundle
      let identifier = "VideoCell"
      let name = "VideoCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VideoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in nib 'VideoCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comments_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_comments_small' is used in nib 'VideoCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_small' is used in nib 'VideoCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'VideoCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "morese", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'morese' is used in nib 'VideoCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'VideoCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pause", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pause' is used in nib 'VideoCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'play' is used in nib 'VideoCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "skipBackward", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'skipBackward' is used in nib 'VideoCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "skipForward", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'skipForward' is used in nib 'VideoCell', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "square.dashed") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'square.dashed' is used in nib 'VideoCell', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'VideoCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _VoiceCommentCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VoiceCommentCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VoiceCommentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VoiceCommentCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in nib 'VoiceCommentCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try addPost.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try authentication.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try funding.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try general.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try groupsAndPages.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try helpSupport.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try jobs.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try marketPlacesPopularPostEvents.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try moreSection.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try moreSection2.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try notification.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try offers.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try pokeMyVideosAlbums.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try privacy.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try search.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try stories.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try tellFriend.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct addPost: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addPostVC = StoryboardViewControllerResource<AddPostVC>(identifier: "AddPostVC")
      let albumNameVC = StoryboardViewControllerResource<AlbumNameVC>(identifier: "AlbumNameVC")
      let bundle = R.hostingBundle
      let feelingSelectVC = StoryboardViewControllerResource<FeelingSelectVC>(identifier: "FeelingSelectVC")
      let feelingTypeVC = StoryboardViewControllerResource<FeelingTypeVC>(identifier: "FeelingTypeVC")
      let mentionUserVC = StoryboardViewControllerResource<MentionUserVC>(identifier: "MentionUserVC")
      let name = "AddPost"
      let postTypeVC = StoryboardViewControllerResource<PostTypeVC>(identifier: "PostTypeVC")
      let selectGIFVC = StoryboardViewControllerResource<SelectGIFVC>(identifier: "SelectGIFVC")

      func addPostVC(_: Void = ()) -> AddPostVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addPostVC)
      }

      func albumNameVC(_: Void = ()) -> AlbumNameVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: albumNameVC)
      }

      func feelingSelectVC(_: Void = ()) -> FeelingSelectVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: feelingSelectVC)
      }

      func feelingTypeVC(_: Void = ()) -> FeelingTypeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: feelingTypeVC)
      }

      func mentionUserVC(_: Void = ()) -> MentionUserVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mentionUserVC)
      }

      func postTypeVC(_: Void = ()) -> PostTypeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: postTypeVC)
      }

      func selectGIFVC(_: Void = ()) -> SelectGIFVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectGIFVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "people", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'people' is used in storyboard 'AddPost', but couldn't be loaded.") }
        if UIKit.UIImage(named: "photos", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photos' is used in storyboard 'AddPost', but couldn't be loaded.") }
        if UIKit.UIImage(named: "smileys", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'smileys' is used in storyboard 'AddPost', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.addPost().addPostVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addPostVC' could not be loaded from storyboard 'AddPost' as 'AddPostVC'.") }
        if _R.storyboard.addPost().albumNameVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'albumNameVC' could not be loaded from storyboard 'AddPost' as 'AlbumNameVC'.") }
        if _R.storyboard.addPost().feelingSelectVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'feelingSelectVC' could not be loaded from storyboard 'AddPost' as 'FeelingSelectVC'.") }
        if _R.storyboard.addPost().feelingTypeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'feelingTypeVC' could not be loaded from storyboard 'AddPost' as 'FeelingTypeVC'.") }
        if _R.storyboard.addPost().mentionUserVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mentionUserVC' could not be loaded from storyboard 'AddPost' as 'MentionUserVC'.") }
        if _R.storyboard.addPost().postTypeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'postTypeVC' could not be loaded from storyboard 'AddPost' as 'PostTypeVC'.") }
        if _R.storyboard.addPost().selectGIFVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectGIFVC' could not be loaded from storyboard 'AddPost' as 'SelectGIFVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct authentication: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let firstVc = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "FirstVc")
      let forgotPasswordVC = StoryboardViewControllerResource<ForgotPasswordVC>(identifier: "ForgotPasswordVC")
      let introController = StoryboardViewControllerResource<IntroController>(identifier: "IntroController")
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let name = "Authentication"
      let registerStartVC = StoryboardViewControllerResource<RegisterStartVC>(identifier: "RegisterStartVC")
      let registerVC = StoryboardViewControllerResource<RegisterVC>(identifier: "RegisterVC")
      let securityController = StoryboardViewControllerResource<SecurityController>(identifier: "SecurityController")
      let twoFactorVC = StoryboardViewControllerResource<twoFactorVC>(identifier: "twoFactorVC")

      func firstVc(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: firstVc)
      }

      func forgotPasswordVC(_: Void = ()) -> ForgotPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordVC)
      }

      func introController(_: Void = ()) -> IntroController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: introController)
      }

      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }

      func registerStartVC(_: Void = ()) -> RegisterStartVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerStartVC)
      }

      func registerVC(_: Void = ()) -> RegisterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerVC)
      }

      func securityController(_: Void = ()) -> SecurityController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: securityController)
      }

      func twoFactorVC(_: Void = ()) -> twoFactorVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: twoFactorVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow-pointing", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-pointing' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "gotoNext", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gotoNext' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_email", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_email' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_uncheck' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "loginBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'loginBackground' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "twoFactor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'twoFactor' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.authentication().firstVc() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'firstVc' could not be loaded from storyboard 'Authentication' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.authentication().forgotPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordVC' could not be loaded from storyboard 'Authentication' as 'ForgotPasswordVC'.") }
        if _R.storyboard.authentication().introController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'introController' could not be loaded from storyboard 'Authentication' as 'IntroController'.") }
        if _R.storyboard.authentication().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Authentication' as 'LoginVC'.") }
        if _R.storyboard.authentication().registerStartVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerStartVC' could not be loaded from storyboard 'Authentication' as 'RegisterStartVC'.") }
        if _R.storyboard.authentication().registerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerVC' could not be loaded from storyboard 'Authentication' as 'RegisterVC'.") }
        if _R.storyboard.authentication().securityController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'securityController' could not be loaded from storyboard 'Authentication' as 'SecurityController'.") }
        if _R.storyboard.authentication().twoFactorVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'twoFactorVC' could not be loaded from storyboard 'Authentication' as 'twoFactorVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct funding: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addUpdateFundingVC = StoryboardViewControllerResource<AddUpdateFundingVC>(identifier: "AddUpdateFundingVC")
      let bankTransferVC = StoryboardViewControllerResource<BankTransferVC>(identifier: "BankTransferVC")
      let bundle = R.hostingBundle
      let enterAmountVC = StoryboardViewControllerResource<EnterAmountController>(identifier: "EnterAmountVC")
      let fundingsParentVc = StoryboardViewControllerResource<FundingParentVC>(identifier: "FundingsParentVc")
      let name = "Funding"
      let payStackVC = StoryboardViewControllerResource<PaystackController>(identifier: "PayStackVC")
      let paystackEmailVC = StoryboardViewControllerResource<PaystackEmailController>(identifier: "PaystackEmailVC")
      let selectAmountVC = StoryboardViewControllerResource<SelectAmountVC>(identifier: "SelectAmountVC")
      let selectPaymentVC = StoryboardViewControllerResource<SelectPaymentVC>(identifier: "SelectPaymentVC")
      let showFundingDetailsVC = StoryboardViewControllerResource<ShowFundingDetailsVC>(identifier: "ShowFundingDetailsVC")
      let showFundingsVC = StoryboardViewControllerResource<ShowFundingsVC>(identifier: "ShowFundingsVC")
      let userFundingVC = StoryboardViewControllerResource<ShowUserFundingController>(identifier: "UserFundingVC")

      func addUpdateFundingVC(_: Void = ()) -> AddUpdateFundingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addUpdateFundingVC)
      }

      func bankTransferVC(_: Void = ()) -> BankTransferVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bankTransferVC)
      }

      func enterAmountVC(_: Void = ()) -> EnterAmountController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: enterAmountVC)
      }

      func fundingsParentVc(_: Void = ()) -> FundingParentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: fundingsParentVc)
      }

      func payStackVC(_: Void = ()) -> PaystackController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: payStackVC)
      }

      func paystackEmailVC(_: Void = ()) -> PaystackEmailController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paystackEmailVC)
      }

      func selectAmountVC(_: Void = ()) -> SelectAmountVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectAmountVC)
      }

      func selectPaymentVC(_: Void = ()) -> SelectPaymentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectPaymentVC)
      }

      func showFundingDetailsVC(_: Void = ()) -> ShowFundingDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showFundingDetailsVC)
      }

      func showFundingsVC(_: Void = ()) -> ShowFundingsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showFundingsVC)
      }

      func userFundingVC(_: Void = ()) -> ShowUserFundingController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userFundingVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Ad", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Ad' is used in storyboard 'Funding', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Shape", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Shape' is used in storyboard 'Funding', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cash' is used in storyboard 'Funding', but couldn't be loaded.") }
        if UIKit.UIImage(named: "d-cover", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'd-cover' is used in storyboard 'Funding', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cross_white.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cross_white.png' is used in storyboard 'Funding', but couldn't be loaded.") }
        if UIKit.UIImage(named: "left-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left-arrow' is used in storyboard 'Funding', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'Funding', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.funding().addUpdateFundingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addUpdateFundingVC' could not be loaded from storyboard 'Funding' as 'AddUpdateFundingVC'.") }
        if _R.storyboard.funding().bankTransferVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bankTransferVC' could not be loaded from storyboard 'Funding' as 'BankTransferVC'.") }
        if _R.storyboard.funding().enterAmountVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'enterAmountVC' could not be loaded from storyboard 'Funding' as 'EnterAmountController'.") }
        if _R.storyboard.funding().fundingsParentVc() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'fundingsParentVc' could not be loaded from storyboard 'Funding' as 'FundingParentVC'.") }
        if _R.storyboard.funding().payStackVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'payStackVC' could not be loaded from storyboard 'Funding' as 'PaystackController'.") }
        if _R.storyboard.funding().paystackEmailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paystackEmailVC' could not be loaded from storyboard 'Funding' as 'PaystackEmailController'.") }
        if _R.storyboard.funding().selectAmountVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectAmountVC' could not be loaded from storyboard 'Funding' as 'SelectAmountVC'.") }
        if _R.storyboard.funding().selectPaymentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectPaymentVC' could not be loaded from storyboard 'Funding' as 'SelectPaymentVC'.") }
        if _R.storyboard.funding().showFundingDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showFundingDetailsVC' could not be loaded from storyboard 'Funding' as 'ShowFundingDetailsVC'.") }
        if _R.storyboard.funding().showFundingsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showFundingsVC' could not be loaded from storyboard 'Funding' as 'ShowFundingsVC'.") }
        if _R.storyboard.funding().userFundingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userFundingVC' could not be loaded from storyboard 'Funding' as 'ShowUserFundingController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct general: Rswift.StoryboardResourceType, Rswift.Validatable {
      let blockedUsersVC = StoryboardViewControllerResource<BlockedUsersVC>(identifier: "BlockedUsersVC")
      let bundle = R.hostingBundle
      let changePasswordVC = StoryboardViewControllerResource<ChangePasswordVC>(identifier: "ChangePasswordVC")
      let confirmationCodeVC = StoryboardViewControllerResource<ConfirmationCodeVC>(identifier: "ConfirmationCodeVC")
      let deleteAccountVc = StoryboardViewControllerResource<DeleteAccountVc>(identifier: "DeleteAccountVc")
      let editProfileVC = StoryboardViewControllerResource<EditProfileVC>(identifier: "EditProfileVC")
      let generalVC = StoryboardViewControllerResource<GeneralVC>(identifier: "GeneralVC")
      let manageSessionVC = StoryboardViewControllerResource<ManageSessionVC>(identifier: "ManageSessionVC")
      let myAccountVC = StoryboardViewControllerResource<MyAccountVC>(identifier: "MyAccountVC")
      let name = "General"
      let selectGenderVC = StoryboardViewControllerResource<SelectGenderVC>(identifier: "SelectGenderVC")
      let socialLinkVC = StoryboardViewControllerResource<SocialLinkVC>(identifier: "SocialLinkVC")
      let twoFactorAuthenticationVC = StoryboardViewControllerResource<TwoFactorAuthenticationVC>(identifier: "TwoFactorAuthenticationVC")
      let updateAboutMeVC = StoryboardViewControllerResource<UpdateAboutMeVC>(identifier: "UpdateAboutMeVC")
      let updateBlockUnBlockVC = StoryboardViewControllerResource<UpdateBlockUnBlockVC>(identifier: "UpdateBlockUnBlockVC")
      let updateSocialLinksVC = StoryboardViewControllerResource<UpdateSocialLinksVC>(identifier: "UpdateSocialLinksVC")
      let updateTwoFactorVC = StoryboardViewControllerResource<UpdateTwoFactorVC>(identifier: "UpdateTwoFactorVC")

      func blockedUsersVC(_: Void = ()) -> BlockedUsersVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: blockedUsersVC)
      }

      func changePasswordVC(_: Void = ()) -> ChangePasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePasswordVC)
      }

      func confirmationCodeVC(_: Void = ()) -> ConfirmationCodeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: confirmationCodeVC)
      }

      func deleteAccountVc(_: Void = ()) -> DeleteAccountVc? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deleteAccountVc)
      }

      func editProfileVC(_: Void = ()) -> EditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileVC)
      }

      func generalVC(_: Void = ()) -> GeneralVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: generalVC)
      }

      func manageSessionVC(_: Void = ()) -> ManageSessionVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: manageSessionVC)
      }

      func myAccountVC(_: Void = ()) -> MyAccountVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myAccountVC)
      }

      func selectGenderVC(_: Void = ()) -> SelectGenderVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectGenderVC)
      }

      func socialLinkVC(_: Void = ()) -> SocialLinkVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: socialLinkVC)
      }

      func twoFactorAuthenticationVC(_: Void = ()) -> TwoFactorAuthenticationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: twoFactorAuthenticationVC)
      }

      func updateAboutMeVC(_: Void = ()) -> UpdateAboutMeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: updateAboutMeVC)
      }

      func updateBlockUnBlockVC(_: Void = ()) -> UpdateBlockUnBlockVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: updateBlockUnBlockVC)
      }

      func updateSocialLinksVC(_: Void = ()) -> UpdateSocialLinksVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: updateSocialLinksVC)
      }

      func updateTwoFactorVC(_: Void = ()) -> UpdateTwoFactorVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: updateTwoFactorVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "birthday-cake", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'birthday-cake' is used in storyboard 'General', but couldn't be loaded.") }
        if UIKit.UIImage(named: "genderi", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'genderi' is used in storyboard 'General', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "heart") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'heart' is used in storyboard 'General', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "high-school", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'high-school' is used in storyboard 'General', but couldn't be loaded.") }
        if UIKit.UIImage(named: "internet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'internet' is used in storyboard 'General', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lock' is used in storyboard 'General', but couldn't be loaded.") }
        if UIKit.UIImage(named: "map", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'map' is used in storyboard 'General', but couldn't be loaded.") }
        if UIKit.UIImage(named: "password", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'password' is used in storyboard 'General', but couldn't be loaded.") }
        if UIKit.UIImage(named: "portfolio-black-symbol", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'portfolio-black-symbol' is used in storyboard 'General', but couldn't be loaded.") }
        if UIKit.UIImage(named: "protection", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'protection' is used in storyboard 'General', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sends", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sends' is used in storyboard 'General', but couldn't be loaded.") }
        if UIKit.UIImage(named: "smartphone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'smartphone' is used in storyboard 'General', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unlock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unlock' is used in storyboard 'General', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'General', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.general().blockedUsersVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'blockedUsersVC' could not be loaded from storyboard 'General' as 'BlockedUsersVC'.") }
        if _R.storyboard.general().changePasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePasswordVC' could not be loaded from storyboard 'General' as 'ChangePasswordVC'.") }
        if _R.storyboard.general().confirmationCodeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'confirmationCodeVC' could not be loaded from storyboard 'General' as 'ConfirmationCodeVC'.") }
        if _R.storyboard.general().deleteAccountVc() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deleteAccountVc' could not be loaded from storyboard 'General' as 'DeleteAccountVc'.") }
        if _R.storyboard.general().editProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'General' as 'EditProfileVC'.") }
        if _R.storyboard.general().generalVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'generalVC' could not be loaded from storyboard 'General' as 'GeneralVC'.") }
        if _R.storyboard.general().manageSessionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'manageSessionVC' could not be loaded from storyboard 'General' as 'ManageSessionVC'.") }
        if _R.storyboard.general().myAccountVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myAccountVC' could not be loaded from storyboard 'General' as 'MyAccountVC'.") }
        if _R.storyboard.general().selectGenderVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectGenderVC' could not be loaded from storyboard 'General' as 'SelectGenderVC'.") }
        if _R.storyboard.general().socialLinkVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'socialLinkVC' could not be loaded from storyboard 'General' as 'SocialLinkVC'.") }
        if _R.storyboard.general().twoFactorAuthenticationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'twoFactorAuthenticationVC' could not be loaded from storyboard 'General' as 'TwoFactorAuthenticationVC'.") }
        if _R.storyboard.general().updateAboutMeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'updateAboutMeVC' could not be loaded from storyboard 'General' as 'UpdateAboutMeVC'.") }
        if _R.storyboard.general().updateBlockUnBlockVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'updateBlockUnBlockVC' could not be loaded from storyboard 'General' as 'UpdateBlockUnBlockVC'.") }
        if _R.storyboard.general().updateSocialLinksVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'updateSocialLinksVC' could not be loaded from storyboard 'General' as 'UpdateSocialLinksVC'.") }
        if _R.storyboard.general().updateTwoFactorVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'updateTwoFactorVC' could not be loaded from storyboard 'General' as 'UpdateTwoFactorVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct groupsAndPages: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let categoryVC = StoryboardViewControllerResource<GroupCategoryController>(identifier: "CategoryVC")
      let createGroupVC = StoryboardViewControllerResource<CreateGroupController>(identifier: "CreateGroupVC")
      let createPageVC = StoryboardViewControllerResource<CreatePageController>(identifier: "CreatePageVC")
      let deleteVC = StoryboardViewControllerResource<DeleteGroupController>(identifier: "DeleteVC")
      let generalVC = StoryboardViewControllerResource<GeneralController>(identifier: "GeneralVC")
      let groupCategoryVC = StoryboardViewControllerResource<GroupByCategoryController>(identifier: "GroupCategoryVC")
      let groupMemberVC = StoryboardViewControllerResource<GroupMembersController>(identifier: "GroupMemberVC")
      let groupMoreVC = StoryboardViewControllerResource<GroupMoreController>(identifier: "GroupMoreVC")
      let groupSettingVC = StoryboardViewControllerResource<GroupSettingController>(identifier: "GroupSettingVC")
      let groupVC = StoryboardViewControllerResource<GroupController>(identifier: "GroupVC")
      let groupsDiscoverVC = StoryboardViewControllerResource<GroupsDiscoverController>(identifier: "GroupsDiscoverVC")
      let inviteFriendVC = StoryboardViewControllerResource<InviteFriendsController>(identifier: "InviteFriendVC")
      let more = StoryboardViewControllerResource<PageandGroupMoreController>(identifier: "More")
      let myGroupsPagesVC = StoryboardViewControllerResource<MyGroupsandMyPagesController>(identifier: "MyGroups&PagesVC")
      let myGroupsVC = StoryboardViewControllerResource<GroupListController>(identifier: "MyGroupsVC")
      let name = "GroupsAndPages"
      let pageActionVC = StoryboardViewControllerResource<PageActionController>(identifier: "PageActionVC")
      let pageDeleteVC = StoryboardViewControllerResource<PageDeleteController>(identifier: "PageDeleteVC")
      let pageGeneralVC = StoryboardViewControllerResource<PageGeneralController>(identifier: "PageGeneralVC")
      let pageInfoVC = StoryboardViewControllerResource<PageInformationController>(identifier: "PageInfoVC")
      let pageListVC = StoryboardViewControllerResource<PageListsController>(identifier: "PageListVC")
      let pageRatingVC = StoryboardViewControllerResource<PageRatingController>(identifier: "PageRatingVC")
      let pageReviewVC = StoryboardViewControllerResource<PageReviewController>(identifier: "PageReviewVC")
      let pageSettingVC = StoryboardViewControllerResource<PageSettingController>(identifier: "PageSettingVC")
      let pageVC = StoryboardViewControllerResource<PageController>(identifier: "PageVC")
      let privacyVC = StoryboardViewControllerResource<GroupPrivacyController>(identifier: "PrivacyVC")
      let setActionVC = StoryboardViewControllerResource<SetActionController>(identifier: "SetActionVC")
      let showAllSuggestedGroupVC = StoryboardViewControllerResource<ShowAllSuggestedGroups>(identifier: "ShowAllSuggestedGroupVC")
      let socialLinkVC = StoryboardViewControllerResource<SocialLinkController>(identifier: "SocialLinkVC")

      func categoryVC(_: Void = ()) -> GroupCategoryController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: categoryVC)
      }

      func createGroupVC(_: Void = ()) -> CreateGroupController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createGroupVC)
      }

      func createPageVC(_: Void = ()) -> CreatePageController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createPageVC)
      }

      func deleteVC(_: Void = ()) -> DeleteGroupController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deleteVC)
      }

      func generalVC(_: Void = ()) -> GeneralController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: generalVC)
      }

      func groupCategoryVC(_: Void = ()) -> GroupByCategoryController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: groupCategoryVC)
      }

      func groupMemberVC(_: Void = ()) -> GroupMembersController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: groupMemberVC)
      }

      func groupMoreVC(_: Void = ()) -> GroupMoreController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: groupMoreVC)
      }

      func groupSettingVC(_: Void = ()) -> GroupSettingController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: groupSettingVC)
      }

      func groupVC(_: Void = ()) -> GroupController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: groupVC)
      }

      func groupsDiscoverVC(_: Void = ()) -> GroupsDiscoverController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: groupsDiscoverVC)
      }

      func inviteFriendVC(_: Void = ()) -> InviteFriendsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inviteFriendVC)
      }

      func more(_: Void = ()) -> PageandGroupMoreController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: more)
      }

      func myGroupsPagesVC(_: Void = ()) -> MyGroupsandMyPagesController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myGroupsPagesVC)
      }

      func myGroupsVC(_: Void = ()) -> GroupListController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myGroupsVC)
      }

      func pageActionVC(_: Void = ()) -> PageActionController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pageActionVC)
      }

      func pageDeleteVC(_: Void = ()) -> PageDeleteController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pageDeleteVC)
      }

      func pageGeneralVC(_: Void = ()) -> PageGeneralController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pageGeneralVC)
      }

      func pageInfoVC(_: Void = ()) -> PageInformationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pageInfoVC)
      }

      func pageListVC(_: Void = ()) -> PageListsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pageListVC)
      }

      func pageRatingVC(_: Void = ()) -> PageRatingController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pageRatingVC)
      }

      func pageReviewVC(_: Void = ()) -> PageReviewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pageReviewVC)
      }

      func pageSettingVC(_: Void = ()) -> PageSettingController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pageSettingVC)
      }

      func pageVC(_: Void = ()) -> PageController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pageVC)
      }

      func privacyVC(_: Void = ()) -> GroupPrivacyController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: privacyVC)
      }

      func setActionVC(_: Void = ()) -> SetActionController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: setActionVC)
      }

      func showAllSuggestedGroupVC(_: Void = ()) -> ShowAllSuggestedGroups? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showAllSuggestedGroupVC)
      }

      func socialLinkVC(_: Void = ()) -> SocialLinkController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: socialLinkVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "CategoryIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CategoryIcon' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "General", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'General' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "GroupIcons-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'GroupIcons-1' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "GroupMembers", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'GroupMembers' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Infinity", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Infinity' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PagesIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PagesIcon' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Shape", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Shape' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "add-friend", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add-friend' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "borefire", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'borefire' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "business-center", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'business-center' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "calendars", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'calendars' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "delete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "explorer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'explorer' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "groupIcons", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'groupIcons' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "inviteUser", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'inviteUser' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like-1' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "map", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'map' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "moress", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'moress' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "multimedia", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'multimedia' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "padlock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'padlock' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pilcrowIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pilcrowIcon' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "portfolioes", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'portfolioes' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "protection", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'protection' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "telephone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'telephone' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unlink", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unlink' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if UIKit.UIImage(named: "white-bullseye", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'white-bullseye' is used in storyboard 'GroupsAndPages', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.groupsAndPages().categoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'categoryVC' could not be loaded from storyboard 'GroupsAndPages' as 'GroupCategoryController'.") }
        if _R.storyboard.groupsAndPages().createGroupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createGroupVC' could not be loaded from storyboard 'GroupsAndPages' as 'CreateGroupController'.") }
        if _R.storyboard.groupsAndPages().createPageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createPageVC' could not be loaded from storyboard 'GroupsAndPages' as 'CreatePageController'.") }
        if _R.storyboard.groupsAndPages().deleteVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deleteVC' could not be loaded from storyboard 'GroupsAndPages' as 'DeleteGroupController'.") }
        if _R.storyboard.groupsAndPages().generalVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'generalVC' could not be loaded from storyboard 'GroupsAndPages' as 'GeneralController'.") }
        if _R.storyboard.groupsAndPages().groupCategoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'groupCategoryVC' could not be loaded from storyboard 'GroupsAndPages' as 'GroupByCategoryController'.") }
        if _R.storyboard.groupsAndPages().groupMemberVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'groupMemberVC' could not be loaded from storyboard 'GroupsAndPages' as 'GroupMembersController'.") }
        if _R.storyboard.groupsAndPages().groupMoreVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'groupMoreVC' could not be loaded from storyboard 'GroupsAndPages' as 'GroupMoreController'.") }
        if _R.storyboard.groupsAndPages().groupSettingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'groupSettingVC' could not be loaded from storyboard 'GroupsAndPages' as 'GroupSettingController'.") }
        if _R.storyboard.groupsAndPages().groupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'groupVC' could not be loaded from storyboard 'GroupsAndPages' as 'GroupController'.") }
        if _R.storyboard.groupsAndPages().groupsDiscoverVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'groupsDiscoverVC' could not be loaded from storyboard 'GroupsAndPages' as 'GroupsDiscoverController'.") }
        if _R.storyboard.groupsAndPages().inviteFriendVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inviteFriendVC' could not be loaded from storyboard 'GroupsAndPages' as 'InviteFriendsController'.") }
        if _R.storyboard.groupsAndPages().more() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'more' could not be loaded from storyboard 'GroupsAndPages' as 'PageandGroupMoreController'.") }
        if _R.storyboard.groupsAndPages().myGroupsPagesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myGroupsPagesVC' could not be loaded from storyboard 'GroupsAndPages' as 'MyGroupsandMyPagesController'.") }
        if _R.storyboard.groupsAndPages().myGroupsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myGroupsVC' could not be loaded from storyboard 'GroupsAndPages' as 'GroupListController'.") }
        if _R.storyboard.groupsAndPages().pageActionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pageActionVC' could not be loaded from storyboard 'GroupsAndPages' as 'PageActionController'.") }
        if _R.storyboard.groupsAndPages().pageDeleteVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pageDeleteVC' could not be loaded from storyboard 'GroupsAndPages' as 'PageDeleteController'.") }
        if _R.storyboard.groupsAndPages().pageGeneralVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pageGeneralVC' could not be loaded from storyboard 'GroupsAndPages' as 'PageGeneralController'.") }
        if _R.storyboard.groupsAndPages().pageInfoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pageInfoVC' could not be loaded from storyboard 'GroupsAndPages' as 'PageInformationController'.") }
        if _R.storyboard.groupsAndPages().pageListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pageListVC' could not be loaded from storyboard 'GroupsAndPages' as 'PageListsController'.") }
        if _R.storyboard.groupsAndPages().pageRatingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pageRatingVC' could not be loaded from storyboard 'GroupsAndPages' as 'PageRatingController'.") }
        if _R.storyboard.groupsAndPages().pageReviewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pageReviewVC' could not be loaded from storyboard 'GroupsAndPages' as 'PageReviewController'.") }
        if _R.storyboard.groupsAndPages().pageSettingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pageSettingVC' could not be loaded from storyboard 'GroupsAndPages' as 'PageSettingController'.") }
        if _R.storyboard.groupsAndPages().pageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pageVC' could not be loaded from storyboard 'GroupsAndPages' as 'PageController'.") }
        if _R.storyboard.groupsAndPages().privacyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'privacyVC' could not be loaded from storyboard 'GroupsAndPages' as 'GroupPrivacyController'.") }
        if _R.storyboard.groupsAndPages().setActionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'setActionVC' could not be loaded from storyboard 'GroupsAndPages' as 'SetActionController'.") }
        if _R.storyboard.groupsAndPages().showAllSuggestedGroupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showAllSuggestedGroupVC' could not be loaded from storyboard 'GroupsAndPages' as 'ShowAllSuggestedGroups'.") }
        if _R.storyboard.groupsAndPages().socialLinkVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'socialLinkVC' could not be loaded from storyboard 'GroupsAndPages' as 'SocialLinkController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct helpSupport: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let helpAndSupportVC = StoryboardViewControllerResource<HelpAndSupportVC>(identifier: "HelpAndSupportVC")
      let helpWebViewVC = StoryboardViewControllerResource<HelpWebViewVC>(identifier: "HelpWebViewVC")
      let name = "HelpSupport"

      func helpAndSupportVC(_: Void = ()) -> HelpAndSupportVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: helpAndSupportVC)
      }

      func helpWebViewVC(_: Void = ()) -> HelpWebViewVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: helpWebViewVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.helpSupport().helpAndSupportVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'helpAndSupportVC' could not be loaded from storyboard 'HelpSupport' as 'HelpAndSupportVC'.") }
        if _R.storyboard.helpSupport().helpWebViewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'helpWebViewVC' could not be loaded from storyboard 'HelpSupport' as 'HelpWebViewVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct jobs: Rswift.StoryboardResourceType, Rswift.Validatable {
      let allJobsVC = StoryboardViewControllerResource<AllJobsController>(identifier: "AllJobsVC")
      let appliesVC = StoryboardViewControllerResource<JobAppliesController>(identifier: "AppliesVC")
      let bundle = R.hostingBundle
      let createJobVC = StoryboardViewControllerResource<CreateJobController>(identifier: "CreateJobVC")
      let currencyVC = StoryboardViewControllerResource<CurrencyController>(identifier: "CurrencyVC")
      let editDeleteVC = StoryboardViewControllerResource<EditAndDeleteController>(identifier: "Edit&DeleteVC")
      let editJobVC = StoryboardViewControllerResource<EditJobController>(identifier: "EditJobVC")
      let jobCategoryVC = StoryboardViewControllerResource<JobCategoryController>(identifier: "JobCategoryVC")
      let jobDetailVC = StoryboardViewControllerResource<JobDetailController>(identifier: "JobDetailVC")
      let jobFilterVC = StoryboardViewControllerResource<JobFilterController>(identifier: "JobFilterVC")
      let jobTypeVC = StoryboardViewControllerResource<JobTypeController>(identifier: "JobTypeVC")
      let jobsVC = StoryboardViewControllerResource<JobsController>(identifier: "JobsVC")
      let name = "Jobs"
      let salaryVC = StoryboardViewControllerResource<SalaryController>(identifier: "SalaryVC")

      func allJobsVC(_: Void = ()) -> AllJobsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: allJobsVC)
      }

      func appliesVC(_: Void = ()) -> JobAppliesController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: appliesVC)
      }

      func createJobVC(_: Void = ()) -> CreateJobController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createJobVC)
      }

      func currencyVC(_: Void = ()) -> CurrencyController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: currencyVC)
      }

      func editDeleteVC(_: Void = ()) -> EditAndDeleteController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editDeleteVC)
      }

      func editJobVC(_: Void = ()) -> EditJobController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editJobVC)
      }

      func jobCategoryVC(_: Void = ()) -> JobCategoryController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: jobCategoryVC)
      }

      func jobDetailVC(_: Void = ()) -> JobDetailController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: jobDetailVC)
      }

      func jobFilterVC(_: Void = ()) -> JobFilterController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: jobFilterVC)
      }

      func jobTypeVC(_: Void = ()) -> JobTypeController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: jobTypeVC)
      }

      func jobsVC(_: Void = ()) -> JobsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: jobsVC)
      }

      func salaryVC(_: Void = ()) -> SalaryController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: salaryVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "CategoryIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CategoryIcon' is used in storyboard 'Jobs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ChevronRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ChevronRight' is used in storyboard 'Jobs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bill' is used in storyboard 'Jobs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chevronBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chevronBack' is used in storyboard 'Jobs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "clock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clock' is used in storyboard 'Jobs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dollar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dollar' is used in storyboard 'Jobs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "filter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'filter' is used in storyboard 'Jobs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "groupIcons", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'groupIcons' is used in storyboard 'Jobs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "human-location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'human-location' is used in storyboard 'Jobs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Jobs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "jobType", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'jobType' is used in storyboard 'Jobs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "map", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'map' is used in storyboard 'Jobs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pilcrowIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pilcrowIcon' is used in storyboard 'Jobs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pins", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pins' is used in storyboard 'Jobs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "portfolio-black-symbol", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'portfolio-black-symbol' is used in storyboard 'Jobs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tag", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tag' is used in storyboard 'Jobs', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.jobs().allJobsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'allJobsVC' could not be loaded from storyboard 'Jobs' as 'AllJobsController'.") }
        if _R.storyboard.jobs().appliesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'appliesVC' could not be loaded from storyboard 'Jobs' as 'JobAppliesController'.") }
        if _R.storyboard.jobs().createJobVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createJobVC' could not be loaded from storyboard 'Jobs' as 'CreateJobController'.") }
        if _R.storyboard.jobs().currencyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'currencyVC' could not be loaded from storyboard 'Jobs' as 'CurrencyController'.") }
        if _R.storyboard.jobs().editDeleteVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editDeleteVC' could not be loaded from storyboard 'Jobs' as 'EditAndDeleteController'.") }
        if _R.storyboard.jobs().editJobVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editJobVC' could not be loaded from storyboard 'Jobs' as 'EditJobController'.") }
        if _R.storyboard.jobs().jobCategoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'jobCategoryVC' could not be loaded from storyboard 'Jobs' as 'JobCategoryController'.") }
        if _R.storyboard.jobs().jobDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'jobDetailVC' could not be loaded from storyboard 'Jobs' as 'JobDetailController'.") }
        if _R.storyboard.jobs().jobFilterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'jobFilterVC' could not be loaded from storyboard 'Jobs' as 'JobFilterController'.") }
        if _R.storyboard.jobs().jobTypeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'jobTypeVC' could not be loaded from storyboard 'Jobs' as 'JobTypeController'.") }
        if _R.storyboard.jobs().jobsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'jobsVC' could not be loaded from storyboard 'Jobs' as 'JobsController'.") }
        if _R.storyboard.jobs().salaryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'salaryVC' could not be loaded from storyboard 'Jobs' as 'SalaryController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "launchScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launchScreen' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let commentReplyVC = StoryboardViewControllerResource<CommentReplyController>(identifier: "CommentReplyVC")
      let commentVC = StoryboardViewControllerResource<CommentController>(identifier: "CommentVC")
      let createLiveVC = StoryboardViewControllerResource<CreateLiveController>(identifier: "CreateLiveVC")
      let cropImageVC = StoryboardViewControllerResource<CropImageController>(identifier: "CropImageVC")
      let editCommentVC = StoryboardViewControllerResource<EditCommentController>(identifier: "EditCommentVC")
      let endLiveVC = StoryboardViewControllerResource<EndLiveStreamController>(identifier: "EndLiveVC")
      let gotoMore = StoryboardViewControllerResource<MoreViewController>(identifier: "GotoMore")
      let lastActivityVC = StoryboardViewControllerResource<LastActivitesController>(identifier: "LastActivityVC")
      let likeReactionsVC = StoryboardViewControllerResource<LikeReactionsController>(identifier: "LikeReactionsVC")
      let liveVC = StoryboardViewControllerResource<LiveStreamController>(identifier: "LiveVC")
      let name = "Main"
      let news_FeedVC = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "News_FeedVC")
      let notificationVC = StoryboardViewControllerResource<NotificationVC>(identifier: "NotificationVC")
      let postReactionVC = StoryboardViewControllerResource<PostReactionController>(identifier: "PostReactionVC")
      let selectUserVC = StoryboardViewControllerResource<SelectUserController>(identifier: "SelectUserVC")
      let sendMoneyVC = StoryboardViewControllerResource<SendMoneyController>(identifier: "SendMoneyVC")
      let settingsVC = StoryboardViewControllerResource<SettingsVC>(identifier: "SettingsVC")
      let sharePopUpVC = StoryboardViewControllerResource<SharePopUpController>(identifier: "SharePopUpVC")
      let sharePostVC = StoryboardViewControllerResource<SharePostController>(identifier: "SharePostVC")
      let shareVC = StoryboardViewControllerResource<ShareController>(identifier: "ShareVC")
      let showImageVC = StoryboardViewControllerResource<ShowImageController>(identifier: "ShowImageVC")
      let showMultiImageVC = StoryboardViewControllerResource<ShowMultiImageController>(identifier: "ShowMultiImageVC")
      let showPostVC = StoryboardViewControllerResource<ShowPostController>(identifier: "ShowPostVC")
      let splashVC = StoryboardViewControllerResource<SplashController>(identifier: "SplashVC")
      let tabbarVC = StoryboardViewControllerResource<UIKit.UITabBarController>(identifier: "TabbarVC")
      let trendingVC = StoryboardViewControllerResource<TrendingVC>(identifier: "TrendingVC")
      let upgradeVC = StoryboardViewControllerResource<UpgradeController>(identifier: "UpgradeVC")
      let userProfile = StoryboardViewControllerResource<GetUserDataController>(identifier: "UserProfile")
      let walletVC = StoryboardViewControllerResource<WalletMainController>(identifier: "WalletVC")

      func commentReplyVC(_: Void = ()) -> CommentReplyController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: commentReplyVC)
      }

      func commentVC(_: Void = ()) -> CommentController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: commentVC)
      }

      func createLiveVC(_: Void = ()) -> CreateLiveController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createLiveVC)
      }

      func cropImageVC(_: Void = ()) -> CropImageController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cropImageVC)
      }

      func editCommentVC(_: Void = ()) -> EditCommentController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editCommentVC)
      }

      func endLiveVC(_: Void = ()) -> EndLiveStreamController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: endLiveVC)
      }

      func gotoMore(_: Void = ()) -> MoreViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: gotoMore)
      }

      func lastActivityVC(_: Void = ()) -> LastActivitesController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: lastActivityVC)
      }

      func likeReactionsVC(_: Void = ()) -> LikeReactionsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: likeReactionsVC)
      }

      func liveVC(_: Void = ()) -> LiveStreamController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: liveVC)
      }

      func news_FeedVC(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: news_FeedVC)
      }

      func notificationVC(_: Void = ()) -> NotificationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationVC)
      }

      func postReactionVC(_: Void = ()) -> PostReactionController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: postReactionVC)
      }

      func selectUserVC(_: Void = ()) -> SelectUserController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectUserVC)
      }

      func sendMoneyVC(_: Void = ()) -> SendMoneyController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendMoneyVC)
      }

      func settingsVC(_: Void = ()) -> SettingsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsVC)
      }

      func sharePopUpVC(_: Void = ()) -> SharePopUpController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sharePopUpVC)
      }

      func sharePostVC(_: Void = ()) -> SharePostController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sharePostVC)
      }

      func shareVC(_: Void = ()) -> ShareController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shareVC)
      }

      func showImageVC(_: Void = ()) -> ShowImageController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showImageVC)
      }

      func showMultiImageVC(_: Void = ()) -> ShowMultiImageController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showMultiImageVC)
      }

      func showPostVC(_: Void = ()) -> ShowPostController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showPostVC)
      }

      func splashVC(_: Void = ()) -> SplashController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashVC)
      }

      func tabbarVC(_: Void = ()) -> UIKit.UITabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabbarVC)
      }

      func trendingVC(_: Void = ()) -> TrendingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: trendingVC)
      }

      func upgradeVC(_: Void = ()) -> UpgradeController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: upgradeVC)
      }

      func userProfile(_: Void = ()) -> GetUserDataController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userProfile)
      }

      func walletVC(_: Void = ()) -> WalletMainController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Album", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Album' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Blog-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Blog-icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CopyLink", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CopyLink' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Options", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Options' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Oval", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Oval' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PagePro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PagePro' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Path 14", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Path 14' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Shape-3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Shape-3' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Sharess", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Sharess' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Veriified", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Veriified' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "VideoOn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'VideoOn' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "_Icons - Search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '_Icons - Search' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "add-button", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add-button' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.left") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'arrow.left' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "at", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'at' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "badge", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'badge' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "barcode") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'barcode' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "bell") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'bell' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "bell", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bell' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'camera' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cancel' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cash' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chain", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chain' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chat", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chat' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkmark' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "commentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentss' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "commerce", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commerce' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "contract", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'contract' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "creditcard") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'creditcard' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "dollar-sign", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dollar-sign' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "download", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'download' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "envelope", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'envelope' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "eyes", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'eyes' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fire", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fire' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fire-symbol", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fire-symbol' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "flag", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'flag' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "flag-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'flag-icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "heart-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heart-1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "homeicon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'homeicon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_arrow_upward", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_arrow_upward' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "launchScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launchScreen' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "left-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left-arrow' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo-1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logout' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "magic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'magic' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "map", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'map' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "megaphone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'megaphone' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu-2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menuicon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menuicon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mic' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "mic.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'mic.fill' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "mor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mor' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "moress", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'moress' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "movie_video", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'movie_video' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "noContent", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'noContent' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "notification", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'notification' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "notificationicon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'notificationicon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paste", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paste' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "photo-camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photo-camera' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pilcrowIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pilcrowIcon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "question-mark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'question-mark' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "right-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'right-arrow' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "rotateCam", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rotateCam' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "saved", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'saved' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'send' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "send-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'send-1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shopping-bag", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shopping-bag' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shutter-camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shutter-camera' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "smile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'smile' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "team", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'team' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tools-cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tools-cross' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "users", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'users' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().commentReplyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'commentReplyVC' could not be loaded from storyboard 'Main' as 'CommentReplyController'.") }
        if _R.storyboard.main().commentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'commentVC' could not be loaded from storyboard 'Main' as 'CommentController'.") }
        if _R.storyboard.main().createLiveVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createLiveVC' could not be loaded from storyboard 'Main' as 'CreateLiveController'.") }
        if _R.storyboard.main().cropImageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cropImageVC' could not be loaded from storyboard 'Main' as 'CropImageController'.") }
        if _R.storyboard.main().editCommentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editCommentVC' could not be loaded from storyboard 'Main' as 'EditCommentController'.") }
        if _R.storyboard.main().endLiveVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'endLiveVC' could not be loaded from storyboard 'Main' as 'EndLiveStreamController'.") }
        if _R.storyboard.main().gotoMore() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'gotoMore' could not be loaded from storyboard 'Main' as 'MoreViewController'.") }
        if _R.storyboard.main().lastActivityVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'lastActivityVC' could not be loaded from storyboard 'Main' as 'LastActivitesController'.") }
        if _R.storyboard.main().likeReactionsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'likeReactionsVC' could not be loaded from storyboard 'Main' as 'LikeReactionsController'.") }
        if _R.storyboard.main().liveVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'liveVC' could not be loaded from storyboard 'Main' as 'LiveStreamController'.") }
        if _R.storyboard.main().news_FeedVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'news_FeedVC' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().notificationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationVC' could not be loaded from storyboard 'Main' as 'NotificationVC'.") }
        if _R.storyboard.main().postReactionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'postReactionVC' could not be loaded from storyboard 'Main' as 'PostReactionController'.") }
        if _R.storyboard.main().selectUserVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectUserVC' could not be loaded from storyboard 'Main' as 'SelectUserController'.") }
        if _R.storyboard.main().sendMoneyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendMoneyVC' could not be loaded from storyboard 'Main' as 'SendMoneyController'.") }
        if _R.storyboard.main().settingsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsVC' could not be loaded from storyboard 'Main' as 'SettingsVC'.") }
        if _R.storyboard.main().sharePopUpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sharePopUpVC' could not be loaded from storyboard 'Main' as 'SharePopUpController'.") }
        if _R.storyboard.main().sharePostVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sharePostVC' could not be loaded from storyboard 'Main' as 'SharePostController'.") }
        if _R.storyboard.main().shareVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shareVC' could not be loaded from storyboard 'Main' as 'ShareController'.") }
        if _R.storyboard.main().showImageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showImageVC' could not be loaded from storyboard 'Main' as 'ShowImageController'.") }
        if _R.storyboard.main().showMultiImageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showMultiImageVC' could not be loaded from storyboard 'Main' as 'ShowMultiImageController'.") }
        if _R.storyboard.main().showPostVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showPostVC' could not be loaded from storyboard 'Main' as 'ShowPostController'.") }
        if _R.storyboard.main().splashVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashVC' could not be loaded from storyboard 'Main' as 'SplashController'.") }
        if _R.storyboard.main().tabbarVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabbarVC' could not be loaded from storyboard 'Main' as 'UIKit.UITabBarController'.") }
        if _R.storyboard.main().trendingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'trendingVC' could not be loaded from storyboard 'Main' as 'TrendingVC'.") }
        if _R.storyboard.main().upgradeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'upgradeVC' could not be loaded from storyboard 'Main' as 'UpgradeController'.") }
        if _R.storyboard.main().userProfile() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userProfile' could not be loaded from storyboard 'Main' as 'GetUserDataController'.") }
        if _R.storyboard.main().walletVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletVC' could not be loaded from storyboard 'Main' as 'WalletMainController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct marketPlacesPopularPostEvents: Rswift.StoryboardResourceType, Rswift.Validatable {
      let allEventVC = StoryboardViewControllerResource<AllEventsController>(identifier: "AllEventVC")
      let bundle = R.hostingBundle
      let createEventVC = StoryboardViewControllerResource<CreateEventController>(identifier: "CreateEventVC")
      let createProductVC = StoryboardViewControllerResource<CreateProductController>(identifier: "CreateProductVC")
      let eventDetailVC = StoryboardViewControllerResource<EventDetailController>(identifier: "EventDetailVC")
      let eventMoreVC = StoryboardViewControllerResource<EventMoreController>(identifier: "EventMoreVC")
      let eventVC = StoryboardViewControllerResource<EventsParentController>(identifier: "EventVC")
      let getProductsVC = StoryboardViewControllerResource<GetProductsController>(identifier: "GetProductsVC")
      let goingEventVC = StoryboardViewControllerResource<GoingEventController>(identifier: "GoingEventVC")
      let intrestedVC = StoryboardViewControllerResource<IntrestedEventController>(identifier: "intrestedVC")
      let invitedEventVC = StoryboardViewControllerResource<InvitedEventController>(identifier: "InvitedEventVC")
      let myEventVC = StoryboardViewControllerResource<MyEventsController>(identifier: "MyEventVC")
      let name = "MarketPlaces-PopularPost-Events"
      let pastEventVC = StoryboardViewControllerResource<PastEventController>(identifier: "PastEventVC")
      let popularPostVC = StoryboardViewControllerResource<PopularPostController>(identifier: "PopularPostVC")
      let productCategoryVC = StoryboardViewControllerResource<ProductCategoryController>(identifier: "ProductCategoryVC")
      let productDetailsVC = StoryboardViewControllerResource<ProductDetailController>(identifier: "ProductDetailsVC")
      let productDistanceVC = StoryboardViewControllerResource<ProductDistanceController>(identifier: "ProductDistanceVC")
      let savedPostVC = StoryboardViewControllerResource<SavedPostController>(identifier: "SavedPostVC")

      func allEventVC(_: Void = ()) -> AllEventsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: allEventVC)
      }

      func createEventVC(_: Void = ()) -> CreateEventController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createEventVC)
      }

      func createProductVC(_: Void = ()) -> CreateProductController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createProductVC)
      }

      func eventDetailVC(_: Void = ()) -> EventDetailController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eventDetailVC)
      }

      func eventMoreVC(_: Void = ()) -> EventMoreController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eventMoreVC)
      }

      func eventVC(_: Void = ()) -> EventsParentController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eventVC)
      }

      func getProductsVC(_: Void = ()) -> GetProductsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: getProductsVC)
      }

      func goingEventVC(_: Void = ()) -> GoingEventController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: goingEventVC)
      }

      func intrestedVC(_: Void = ()) -> IntrestedEventController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: intrestedVC)
      }

      func invitedEventVC(_: Void = ()) -> InvitedEventController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: invitedEventVC)
      }

      func myEventVC(_: Void = ()) -> MyEventsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myEventVC)
      }

      func pastEventVC(_: Void = ()) -> PastEventController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pastEventVC)
      }

      func popularPostVC(_: Void = ()) -> PopularPostController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popularPostVC)
      }

      func productCategoryVC(_: Void = ()) -> ProductCategoryController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productCategoryVC)
      }

      func productDetailsVC(_: Void = ()) -> ProductDetailController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productDetailsVC)
      }

      func productDistanceVC(_: Void = ()) -> ProductDistanceController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productDistanceVC)
      }

      func savedPostVC(_: Void = ()) -> SavedPostController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: savedPostVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Cart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Cart' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CategoryIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CategoryIcon' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Coffee", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Coffee' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Mappin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Mappin' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Shape", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Shape' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Starts", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Starts' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "addAlbum", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'addAlbum' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "calendars", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'calendars' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cash' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chevronBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chevronBack' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "clockBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clockBlack' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "d-cover", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'd-cover' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "groups", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'groups' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "human-location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'human-location' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_location_place", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_location_place' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "left-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left-arrow' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "levels", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'levels' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "map", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'map' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "maps-and-flags", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'maps-and-flags' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "noContent", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'noContent' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pilcrowIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pilcrowIcon' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "protection", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'protection' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'MarketPlaces-PopularPost-Events', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.marketPlacesPopularPostEvents().allEventVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'allEventVC' could not be loaded from storyboard 'MarketPlaces-PopularPost-Events' as 'AllEventsController'.") }
        if _R.storyboard.marketPlacesPopularPostEvents().createEventVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createEventVC' could not be loaded from storyboard 'MarketPlaces-PopularPost-Events' as 'CreateEventController'.") }
        if _R.storyboard.marketPlacesPopularPostEvents().createProductVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createProductVC' could not be loaded from storyboard 'MarketPlaces-PopularPost-Events' as 'CreateProductController'.") }
        if _R.storyboard.marketPlacesPopularPostEvents().eventDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eventDetailVC' could not be loaded from storyboard 'MarketPlaces-PopularPost-Events' as 'EventDetailController'.") }
        if _R.storyboard.marketPlacesPopularPostEvents().eventMoreVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eventMoreVC' could not be loaded from storyboard 'MarketPlaces-PopularPost-Events' as 'EventMoreController'.") }
        if _R.storyboard.marketPlacesPopularPostEvents().eventVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eventVC' could not be loaded from storyboard 'MarketPlaces-PopularPost-Events' as 'EventsParentController'.") }
        if _R.storyboard.marketPlacesPopularPostEvents().getProductsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'getProductsVC' could not be loaded from storyboard 'MarketPlaces-PopularPost-Events' as 'GetProductsController'.") }
        if _R.storyboard.marketPlacesPopularPostEvents().goingEventVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'goingEventVC' could not be loaded from storyboard 'MarketPlaces-PopularPost-Events' as 'GoingEventController'.") }
        if _R.storyboard.marketPlacesPopularPostEvents().invitedEventVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'invitedEventVC' could not be loaded from storyboard 'MarketPlaces-PopularPost-Events' as 'InvitedEventController'.") }
        if _R.storyboard.marketPlacesPopularPostEvents().myEventVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myEventVC' could not be loaded from storyboard 'MarketPlaces-PopularPost-Events' as 'MyEventsController'.") }
        if _R.storyboard.marketPlacesPopularPostEvents().pastEventVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pastEventVC' could not be loaded from storyboard 'MarketPlaces-PopularPost-Events' as 'PastEventController'.") }
        if _R.storyboard.marketPlacesPopularPostEvents().popularPostVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popularPostVC' could not be loaded from storyboard 'MarketPlaces-PopularPost-Events' as 'PopularPostController'.") }
        if _R.storyboard.marketPlacesPopularPostEvents().productCategoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productCategoryVC' could not be loaded from storyboard 'MarketPlaces-PopularPost-Events' as 'ProductCategoryController'.") }
        if _R.storyboard.marketPlacesPopularPostEvents().productDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productDetailsVC' could not be loaded from storyboard 'MarketPlaces-PopularPost-Events' as 'ProductDetailController'.") }
        if _R.storyboard.marketPlacesPopularPostEvents().productDistanceVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productDistanceVC' could not be loaded from storyboard 'MarketPlaces-PopularPost-Events' as 'ProductDistanceController'.") }
        if _R.storyboard.marketPlacesPopularPostEvents().savedPostVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'savedPostVC' could not be loaded from storyboard 'MarketPlaces-PopularPost-Events' as 'SavedPostController'.") }
        if _R.storyboard.marketPlacesPopularPostEvents().intrestedVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'intrestedVC' could not be loaded from storyboard 'MarketPlaces-PopularPost-Events' as 'IntrestedEventController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct moreSection2: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let invitationLinkVC = StoryboardViewControllerResource<InvitationLinkController>(identifier: "InvitationLinkVC")
      let mapController = StoryboardViewControllerResource<MapController>(identifier: "MapController")
      let myInfoVC = StoryboardViewControllerResource<MyInformationController>(identifier: "MyInfoVC")
      let name = "MoreSection2"
      let showInfoVC = StoryboardViewControllerResource<ShowMyInformation>(identifier: "ShowInfoVC")

      func invitationLinkVC(_: Void = ()) -> InvitationLinkController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: invitationLinkVC)
      }

      func mapController(_: Void = ()) -> MapController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mapController)
      }

      func myInfoVC(_: Void = ()) -> MyInformationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myInfoVC)
      }

      func showInfoVC(_: Void = ()) -> ShowMyInformation? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showInfoVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "NewsFeed-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NewsFeed-1' is used in storyboard 'MoreSection2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Shape", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Shape' is used in storyboard 'MoreSection2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "a", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'a' is used in storyboard 'MoreSection2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "add-friends", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add-friends' is used in storyboard 'MoreSection2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "clipboard", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clipboard' is used in storyboard 'MoreSection2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "exclamation-mark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'exclamation-mark' is used in storyboard 'MoreSection2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebook-group", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebook-group' is used in storyboard 'MoreSection2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "filter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'filter' is used in storyboard 'MoreSection2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "flages", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'flages' is used in storyboard 'MoreSection2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "gps", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gps' is used in storyboard 'MoreSection2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menues", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menues' is used in storyboard 'MoreSection2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "searchWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'searchWhite' is used in storyboard 'MoreSection2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in storyboard 'MoreSection2', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.moreSection2().invitationLinkVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'invitationLinkVC' could not be loaded from storyboard 'MoreSection2' as 'InvitationLinkController'.") }
        if _R.storyboard.moreSection2().mapController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mapController' could not be loaded from storyboard 'MoreSection2' as 'MapController'.") }
        if _R.storyboard.moreSection2().myInfoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myInfoVC' could not be loaded from storyboard 'MoreSection2' as 'MyInformationController'.") }
        if _R.storyboard.moreSection2().showInfoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showInfoVC' could not be loaded from storyboard 'MoreSection2' as 'ShowMyInformation'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct moreSection: Rswift.StoryboardResourceType, Rswift.Validatable {
      let aboutVC = StoryboardViewControllerResource<AboutVC>(identifier: "AboutVC")
      let applyJobVC = StoryboardViewControllerResource<ApplyJobVC>(identifier: "ApplyJobVC")
      let bundle = R.hostingBundle
      let changePics = StoryboardViewControllerResource<ChangedPictureController>(identifier: "changePics")
      let commentReplyVC = StoryboardViewControllerResource<CommentReplyVC>(identifier: "CommentReplyVC")
      let commentVc = StoryboardViewControllerResource<CommentVc>(identifier: "CommentVc")
      let commonThingsVC = StoryboardViewControllerResource<CommonThingsVC>(identifier: "CommonThingsVC")
      let editProfileVC = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "EditProfileVC")
      let filterFriendsVC = StoryboardViewControllerResource<FilterFriendsVC>(identifier: "FilterFriendsVC")
      let filterJobsVC = StoryboardViewControllerResource<FilterJobsVC>(identifier: "FilterJobsVC")
      let findFriendVC = StoryboardViewControllerResource<FindFriendVC>(identifier: "FindFriendVC")
      let followRequestVC = StoryboardViewControllerResource<FollowRequestController>(identifier: "FollowRequestVC")
      let followingVC = StoryboardViewControllerResource<FollowingController>(identifier: "FollowingVC")
      let gamesParentVC = StoryboardViewControllerResource<GamesParentVC>(identifier: "GamesParentVC")
      let gsmesVC = StoryboardViewControllerResource<GsmesVC>(identifier: "GsmesVC")
      let imagesVC = StoryboardViewControllerResource<MyImagesController>(identifier: "ImagesVC")
      let jobDetailsVC = StoryboardViewControllerResource<JobDetailsVC>(identifier: "JobDetailsVC")
      let jobsVC = StoryboardViewControllerResource<JobsVC>(identifier: "JobsVC")
      let more = StoryboardViewControllerResource<MoreVC>(identifier: "More")
      let moviesVC = StoryboardViewControllerResource<MoviesVC>(identifier: "MoviesVC")
      let myGamesVC = StoryboardViewControllerResource<MyGamesVC>(identifier: "MyGamesVC")
      let myProfileVC = StoryboardViewControllerResource<MyProfileController>(identifier: "MyProfileVC")
      let myVideosController = StoryboardViewControllerResource<MyVideosController>(identifier: "MyVideosController")
      let name = "MoreSection"
      let nearByBusinessVC = StoryboardViewControllerResource<NearByBusinessVC>(identifier: "NearByBusinessVC")
      let selectDateVC = StoryboardViewControllerResource<SelectDateVC>(identifier: "SelectDateVC")
      let showGameVC = StoryboardViewControllerResource<ShowGameVC>(identifier: "ShowGameVC")
      let videoDetailsVC = StoryboardViewControllerResource<VideoDetailsVC>(identifier: "VideoDetailsVC")

      func aboutVC(_: Void = ()) -> AboutVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aboutVC)
      }

      func applyJobVC(_: Void = ()) -> ApplyJobVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: applyJobVC)
      }

      func changePics(_: Void = ()) -> ChangedPictureController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePics)
      }

      func commentReplyVC(_: Void = ()) -> CommentReplyVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: commentReplyVC)
      }

      func commentVc(_: Void = ()) -> CommentVc? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: commentVc)
      }

      func commonThingsVC(_: Void = ()) -> CommonThingsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: commonThingsVC)
      }

      func editProfileVC(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileVC)
      }

      func filterFriendsVC(_: Void = ()) -> FilterFriendsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: filterFriendsVC)
      }

      func filterJobsVC(_: Void = ()) -> FilterJobsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: filterJobsVC)
      }

      func findFriendVC(_: Void = ()) -> FindFriendVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: findFriendVC)
      }

      func followRequestVC(_: Void = ()) -> FollowRequestController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: followRequestVC)
      }

      func followingVC(_: Void = ()) -> FollowingController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: followingVC)
      }

      func gamesParentVC(_: Void = ()) -> GamesParentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: gamesParentVC)
      }

      func gsmesVC(_: Void = ()) -> GsmesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: gsmesVC)
      }

      func imagesVC(_: Void = ()) -> MyImagesController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: imagesVC)
      }

      func jobDetailsVC(_: Void = ()) -> JobDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: jobDetailsVC)
      }

      func jobsVC(_: Void = ()) -> JobsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: jobsVC)
      }

      func more(_: Void = ()) -> MoreVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: more)
      }

      func moviesVC(_: Void = ()) -> MoviesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: moviesVC)
      }

      func myGamesVC(_: Void = ()) -> MyGamesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myGamesVC)
      }

      func myProfileVC(_: Void = ()) -> MyProfileController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myProfileVC)
      }

      func myVideosController(_: Void = ()) -> MyVideosController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myVideosController)
      }

      func nearByBusinessVC(_: Void = ()) -> NearByBusinessVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: nearByBusinessVC)
      }

      func selectDateVC(_: Void = ()) -> SelectDateVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectDateVC)
      }

      func showGameVC(_: Void = ()) -> ShowGameVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showGameVC)
      }

      func videoDetailsVC(_: Void = ()) -> VideoDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: videoDetailsVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "AgeCalender", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AgeCalender' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ChevronRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ChevronRight' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Gender", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Gender' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Mappin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Mappin' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "NoImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NoImage' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "at", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'at' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "avatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'avatar' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "briefcase") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'briefcase' is used in storyboard 'MoreSection', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "check-box-empty", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check-box-empty' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chevronBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chevronBack' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "filter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'filter' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "groupIcons", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'groupIcons' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "high-school", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'high-school' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "human-location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'human-location' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "internet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'internet' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "map", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'map' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "moress", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'moress' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "noContent", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'noContent' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pause", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pause' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "photo-camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photo-camera' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pilcrowIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pilcrowIcon' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pin-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pin-2' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'play' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "portfolio-black-symbol", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'portfolio-black-symbol' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "right-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'right-arrow' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "skipBackward", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'skipBackward' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "skipForward", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'skipForward' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "smartphone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'smartphone' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tag", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tag' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "telephone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'telephone' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "timer") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'timer' is used in storyboard 'MoreSection', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'MoreSection', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "video") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'video' is used in storyboard 'MoreSection', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.moreSection().aboutVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aboutVC' could not be loaded from storyboard 'MoreSection' as 'AboutVC'.") }
        if _R.storyboard.moreSection().applyJobVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'applyJobVC' could not be loaded from storyboard 'MoreSection' as 'ApplyJobVC'.") }
        if _R.storyboard.moreSection().commentReplyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'commentReplyVC' could not be loaded from storyboard 'MoreSection' as 'CommentReplyVC'.") }
        if _R.storyboard.moreSection().commentVc() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'commentVc' could not be loaded from storyboard 'MoreSection' as 'CommentVc'.") }
        if _R.storyboard.moreSection().commonThingsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'commonThingsVC' could not be loaded from storyboard 'MoreSection' as 'CommonThingsVC'.") }
        if _R.storyboard.moreSection().editProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'MoreSection' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.moreSection().filterFriendsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'filterFriendsVC' could not be loaded from storyboard 'MoreSection' as 'FilterFriendsVC'.") }
        if _R.storyboard.moreSection().filterJobsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'filterJobsVC' could not be loaded from storyboard 'MoreSection' as 'FilterJobsVC'.") }
        if _R.storyboard.moreSection().findFriendVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'findFriendVC' could not be loaded from storyboard 'MoreSection' as 'FindFriendVC'.") }
        if _R.storyboard.moreSection().followRequestVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'followRequestVC' could not be loaded from storyboard 'MoreSection' as 'FollowRequestController'.") }
        if _R.storyboard.moreSection().followingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'followingVC' could not be loaded from storyboard 'MoreSection' as 'FollowingController'.") }
        if _R.storyboard.moreSection().gamesParentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'gamesParentVC' could not be loaded from storyboard 'MoreSection' as 'GamesParentVC'.") }
        if _R.storyboard.moreSection().gsmesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'gsmesVC' could not be loaded from storyboard 'MoreSection' as 'GsmesVC'.") }
        if _R.storyboard.moreSection().imagesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'imagesVC' could not be loaded from storyboard 'MoreSection' as 'MyImagesController'.") }
        if _R.storyboard.moreSection().jobDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'jobDetailsVC' could not be loaded from storyboard 'MoreSection' as 'JobDetailsVC'.") }
        if _R.storyboard.moreSection().jobsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'jobsVC' could not be loaded from storyboard 'MoreSection' as 'JobsVC'.") }
        if _R.storyboard.moreSection().more() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'more' could not be loaded from storyboard 'MoreSection' as 'MoreVC'.") }
        if _R.storyboard.moreSection().moviesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'moviesVC' could not be loaded from storyboard 'MoreSection' as 'MoviesVC'.") }
        if _R.storyboard.moreSection().myGamesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myGamesVC' could not be loaded from storyboard 'MoreSection' as 'MyGamesVC'.") }
        if _R.storyboard.moreSection().myProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myProfileVC' could not be loaded from storyboard 'MoreSection' as 'MyProfileController'.") }
        if _R.storyboard.moreSection().myVideosController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myVideosController' could not be loaded from storyboard 'MoreSection' as 'MyVideosController'.") }
        if _R.storyboard.moreSection().nearByBusinessVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'nearByBusinessVC' could not be loaded from storyboard 'MoreSection' as 'NearByBusinessVC'.") }
        if _R.storyboard.moreSection().selectDateVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectDateVC' could not be loaded from storyboard 'MoreSection' as 'SelectDateVC'.") }
        if _R.storyboard.moreSection().showGameVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showGameVC' could not be loaded from storyboard 'MoreSection' as 'ShowGameVC'.") }
        if _R.storyboard.moreSection().videoDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'videoDetailsVC' could not be loaded from storyboard 'MoreSection' as 'VideoDetailsVC'.") }
        if _R.storyboard.moreSection().changePics() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePics' could not be loaded from storyboard 'MoreSection' as 'ChangedPictureController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct notification: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Notification"
      let notificationCheckVC = StoryboardViewControllerResource<NotificationCheckVC>(identifier: "NotificationCheckVC")

      func notificationCheckVC(_: Void = ()) -> NotificationCheckVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationCheckVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.notification().notificationCheckVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationCheckVC' could not be loaded from storyboard 'Notification' as 'NotificationCheckVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct offers: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let detailOfferVC = StoryboardViewControllerResource<DetailOfferVC>(identifier: "DetailOfferVC")
      let getOffersVC = StoryboardViewControllerResource<GetOffersVC>(identifier: "GetOffersVC")
      let name = "Offers"

      func detailOfferVC(_: Void = ()) -> DetailOfferVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailOfferVC)
      }

      func getOffersVC(_: Void = ()) -> GetOffersVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: getOffersVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.offers().detailOfferVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailOfferVC' could not be loaded from storyboard 'Offers' as 'DetailOfferVC'.") }
        if _R.storyboard.offers().getOffersVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'getOffersVC' could not be loaded from storyboard 'Offers' as 'GetOffersVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct pokeMyVideosAlbums: Rswift.StoryboardResourceType, Rswift.Validatable {
      let albumImagesVC = StoryboardViewControllerResource<AlbumImagesController>(identifier: "AlbumImagesVC")
      let albumVC = StoryboardViewControllerResource<AlbumController>(identifier: "AlbumVC")
      let articleVC = StoryboardViewControllerResource<BlogController>(identifier: "ArticleVC")
      let blogCategoryVC = StoryboardViewControllerResource<BlogCategoryController>(identifier: "BlogCategoryVC")
      let blogCommentReplyVC = StoryboardViewControllerResource<BlogCommentReplyController>(identifier: "BlogCommentReplyVC")
      let blogDetailsVC = StoryboardViewControllerResource<BlogDetails>(identifier: "BlogDetailsVC")
      let bundle = R.hostingBundle
      let createAlbumVC = StoryboardViewControllerResource<CreateAlbumController>(identifier: "CreateAlbumVC")
      let createBlogVC = StoryboardViewControllerResource<CreateBlogController>(identifier: "CreateBlogVC")
      let myVideoVC = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "MyVideoVC")
      let name = "Poke-MyVideos-Albums"
      let pokeVC = StoryboardViewControllerResource<PokeController>(identifier: "PokeVC")

      func albumImagesVC(_: Void = ()) -> AlbumImagesController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: albumImagesVC)
      }

      func albumVC(_: Void = ()) -> AlbumController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: albumVC)
      }

      func articleVC(_: Void = ()) -> BlogController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: articleVC)
      }

      func blogCategoryVC(_: Void = ()) -> BlogCategoryController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: blogCategoryVC)
      }

      func blogCommentReplyVC(_: Void = ()) -> BlogCommentReplyController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: blogCommentReplyVC)
      }

      func blogDetailsVC(_: Void = ()) -> BlogDetails? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: blogDetailsVC)
      }

      func createAlbumVC(_: Void = ()) -> CreateAlbumController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createAlbumVC)
      }

      func createBlogVC(_: Void = ()) -> CreateBlogController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createBlogVC)
      }

      func myVideoVC(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myVideoVC)
      }

      func pokeVC(_: Void = ()) -> PokeController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pokeVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "CopyLink", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CopyLink' is used in storyboard 'Poke-MyVideos-Albums', but couldn't be loaded.") }
        if UIKit.UIImage(named: "NoAlbum", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NoAlbum' is used in storyboard 'Poke-MyVideos-Albums', but couldn't be loaded.") }
        if UIKit.UIImage(named: "NoImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NoImage' is used in storyboard 'Poke-MyVideos-Albums', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Share' is used in storyboard 'Poke-MyVideos-Albums', but couldn't be loaded.") }
        if UIKit.UIImage(named: "addAlbum", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'addAlbum' is used in storyboard 'Poke-MyVideos-Albums', but couldn't be loaded.") }
        if UIKit.UIImage(named: "avatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'avatar' is used in storyboard 'Poke-MyVideos-Albums', but couldn't be loaded.") }
        if UIKit.UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'Poke-MyVideos-Albums', but couldn't be loaded.") }
        if UIKit.UIImage(named: "filter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'filter' is used in storyboard 'Poke-MyVideos-Albums', but couldn't be loaded.") }
        if UIKit.UIImage(named: "left-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left-arrow' is used in storyboard 'Poke-MyVideos-Albums', but couldn't be loaded.") }
        if UIKit.UIImage(named: "noContent", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'noContent' is used in storyboard 'Poke-MyVideos-Albums', but couldn't be loaded.") }
        if UIKit.UIImage(named: "right-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'right-arrow' is used in storyboard 'Poke-MyVideos-Albums', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ubipro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ubipro' is used in storyboard 'Poke-MyVideos-Albums', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'Poke-MyVideos-Albums', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user1' is used in storyboard 'Poke-MyVideos-Albums', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.pokeMyVideosAlbums().albumImagesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'albumImagesVC' could not be loaded from storyboard 'Poke-MyVideos-Albums' as 'AlbumImagesController'.") }
        if _R.storyboard.pokeMyVideosAlbums().albumVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'albumVC' could not be loaded from storyboard 'Poke-MyVideos-Albums' as 'AlbumController'.") }
        if _R.storyboard.pokeMyVideosAlbums().articleVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'articleVC' could not be loaded from storyboard 'Poke-MyVideos-Albums' as 'BlogController'.") }
        if _R.storyboard.pokeMyVideosAlbums().blogCategoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'blogCategoryVC' could not be loaded from storyboard 'Poke-MyVideos-Albums' as 'BlogCategoryController'.") }
        if _R.storyboard.pokeMyVideosAlbums().blogCommentReplyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'blogCommentReplyVC' could not be loaded from storyboard 'Poke-MyVideos-Albums' as 'BlogCommentReplyController'.") }
        if _R.storyboard.pokeMyVideosAlbums().blogDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'blogDetailsVC' could not be loaded from storyboard 'Poke-MyVideos-Albums' as 'BlogDetails'.") }
        if _R.storyboard.pokeMyVideosAlbums().createAlbumVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createAlbumVC' could not be loaded from storyboard 'Poke-MyVideos-Albums' as 'CreateAlbumController'.") }
        if _R.storyboard.pokeMyVideosAlbums().createBlogVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createBlogVC' could not be loaded from storyboard 'Poke-MyVideos-Albums' as 'CreateBlogController'.") }
        if _R.storyboard.pokeMyVideosAlbums().myVideoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myVideoVC' could not be loaded from storyboard 'Poke-MyVideos-Albums' as 'UIKit.UIViewController'.") }
        if _R.storyboard.pokeMyVideosAlbums().pokeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pokeVC' could not be loaded from storyboard 'Poke-MyVideos-Albums' as 'PokeController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct privacy: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Privacy"
      let privacyVC = StoryboardViewControllerResource<PrivacyVC>(identifier: "PrivacyVC")

      func privacyVC(_: Void = ()) -> PrivacyVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: privacyVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.privacy().privacyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'privacyVC' could not be loaded from storyboard 'Privacy' as 'PrivacyVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct search: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Search"
      let postHashTagVC = StoryboardViewControllerResource<PostHashTagController>(identifier: "PostHashTagVC")
      let searchFilterVC = StoryboardViewControllerResource<SearchFilterController>(identifier: "SearchFilterVC")
      let searchGroupVC = StoryboardViewControllerResource<SearchGroupController>(identifier: "SearchGroupVC")
      let searchLocationVC = StoryboardViewControllerResource<SearchLocationController>(identifier: "SearchLocationVC")
      let searchPageVC = StoryboardViewControllerResource<SearchPageController>(identifier: "SearchPageVC")
      let searchPostVC = StoryboardViewControllerResource<SearchPostController>(identifier: "SearchPostVC")
      let searchUserVC = StoryboardViewControllerResource<SearchUserController>(identifier: "SearchUserVC")
      let searchVC = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "SearchVC")

      func postHashTagVC(_: Void = ()) -> PostHashTagController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: postHashTagVC)
      }

      func searchFilterVC(_: Void = ()) -> SearchFilterController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchFilterVC)
      }

      func searchGroupVC(_: Void = ()) -> SearchGroupController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchGroupVC)
      }

      func searchLocationVC(_: Void = ()) -> SearchLocationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchLocationVC)
      }

      func searchPageVC(_: Void = ()) -> SearchPageController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchPageVC)
      }

      func searchPostVC(_: Void = ()) -> SearchPostController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchPostVC)
      }

      func searchUserVC(_: Void = ()) -> SearchUserController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchUserVC)
      }

      func searchVC(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "AgeCalender", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AgeCalender' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ChevronRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ChevronRight' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Gender", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Gender' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Mappin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Mappin' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chevronBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chevronBack' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "filter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'filter' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "left-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left-arrow' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "nucleus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'nucleus' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shutter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shutter' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "verified-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'verified-2' is used in storyboard 'Search', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.search().postHashTagVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'postHashTagVC' could not be loaded from storyboard 'Search' as 'PostHashTagController'.") }
        if _R.storyboard.search().searchFilterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchFilterVC' could not be loaded from storyboard 'Search' as 'SearchFilterController'.") }
        if _R.storyboard.search().searchGroupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchGroupVC' could not be loaded from storyboard 'Search' as 'SearchGroupController'.") }
        if _R.storyboard.search().searchLocationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchLocationVC' could not be loaded from storyboard 'Search' as 'SearchLocationController'.") }
        if _R.storyboard.search().searchPageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchPageVC' could not be loaded from storyboard 'Search' as 'SearchPageController'.") }
        if _R.storyboard.search().searchPostVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchPostVC' could not be loaded from storyboard 'Search' as 'SearchPostController'.") }
        if _R.storyboard.search().searchUserVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchUserVC' could not be loaded from storyboard 'Search' as 'SearchUserController'.") }
        if _R.storyboard.search().searchVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchVC' could not be loaded from storyboard 'Search' as 'UIKit.UINavigationController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct stories: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let createImageStoryVC = StoryboardViewControllerResource<CreateImageStoryVC>(identifier: "CreateImageStoryVC")
      let createVideoStoryVC = StoryboardViewControllerResource<CreateVideoStoryVC>(identifier: "CreateVideoStoryVC")
      let name = "Stories"
      let pageViewController = StoryboardViewControllerResource<UIKit.UIPageViewController>(identifier: "PageViewController")
      let preStoriesItemVC = StoryboardViewControllerResource<PreStoriesItemVC>(identifier: "PreStoriesItemVC")
      let storyItemVC = StoryboardViewControllerResource<StoryItemVC>(identifier: "StoryItemVC")

      func createImageStoryVC(_: Void = ()) -> CreateImageStoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createImageStoryVC)
      }

      func createVideoStoryVC(_: Void = ()) -> CreateVideoStoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createVideoStoryVC)
      }

      func pageViewController(_: Void = ()) -> UIKit.UIPageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pageViewController)
      }

      func preStoriesItemVC(_: Void = ()) -> PreStoriesItemVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: preStoriesItemVC)
      }

      func storyItemVC(_: Void = ()) -> StoryItemVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storyItemVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'Stories', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "trash") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'trash' is used in storyboard 'Stories', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in storyboard 'Stories', but couldn't be loaded.") }
        }
        if _R.storyboard.stories().createImageStoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createImageStoryVC' could not be loaded from storyboard 'Stories' as 'CreateImageStoryVC'.") }
        if _R.storyboard.stories().createVideoStoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createVideoStoryVC' could not be loaded from storyboard 'Stories' as 'CreateVideoStoryVC'.") }
        if _R.storyboard.stories().pageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pageViewController' could not be loaded from storyboard 'Stories' as 'UIKit.UIPageViewController'.") }
        if _R.storyboard.stories().preStoriesItemVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'preStoriesItemVC' could not be loaded from storyboard 'Stories' as 'PreStoriesItemVC'.") }
        if _R.storyboard.stories().storyItemVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storyItemVC' could not be loaded from storyboard 'Stories' as 'StoryItemVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct tellFriend: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addFundsVC = StoryboardViewControllerResource<AddFundsVC>(identifier: "AddFundsVC")
      let bundle = R.hostingBundle
      let cardAndWalletParentVC = StoryboardViewControllerResource<CardAndWalletParentVC>(identifier: "CardAndWalletParentVC")
      let myAffiliatesVC = StoryboardViewControllerResource<MyAffiliatesVC>(identifier: "MyAffiliatesVC")
      let myPointsVC = StoryboardViewControllerResource<MyPointsVC>(identifier: "MyPointsVC")
      let name = "TellFriend"
      let selectUserVC = StoryboardViewControllerResource<SelectUserVC>(identifier: "SelectUserVC")
      let sendMoneyVC = StoryboardViewControllerResource<SendMoneyVC>(identifier: "SendMoneyVC")
      let tellFriendVC = StoryboardViewControllerResource<TellFriendVC>(identifier: "TellFriendVC")

      func addFundsVC(_: Void = ()) -> AddFundsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addFundsVC)
      }

      func cardAndWalletParentVC(_: Void = ()) -> CardAndWalletParentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cardAndWalletParentVC)
      }

      func myAffiliatesVC(_: Void = ()) -> MyAffiliatesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myAffiliatesVC)
      }

      func myPointsVC(_: Void = ()) -> MyPointsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myPointsVC)
      }

      func selectUserVC(_: Void = ()) -> SelectUserVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectUserVC)
      }

      func sendMoneyVC(_: Void = ()) -> SendMoneyVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendMoneyVC)
      }

      func tellFriendVC(_: Void = ()) -> TellFriendVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tellFriendVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.tellFriend().addFundsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addFundsVC' could not be loaded from storyboard 'TellFriend' as 'AddFundsVC'.") }
        if _R.storyboard.tellFriend().cardAndWalletParentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cardAndWalletParentVC' could not be loaded from storyboard 'TellFriend' as 'CardAndWalletParentVC'.") }
        if _R.storyboard.tellFriend().myAffiliatesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myAffiliatesVC' could not be loaded from storyboard 'TellFriend' as 'MyAffiliatesVC'.") }
        if _R.storyboard.tellFriend().myPointsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myPointsVC' could not be loaded from storyboard 'TellFriend' as 'MyPointsVC'.") }
        if _R.storyboard.tellFriend().selectUserVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectUserVC' could not be loaded from storyboard 'TellFriend' as 'SelectUserVC'.") }
        if _R.storyboard.tellFriend().sendMoneyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendMoneyVC' could not be loaded from storyboard 'TellFriend' as 'SendMoneyVC'.") }
        if _R.storyboard.tellFriend().tellFriendVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tellFriendVC' could not be loaded from storyboard 'TellFriend' as 'TellFriendVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
